Created by PLY version 3.8 (http://www.dabeaz.com/ply)

Unused terminals:

    KW_case
    KW_yield
    TOK_tilda
    KW_protected
    KW_lazy
    KW_with
    KW_private
    KW_do
    KW_sealed
    KW_final
    KW_Try
    KW_forSome
    TOK_at
    KW_ofdim
    TOK_ignore
    KW_override
    KW_implicit
    KW_abstract
    TOK_nl
    TOK_long
    KW_this
    KW_catch
    KW_type
    KW_finally
    KW_super
    KW_throw
    KW_extends
    KW_match
    KW_or
    TOK_eq_gt
    TOK_hash
    KW_trait
    KW_import
    KW_package
    TOK_error
    KW_class
    TOK_cmnt

Grammar

Rule 0     S' -> compilation_unit
Rule 1     compilation_unit -> class_and_obj_declarations
Rule 2     class_and_obj_declarations -> class_and_obj_declaration
Rule 3     class_and_obj_declarations -> class_and_obj_declarations class_and_obj_declaration
Rule 4     class_and_obj_declaration -> singleton_object
Rule 5     singleton_object -> object_declaration block
Rule 6     object_declaration -> KW_obj TOK_identifier
Rule 7     block -> TOK_lcurly block_stats_star TOK_rcurly
Rule 8     block_stats_star -> block_stats
Rule 9     block_stats_star -> empty
Rule 10    block_stats -> block_stat
Rule 11    block_stats -> block_stats block_stat
Rule 12    block_stat -> local_variable_declaration_statement
Rule 13    block_stat -> statement
Rule 14    block_stat -> class_and_obj_declaration
Rule 15    block_stat -> method_declaration
Rule 16    expression_question -> expression
Rule 17    expression_question -> empty
Rule 18    expression -> assignment_expression
Rule 19    assignment_expression -> assignment
Rule 20    assignment_expression -> conditional_or_expression
Rule 21    assignment_expression -> method_invocation
Rule 22    assignment -> left_hand_side assignment_operator assignment_expression
Rule 23    left_hand_side -> id
Rule 24    left_hand_side -> array_access
Rule 25    id -> name
Rule 26    id -> qualified_id
Rule 27    qualified_id -> name TOK_dot name
Rule 28    name -> TOK_identifier
Rule 29    array_access -> id dimension
Rule 30    dimension -> TOK_lsqb expression TOK_rsqb
Rule 31    assignment_operator -> TOK_assignment
Rule 32    assignment_operator -> TOK_mulassign
Rule 33    assignment_operator -> TOK_divassign
Rule 34    assignment_operator -> TOK_modassign
Rule 35    assignment_operator -> TOK_addassign
Rule 36    assignment_operator -> TOK_subassign
Rule 37    conditional_or_expression -> conditional_and_expression
Rule 38    conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression
Rule 39    conditional_and_expression -> inclusive_or_expression
Rule 40    conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression
Rule 41    inclusive_or_expression -> exclusive_or_expression
Rule 42    inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression
Rule 43    exclusive_or_expression -> and_expression
Rule 44    exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression
Rule 45    and_expression -> equality_expression
Rule 46    and_expression -> and_expression TOK_and_bitwise equality_expression
Rule 47    equality_expression -> relational_expression
Rule 48    equality_expression -> equality_expression TOK_equal relational_expression
Rule 49    equality_expression -> equality_expression TOK_nequal relational_expression
Rule 50    relational_expression -> shift_expression
Rule 51    relational_expression -> relational_expression TOK_greater shift_expression
Rule 52    relational_expression -> relational_expression TOK_lesser shift_expression
Rule 53    relational_expression -> relational_expression TOK_geq shift_expression
Rule 54    relational_expression -> relational_expression TOK_leq shift_expression
Rule 55    shift_expression -> additive_expression
Rule 56    shift_expression -> shift_expression TOK_lshift additive_expression
Rule 57    shift_expression -> shift_expression TOK_rshift additive_expression
Rule 58    additive_expression -> multiplicative_expression
Rule 59    additive_expression -> additive_expression TOK_plus multiplicative_expression
Rule 60    additive_expression -> additive_expression TOK_minus multiplicative_expression
Rule 61    multiplicative_expression -> unary_expression
Rule 62    multiplicative_expression -> multiplicative_expression TOK_times unary_expression
Rule 63    multiplicative_expression -> multiplicative_expression TOK_divide unary_expression
Rule 64    multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression
Rule 65    unary_expression -> TOK_plus unary_expression
Rule 66    unary_expression -> TOK_minus unary_expression
Rule 67    unary_expression -> unary_expression_not_plus_minus
Rule 68    unary_expression_not_plus_minus -> base_variable_set
Rule 69    unary_expression_not_plus_minus -> TOK_not unary_expression
Rule 70    base_variable_set -> variable_literal
Rule 71    base_variable_set -> TOK_paraleft expression TOK_pararight
Rule 72    variable_literal -> left_hand_side
Rule 73    variable_literal -> primary
Rule 74    primary -> literal
Rule 75    primary -> method_invocation
Rule 76    literal -> int_float
Rule 77    literal -> c_literal
Rule 78    c_literal -> TOK_string
Rule 79    c_literal -> KW_true
Rule 80    c_literal -> KW_false
Rule 81    c_literal -> KW_null
Rule 82    c_literal -> TOK_char
Rule 83    int_float -> TOK_float
Rule 84    int_float -> TOK_int
Rule 85    method_invocation -> id TOK_paraleft argument_list_question TOK_pararight
Rule 86    argument_list_question -> argument_list
Rule 87    argument_list_question -> empty
Rule 88    argument_list -> expression
Rule 89    argument_list -> argument_list TOK_comma expression
Rule 90    declaration_keyword -> KW_var
Rule 91    declaration_keyword -> KW_val
Rule 92    local_variable_declaration_statement -> local_variable_declaration TOK_semi
Rule 93    local_variable_declaration -> declaration_keyword variable_declaration_body
Rule 94    variable_declaration_initializer -> expression
Rule 95    variable_declaration_initializer -> array_initializer
Rule 96    variable_declaration_body -> TOK_identifier type_question TOK_assignment variable_declaration_initializer
Rule 97    variable_declarator_id -> TOK_identifier TOK_colon type
Rule 98    type -> primitive_type
Rule 99    type -> reference_type
Rule 100   primitive_type -> KW_int
Rule 101   primitive_type -> KW_double
Rule 102   primitive_type -> KW_char
Rule 103   primitive_type -> KW_string
Rule 104   primitive_type -> KW_boolean
Rule 105   primitive_type -> KW_void
Rule 106   reference_type -> array_data_type
Rule 107   array_data_type -> KW_array TOK_lsqb type TOK_rsqb
Rule 108   array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft TOK_int TOK_pararight
Rule 109   statement -> normal_statement
Rule 110   statement -> if_then_statement
Rule 111   statement -> if_then_else_statement
Rule 112   statement -> while_statement
Rule 113   statement -> for_statement
Rule 114   normal_statement -> block
Rule 115   normal_statement -> expression_statement
Rule 116   normal_statement -> empty_statement
Rule 117   normal_statement -> return_statement
Rule 118   expression_statement -> statement_expression TOK_semi
Rule 119   statement_expression -> assignment
Rule 120   statement_expression -> method_invocation
Rule 121   if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement
Rule 122   if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
Rule 123   if_then_else_statement_precedence -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate
Rule 124   if_then_else_intermediate -> normal_statement
Rule 125   if_then_else_intermediate -> if_then_else_statement_precedence
Rule 126   while_statement -> KW_while TOK_paraleft expression TOK_pararight statement
Rule 127   for_statement -> KW_for TOK_paraleft for_update TOK_pararight statement
Rule 128   for_update -> for_loop for_step_opts
Rule 129   for_loop -> TOK_identifier TOK_choose expression for_untilTo expression
Rule 130   for_untilTo -> KW_until
Rule 131   for_untilTo -> KW_to
Rule 132   for_step_opts -> KW_by expression
Rule 133   for_step_opts -> empty
Rule 134   empty_statement -> TOK_semi
Rule 135   return_statement -> KW_return expression_question TOK_semi
Rule 136   type_question -> TOK_colon type
Rule 137   method_declaration -> method_header method_body
Rule 138   method_header -> KW_def name TOK_paraleft fun_params_question TOK_pararight type_question TOK_assignment
Rule 139   method_header -> KW_def name TOK_paraleft fun_params_question TOK_pararight
Rule 140   fun_params_question -> fun_params
Rule 141   fun_params_question -> empty
Rule 142   fun_params -> fun_param
Rule 143   fun_params -> fun_params TOK_comma fun_param
Rule 144   fun_param -> variable_declarator_id
Rule 145   method_body -> block
Rule 146   empty -> <empty>

Terminals, with rules where they appear

KW_Try               : 
KW_abstract          : 
KW_array             : 107 108
KW_boolean           : 104
KW_by                : 132
KW_case              : 
KW_catch             : 
KW_char              : 102
KW_class             : 
KW_def               : 138 139
KW_do                : 
KW_double            : 101
KW_else              : 122 123
KW_extends           : 
KW_false             : 80
KW_final             : 
KW_finally           : 
KW_for               : 127
KW_forSome           : 
KW_if                : 121 122 123
KW_implicit          : 
KW_import            : 
KW_int               : 100
KW_lazy              : 
KW_match             : 
KW_new               : 108
KW_null              : 81
KW_obj               : 6
KW_ofdim             : 
KW_or                : 
KW_override          : 
KW_package           : 
KW_private           : 
KW_protected         : 
KW_return            : 135
KW_sealed            : 
KW_string            : 103
KW_super             : 
KW_this              : 
KW_throw             : 
KW_to                : 131
KW_trait             : 
KW_true              : 79
KW_type              : 
KW_until             : 130
KW_val               : 91
KW_var               : 90
KW_void              : 105
KW_while             : 126
KW_with              : 
KW_yield             : 
TOK_addassign        : 35
TOK_and              : 40
TOK_and_bitwise      : 46
TOK_assignment       : 31 96 138
TOK_at               : 
TOK_char             : 82
TOK_choose           : 129
TOK_cmnt             : 
TOK_colon            : 97 136
TOK_comma            : 89 143
TOK_divassign        : 33
TOK_divide           : 63
TOK_dot              : 27
TOK_eq_gt            : 
TOK_equal            : 48
TOK_error            : 
TOK_float            : 83
TOK_geq              : 53
TOK_greater          : 51
TOK_hash             : 
TOK_identifier       : 6 28 96 97 129
TOK_ignore           : 
TOK_int              : 84 108
TOK_lcurly           : 7
TOK_leq              : 54
TOK_lesser           : 52
TOK_long             : 
TOK_lshift           : 56
TOK_lsqb             : 30 107 108
TOK_minus            : 60 66
TOK_modassign        : 34
TOK_modulus          : 64
TOK_mulassign        : 32
TOK_nequal           : 49
TOK_nl               : 
TOK_not              : 69
TOK_or               : 38
TOK_or_bitwise       : 42
TOK_paraleft         : 71 85 108 121 122 123 126 127 138 139
TOK_pararight        : 71 85 108 121 122 123 126 127 138 139
TOK_plus             : 59 65
TOK_rcurly           : 7
TOK_rshift           : 57
TOK_rsqb             : 30 107 108
TOK_semi             : 92 118 134 135
TOK_string           : 78
TOK_subassign        : 36
TOK_tilda            : 
TOK_times            : 62
TOK_xor              : 44
error                : 

Nonterminals, with rules where they appear

additive_expression  : 55 56 57 59 60
and_expression       : 43 44 46
argument_list        : 86 89
argument_list_question : 85
array_access         : 24
array_data_type      : 106
array_initializer    : 95
assignment           : 19 119
assignment_expression : 18 22
assignment_operator  : 22
base_variable_set    : 68
block                : 5 114 145
block_stat           : 10 11
block_stats          : 8 11
block_stats_star     : 7
c_literal            : 77
class_and_obj_declaration : 2 3 14
class_and_obj_declarations : 1 3
compilation_unit     : 0
conditional_and_expression : 37 38 40
conditional_or_expression : 20 38
declaration_keyword  : 93
dimension            : 29
empty                : 9 17 87 133 141
empty_statement      : 116
equality_expression  : 45 46 48 49
exclusive_or_expression : 41 42 44
expression           : 16 30 71 88 89 94 121 122 123 126 129 129 132
expression_question  : 135
expression_statement : 115
for_loop             : 128
for_statement        : 113
for_step_opts        : 128
for_untilTo          : 129
for_update           : 127
fun_param            : 142 143
fun_params           : 140 143
fun_params_question  : 138 139
id                   : 23 29 85
if_then_else_intermediate : 122 123 123
if_then_else_statement : 111
if_then_else_statement_precedence : 125
if_then_statement    : 110
inclusive_or_expression : 39 40 42
int_float            : 76
left_hand_side       : 22 72
literal              : 74
local_variable_declaration : 92
local_variable_declaration_statement : 12
method_body          : 137
method_declaration   : 15
method_header        : 137
method_invocation    : 21 75 120
multiplicative_expression : 58 59 60 62 63 64
name                 : 25 27 27 138 139
normal_statement     : 109 124
object_declaration   : 5
primary              : 73
primitive_type       : 98
qualified_id         : 26
reference_type       : 99
relational_expression : 47 48 49 51 52 53 54
return_statement     : 117
shift_expression     : 50 51 52 53 54 56 57
singleton_object     : 4
statement            : 13 121 122 126 127
statement_expression : 118
type                 : 97 107 108 136
type_question        : 96 138
unary_expression     : 61 62 63 64 65 66 69
unary_expression_not_plus_minus : 67
variable_declaration_body : 93
variable_declaration_initializer : 96
variable_declarator_id : 144
variable_literal     : 70
while_statement      : 112

Parsing method: LALR

state 0

    (0) S' -> . compilation_unit
    (1) compilation_unit -> . class_and_obj_declarations
    (2) class_and_obj_declarations -> . class_and_obj_declaration
    (3) class_and_obj_declarations -> . class_and_obj_declarations class_and_obj_declaration
    (4) class_and_obj_declaration -> . singleton_object
    (5) singleton_object -> . object_declaration block
    (6) object_declaration -> . KW_obj TOK_identifier

    KW_obj          shift and go to state 4

    class_and_obj_declaration      shift and go to state 1
    class_and_obj_declarations     shift and go to state 2
    compilation_unit               shift and go to state 3
    object_declaration             shift and go to state 5
    singleton_object               shift and go to state 6

state 1

    (2) class_and_obj_declarations -> class_and_obj_declaration .

    KW_obj          reduce using rule 2 (class_and_obj_declarations -> class_and_obj_declaration .)
    $end            reduce using rule 2 (class_and_obj_declarations -> class_and_obj_declaration .)


state 2

    (1) compilation_unit -> class_and_obj_declarations .
    (3) class_and_obj_declarations -> class_and_obj_declarations . class_and_obj_declaration
    (4) class_and_obj_declaration -> . singleton_object
    (5) singleton_object -> . object_declaration block
    (6) object_declaration -> . KW_obj TOK_identifier

    $end            reduce using rule 1 (compilation_unit -> class_and_obj_declarations .)
    KW_obj          shift and go to state 4

    class_and_obj_declaration      shift and go to state 7
    singleton_object               shift and go to state 6
    object_declaration             shift and go to state 5

state 3

    (0) S' -> compilation_unit .



state 4

    (6) object_declaration -> KW_obj . TOK_identifier

    TOK_identifier  shift and go to state 8


state 5

    (5) singleton_object -> object_declaration . block
    (7) block -> . TOK_lcurly block_stats_star TOK_rcurly

    TOK_lcurly      shift and go to state 9

    block                          shift and go to state 10

state 6

    (4) class_and_obj_declaration -> singleton_object .

    KW_if           reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    KW_while        reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    KW_for          reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    KW_def          reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    KW_var          reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    KW_val          reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    TOK_lcurly      reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    TOK_semi        reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    KW_return       reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    KW_obj          reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    TOK_identifier  reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    TOK_rcurly      reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    $end            reduce using rule 4 (class_and_obj_declaration -> singleton_object .)


state 7

    (3) class_and_obj_declarations -> class_and_obj_declarations class_and_obj_declaration .

    KW_obj          reduce using rule 3 (class_and_obj_declarations -> class_and_obj_declarations class_and_obj_declaration .)
    $end            reduce using rule 3 (class_and_obj_declarations -> class_and_obj_declarations class_and_obj_declaration .)


state 8

    (6) object_declaration -> KW_obj TOK_identifier .

    TOK_lcurly      reduce using rule 6 (object_declaration -> KW_obj TOK_identifier .)


state 9

    (7) block -> TOK_lcurly . block_stats_star TOK_rcurly
    (8) block_stats_star -> . block_stats
    (9) block_stats_star -> . empty
    (10) block_stats -> . block_stat
    (11) block_stats -> . block_stats block_stat
    (146) empty -> .
    (12) block_stat -> . local_variable_declaration_statement
    (13) block_stat -> . statement
    (14) block_stat -> . class_and_obj_declaration
    (15) block_stat -> . method_declaration
    (92) local_variable_declaration_statement -> . local_variable_declaration TOK_semi
    (109) statement -> . normal_statement
    (110) statement -> . if_then_statement
    (111) statement -> . if_then_else_statement
    (112) statement -> . while_statement
    (113) statement -> . for_statement
    (4) class_and_obj_declaration -> . singleton_object
    (137) method_declaration -> . method_header method_body
    (93) local_variable_declaration -> . declaration_keyword variable_declaration_body
    (114) normal_statement -> . block
    (115) normal_statement -> . expression_statement
    (116) normal_statement -> . empty_statement
    (117) normal_statement -> . return_statement
    (121) if_then_statement -> . KW_if TOK_paraleft expression TOK_pararight statement
    (122) if_then_else_statement -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (126) while_statement -> . KW_while TOK_paraleft expression TOK_pararight statement
    (127) for_statement -> . KW_for TOK_paraleft for_update TOK_pararight statement
    (5) singleton_object -> . object_declaration block
    (138) method_header -> . KW_def name TOK_paraleft fun_params_question TOK_pararight type_question TOK_assignment
    (139) method_header -> . KW_def name TOK_paraleft fun_params_question TOK_pararight
    (90) declaration_keyword -> . KW_var
    (91) declaration_keyword -> . KW_val
    (7) block -> . TOK_lcurly block_stats_star TOK_rcurly
    (118) expression_statement -> . statement_expression TOK_semi
    (134) empty_statement -> . TOK_semi
    (135) return_statement -> . KW_return expression_question TOK_semi
    (6) object_declaration -> . KW_obj TOK_identifier
    (119) statement_expression -> . assignment
    (120) statement_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name

    TOK_rcurly      reduce using rule 146 (empty -> .)
    KW_if           shift and go to state 31
    KW_while        shift and go to state 45
    KW_for          shift and go to state 25
    KW_def          shift and go to state 28
    KW_var          shift and go to state 17
    KW_val          shift and go to state 14
    TOK_lcurly      shift and go to state 9
    TOK_semi        shift and go to state 41
    KW_return       shift and go to state 42
    KW_obj          shift and go to state 4
    TOK_identifier  shift and go to state 22

    expression_statement           shift and go to state 11
    object_declaration             shift and go to state 5
    block_stat                     shift and go to state 12
    normal_statement               shift and go to state 13
    block_stats_star               shift and go to state 15
    declaration_keyword            shift and go to state 16
    if_then_statement              shift and go to state 18
    left_hand_side                 shift and go to state 19
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    class_and_obj_declaration      shift and go to state 23
    method_declaration             shift and go to state 24
    return_statement               shift and go to state 26
    while_statement                shift and go to state 27
    statement                      shift and go to state 29
    statement_expression           shift and go to state 30
    method_invocation              shift and go to state 36
    empty                          shift and go to state 32
    for_statement                  shift and go to state 33
    local_variable_declaration_statement shift and go to state 34
    assignment                     shift and go to state 35
    singleton_object               shift and go to state 6
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    method_header                  shift and go to state 39
    empty_statement                shift and go to state 40
    local_variable_declaration     shift and go to state 43
    block_stats                    shift and go to state 44
    block                          shift and go to state 46
    if_then_else_statement         shift and go to state 47

state 10

    (5) singleton_object -> object_declaration block .

    KW_obj          reduce using rule 5 (singleton_object -> object_declaration block .)
    $end            reduce using rule 5 (singleton_object -> object_declaration block .)
    KW_if           reduce using rule 5 (singleton_object -> object_declaration block .)
    KW_while        reduce using rule 5 (singleton_object -> object_declaration block .)
    KW_for          reduce using rule 5 (singleton_object -> object_declaration block .)
    KW_def          reduce using rule 5 (singleton_object -> object_declaration block .)
    KW_var          reduce using rule 5 (singleton_object -> object_declaration block .)
    KW_val          reduce using rule 5 (singleton_object -> object_declaration block .)
    TOK_lcurly      reduce using rule 5 (singleton_object -> object_declaration block .)
    TOK_semi        reduce using rule 5 (singleton_object -> object_declaration block .)
    KW_return       reduce using rule 5 (singleton_object -> object_declaration block .)
    TOK_identifier  reduce using rule 5 (singleton_object -> object_declaration block .)
    TOK_rcurly      reduce using rule 5 (singleton_object -> object_declaration block .)


state 11

    (115) normal_statement -> expression_statement .

    KW_if           reduce using rule 115 (normal_statement -> expression_statement .)
    KW_while        reduce using rule 115 (normal_statement -> expression_statement .)
    KW_for          reduce using rule 115 (normal_statement -> expression_statement .)
    KW_def          reduce using rule 115 (normal_statement -> expression_statement .)
    KW_var          reduce using rule 115 (normal_statement -> expression_statement .)
    KW_val          reduce using rule 115 (normal_statement -> expression_statement .)
    TOK_lcurly      reduce using rule 115 (normal_statement -> expression_statement .)
    TOK_semi        reduce using rule 115 (normal_statement -> expression_statement .)
    KW_return       reduce using rule 115 (normal_statement -> expression_statement .)
    KW_obj          reduce using rule 115 (normal_statement -> expression_statement .)
    TOK_identifier  reduce using rule 115 (normal_statement -> expression_statement .)
    TOK_rcurly      reduce using rule 115 (normal_statement -> expression_statement .)
    KW_else         reduce using rule 115 (normal_statement -> expression_statement .)


state 12

    (10) block_stats -> block_stat .

    KW_if           reduce using rule 10 (block_stats -> block_stat .)
    KW_while        reduce using rule 10 (block_stats -> block_stat .)
    KW_for          reduce using rule 10 (block_stats -> block_stat .)
    KW_def          reduce using rule 10 (block_stats -> block_stat .)
    KW_var          reduce using rule 10 (block_stats -> block_stat .)
    KW_val          reduce using rule 10 (block_stats -> block_stat .)
    TOK_lcurly      reduce using rule 10 (block_stats -> block_stat .)
    TOK_semi        reduce using rule 10 (block_stats -> block_stat .)
    KW_return       reduce using rule 10 (block_stats -> block_stat .)
    KW_obj          reduce using rule 10 (block_stats -> block_stat .)
    TOK_identifier  reduce using rule 10 (block_stats -> block_stat .)
    TOK_rcurly      reduce using rule 10 (block_stats -> block_stat .)


state 13

    (109) statement -> normal_statement .

    KW_if           reduce using rule 109 (statement -> normal_statement .)
    KW_while        reduce using rule 109 (statement -> normal_statement .)
    KW_for          reduce using rule 109 (statement -> normal_statement .)
    KW_def          reduce using rule 109 (statement -> normal_statement .)
    KW_var          reduce using rule 109 (statement -> normal_statement .)
    KW_val          reduce using rule 109 (statement -> normal_statement .)
    TOK_lcurly      reduce using rule 109 (statement -> normal_statement .)
    TOK_semi        reduce using rule 109 (statement -> normal_statement .)
    KW_return       reduce using rule 109 (statement -> normal_statement .)
    KW_obj          reduce using rule 109 (statement -> normal_statement .)
    TOK_identifier  reduce using rule 109 (statement -> normal_statement .)
    TOK_rcurly      reduce using rule 109 (statement -> normal_statement .)


state 14

    (91) declaration_keyword -> KW_val .

    TOK_identifier  reduce using rule 91 (declaration_keyword -> KW_val .)


state 15

    (7) block -> TOK_lcurly block_stats_star . TOK_rcurly

    TOK_rcurly      shift and go to state 48


state 16

    (93) local_variable_declaration -> declaration_keyword . variable_declaration_body
    (96) variable_declaration_body -> . TOK_identifier type_question TOK_assignment variable_declaration_initializer

    TOK_identifier  shift and go to state 50

    variable_declaration_body      shift and go to state 49

state 17

    (90) declaration_keyword -> KW_var .

    TOK_identifier  reduce using rule 90 (declaration_keyword -> KW_var .)


state 18

    (110) statement -> if_then_statement .

    KW_if           reduce using rule 110 (statement -> if_then_statement .)
    KW_while        reduce using rule 110 (statement -> if_then_statement .)
    KW_for          reduce using rule 110 (statement -> if_then_statement .)
    KW_def          reduce using rule 110 (statement -> if_then_statement .)
    KW_var          reduce using rule 110 (statement -> if_then_statement .)
    KW_val          reduce using rule 110 (statement -> if_then_statement .)
    TOK_lcurly      reduce using rule 110 (statement -> if_then_statement .)
    TOK_semi        reduce using rule 110 (statement -> if_then_statement .)
    KW_return       reduce using rule 110 (statement -> if_then_statement .)
    KW_obj          reduce using rule 110 (statement -> if_then_statement .)
    TOK_identifier  reduce using rule 110 (statement -> if_then_statement .)
    TOK_rcurly      reduce using rule 110 (statement -> if_then_statement .)


state 19

    (22) assignment -> left_hand_side . assignment_operator assignment_expression
    (31) assignment_operator -> . TOK_assignment
    (32) assignment_operator -> . TOK_mulassign
    (33) assignment_operator -> . TOK_divassign
    (34) assignment_operator -> . TOK_modassign
    (35) assignment_operator -> . TOK_addassign
    (36) assignment_operator -> . TOK_subassign

    TOK_assignment  shift and go to state 56
    TOK_mulassign   shift and go to state 57
    TOK_divassign   shift and go to state 51
    TOK_modassign   shift and go to state 52
    TOK_addassign   shift and go to state 54
    TOK_subassign   shift and go to state 53

    assignment_operator            shift and go to state 55

state 20

    (24) left_hand_side -> array_access .

    TOK_times       reduce using rule 24 (left_hand_side -> array_access .)
    TOK_divide      reduce using rule 24 (left_hand_side -> array_access .)
    TOK_modulus     reduce using rule 24 (left_hand_side -> array_access .)
    TOK_plus        reduce using rule 24 (left_hand_side -> array_access .)
    TOK_minus       reduce using rule 24 (left_hand_side -> array_access .)
    TOK_lshift      reduce using rule 24 (left_hand_side -> array_access .)
    TOK_rshift      reduce using rule 24 (left_hand_side -> array_access .)
    TOK_greater     reduce using rule 24 (left_hand_side -> array_access .)
    TOK_lesser      reduce using rule 24 (left_hand_side -> array_access .)
    TOK_geq         reduce using rule 24 (left_hand_side -> array_access .)
    TOK_leq         reduce using rule 24 (left_hand_side -> array_access .)
    TOK_equal       reduce using rule 24 (left_hand_side -> array_access .)
    TOK_nequal      reduce using rule 24 (left_hand_side -> array_access .)
    TOK_and_bitwise reduce using rule 24 (left_hand_side -> array_access .)
    TOK_xor         reduce using rule 24 (left_hand_side -> array_access .)
    TOK_or_bitwise  reduce using rule 24 (left_hand_side -> array_access .)
    TOK_and         reduce using rule 24 (left_hand_side -> array_access .)
    TOK_or          reduce using rule 24 (left_hand_side -> array_access .)
    TOK_semi        reduce using rule 24 (left_hand_side -> array_access .)
    TOK_comma       reduce using rule 24 (left_hand_side -> array_access .)
    TOK_pararight   reduce using rule 24 (left_hand_side -> array_access .)
    TOK_rsqb        reduce using rule 24 (left_hand_side -> array_access .)
    KW_until        reduce using rule 24 (left_hand_side -> array_access .)
    KW_to           reduce using rule 24 (left_hand_side -> array_access .)
    KW_by           reduce using rule 24 (left_hand_side -> array_access .)
    TOK_assignment  reduce using rule 24 (left_hand_side -> array_access .)
    TOK_mulassign   reduce using rule 24 (left_hand_side -> array_access .)
    TOK_divassign   reduce using rule 24 (left_hand_side -> array_access .)
    TOK_modassign   reduce using rule 24 (left_hand_side -> array_access .)
    TOK_addassign   reduce using rule 24 (left_hand_side -> array_access .)
    TOK_subassign   reduce using rule 24 (left_hand_side -> array_access .)


state 21

    (85) method_invocation -> id . TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> id .
    (29) array_access -> id . dimension
    (30) dimension -> . TOK_lsqb expression TOK_rsqb

    TOK_paraleft    shift and go to state 58
    TOK_assignment  reduce using rule 23 (left_hand_side -> id .)
    TOK_mulassign   reduce using rule 23 (left_hand_side -> id .)
    TOK_divassign   reduce using rule 23 (left_hand_side -> id .)
    TOK_modassign   reduce using rule 23 (left_hand_side -> id .)
    TOK_addassign   reduce using rule 23 (left_hand_side -> id .)
    TOK_subassign   reduce using rule 23 (left_hand_side -> id .)
    TOK_times       reduce using rule 23 (left_hand_side -> id .)
    TOK_divide      reduce using rule 23 (left_hand_side -> id .)
    TOK_modulus     reduce using rule 23 (left_hand_side -> id .)
    TOK_plus        reduce using rule 23 (left_hand_side -> id .)
    TOK_minus       reduce using rule 23 (left_hand_side -> id .)
    TOK_lshift      reduce using rule 23 (left_hand_side -> id .)
    TOK_rshift      reduce using rule 23 (left_hand_side -> id .)
    TOK_greater     reduce using rule 23 (left_hand_side -> id .)
    TOK_lesser      reduce using rule 23 (left_hand_side -> id .)
    TOK_geq         reduce using rule 23 (left_hand_side -> id .)
    TOK_leq         reduce using rule 23 (left_hand_side -> id .)
    TOK_equal       reduce using rule 23 (left_hand_side -> id .)
    TOK_nequal      reduce using rule 23 (left_hand_side -> id .)
    TOK_and_bitwise reduce using rule 23 (left_hand_side -> id .)
    TOK_xor         reduce using rule 23 (left_hand_side -> id .)
    TOK_or_bitwise  reduce using rule 23 (left_hand_side -> id .)
    TOK_and         reduce using rule 23 (left_hand_side -> id .)
    TOK_or          reduce using rule 23 (left_hand_side -> id .)
    TOK_semi        reduce using rule 23 (left_hand_side -> id .)
    TOK_pararight   reduce using rule 23 (left_hand_side -> id .)
    KW_until        reduce using rule 23 (left_hand_side -> id .)
    KW_to           reduce using rule 23 (left_hand_side -> id .)
    TOK_comma       reduce using rule 23 (left_hand_side -> id .)
    KW_by           reduce using rule 23 (left_hand_side -> id .)
    TOK_rsqb        reduce using rule 23 (left_hand_side -> id .)
    TOK_lsqb        shift and go to state 60

    dimension                      shift and go to state 59

state 22

    (28) name -> TOK_identifier .

    TOK_dot         reduce using rule 28 (name -> TOK_identifier .)
    TOK_paraleft    reduce using rule 28 (name -> TOK_identifier .)
    TOK_lsqb        reduce using rule 28 (name -> TOK_identifier .)
    TOK_times       reduce using rule 28 (name -> TOK_identifier .)
    TOK_divide      reduce using rule 28 (name -> TOK_identifier .)
    TOK_modulus     reduce using rule 28 (name -> TOK_identifier .)
    TOK_plus        reduce using rule 28 (name -> TOK_identifier .)
    TOK_minus       reduce using rule 28 (name -> TOK_identifier .)
    TOK_lshift      reduce using rule 28 (name -> TOK_identifier .)
    TOK_rshift      reduce using rule 28 (name -> TOK_identifier .)
    TOK_greater     reduce using rule 28 (name -> TOK_identifier .)
    TOK_lesser      reduce using rule 28 (name -> TOK_identifier .)
    TOK_geq         reduce using rule 28 (name -> TOK_identifier .)
    TOK_leq         reduce using rule 28 (name -> TOK_identifier .)
    TOK_equal       reduce using rule 28 (name -> TOK_identifier .)
    TOK_nequal      reduce using rule 28 (name -> TOK_identifier .)
    TOK_and_bitwise reduce using rule 28 (name -> TOK_identifier .)
    TOK_xor         reduce using rule 28 (name -> TOK_identifier .)
    TOK_or_bitwise  reduce using rule 28 (name -> TOK_identifier .)
    TOK_and         reduce using rule 28 (name -> TOK_identifier .)
    TOK_or          reduce using rule 28 (name -> TOK_identifier .)
    TOK_semi        reduce using rule 28 (name -> TOK_identifier .)
    TOK_comma       reduce using rule 28 (name -> TOK_identifier .)
    TOK_pararight   reduce using rule 28 (name -> TOK_identifier .)
    TOK_rsqb        reduce using rule 28 (name -> TOK_identifier .)
    KW_until        reduce using rule 28 (name -> TOK_identifier .)
    KW_to           reduce using rule 28 (name -> TOK_identifier .)
    KW_by           reduce using rule 28 (name -> TOK_identifier .)
    TOK_assignment  reduce using rule 28 (name -> TOK_identifier .)
    TOK_mulassign   reduce using rule 28 (name -> TOK_identifier .)
    TOK_divassign   reduce using rule 28 (name -> TOK_identifier .)
    TOK_modassign   reduce using rule 28 (name -> TOK_identifier .)
    TOK_addassign   reduce using rule 28 (name -> TOK_identifier .)
    TOK_subassign   reduce using rule 28 (name -> TOK_identifier .)


state 23

    (14) block_stat -> class_and_obj_declaration .

    KW_if           reduce using rule 14 (block_stat -> class_and_obj_declaration .)
    KW_while        reduce using rule 14 (block_stat -> class_and_obj_declaration .)
    KW_for          reduce using rule 14 (block_stat -> class_and_obj_declaration .)
    KW_def          reduce using rule 14 (block_stat -> class_and_obj_declaration .)
    KW_var          reduce using rule 14 (block_stat -> class_and_obj_declaration .)
    KW_val          reduce using rule 14 (block_stat -> class_and_obj_declaration .)
    TOK_lcurly      reduce using rule 14 (block_stat -> class_and_obj_declaration .)
    TOK_semi        reduce using rule 14 (block_stat -> class_and_obj_declaration .)
    KW_return       reduce using rule 14 (block_stat -> class_and_obj_declaration .)
    KW_obj          reduce using rule 14 (block_stat -> class_and_obj_declaration .)
    TOK_identifier  reduce using rule 14 (block_stat -> class_and_obj_declaration .)
    TOK_rcurly      reduce using rule 14 (block_stat -> class_and_obj_declaration .)


state 24

    (15) block_stat -> method_declaration .

    KW_if           reduce using rule 15 (block_stat -> method_declaration .)
    KW_while        reduce using rule 15 (block_stat -> method_declaration .)
    KW_for          reduce using rule 15 (block_stat -> method_declaration .)
    KW_def          reduce using rule 15 (block_stat -> method_declaration .)
    KW_var          reduce using rule 15 (block_stat -> method_declaration .)
    KW_val          reduce using rule 15 (block_stat -> method_declaration .)
    TOK_lcurly      reduce using rule 15 (block_stat -> method_declaration .)
    TOK_semi        reduce using rule 15 (block_stat -> method_declaration .)
    KW_return       reduce using rule 15 (block_stat -> method_declaration .)
    KW_obj          reduce using rule 15 (block_stat -> method_declaration .)
    TOK_identifier  reduce using rule 15 (block_stat -> method_declaration .)
    TOK_rcurly      reduce using rule 15 (block_stat -> method_declaration .)


state 25

    (127) for_statement -> KW_for . TOK_paraleft for_update TOK_pararight statement

    TOK_paraleft    shift and go to state 61


state 26

    (117) normal_statement -> return_statement .

    KW_if           reduce using rule 117 (normal_statement -> return_statement .)
    KW_while        reduce using rule 117 (normal_statement -> return_statement .)
    KW_for          reduce using rule 117 (normal_statement -> return_statement .)
    KW_def          reduce using rule 117 (normal_statement -> return_statement .)
    KW_var          reduce using rule 117 (normal_statement -> return_statement .)
    KW_val          reduce using rule 117 (normal_statement -> return_statement .)
    TOK_lcurly      reduce using rule 117 (normal_statement -> return_statement .)
    TOK_semi        reduce using rule 117 (normal_statement -> return_statement .)
    KW_return       reduce using rule 117 (normal_statement -> return_statement .)
    KW_obj          reduce using rule 117 (normal_statement -> return_statement .)
    TOK_identifier  reduce using rule 117 (normal_statement -> return_statement .)
    TOK_rcurly      reduce using rule 117 (normal_statement -> return_statement .)
    KW_else         reduce using rule 117 (normal_statement -> return_statement .)


state 27

    (112) statement -> while_statement .

    KW_if           reduce using rule 112 (statement -> while_statement .)
    KW_while        reduce using rule 112 (statement -> while_statement .)
    KW_for          reduce using rule 112 (statement -> while_statement .)
    KW_def          reduce using rule 112 (statement -> while_statement .)
    KW_var          reduce using rule 112 (statement -> while_statement .)
    KW_val          reduce using rule 112 (statement -> while_statement .)
    TOK_lcurly      reduce using rule 112 (statement -> while_statement .)
    TOK_semi        reduce using rule 112 (statement -> while_statement .)
    KW_return       reduce using rule 112 (statement -> while_statement .)
    KW_obj          reduce using rule 112 (statement -> while_statement .)
    TOK_identifier  reduce using rule 112 (statement -> while_statement .)
    TOK_rcurly      reduce using rule 112 (statement -> while_statement .)


state 28

    (138) method_header -> KW_def . name TOK_paraleft fun_params_question TOK_pararight type_question TOK_assignment
    (139) method_header -> KW_def . name TOK_paraleft fun_params_question TOK_pararight
    (28) name -> . TOK_identifier

    TOK_identifier  shift and go to state 22

    name                           shift and go to state 62

state 29

    (13) block_stat -> statement .

    KW_if           reduce using rule 13 (block_stat -> statement .)
    KW_while        reduce using rule 13 (block_stat -> statement .)
    KW_for          reduce using rule 13 (block_stat -> statement .)
    KW_def          reduce using rule 13 (block_stat -> statement .)
    KW_var          reduce using rule 13 (block_stat -> statement .)
    KW_val          reduce using rule 13 (block_stat -> statement .)
    TOK_lcurly      reduce using rule 13 (block_stat -> statement .)
    TOK_semi        reduce using rule 13 (block_stat -> statement .)
    KW_return       reduce using rule 13 (block_stat -> statement .)
    KW_obj          reduce using rule 13 (block_stat -> statement .)
    TOK_identifier  reduce using rule 13 (block_stat -> statement .)
    TOK_rcurly      reduce using rule 13 (block_stat -> statement .)


state 30

    (118) expression_statement -> statement_expression . TOK_semi

    TOK_semi        shift and go to state 63


state 31

    (121) if_then_statement -> KW_if . TOK_paraleft expression TOK_pararight statement
    (122) if_then_else_statement -> KW_if . TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement

    TOK_paraleft    shift and go to state 64


state 32

    (9) block_stats_star -> empty .

    TOK_rcurly      reduce using rule 9 (block_stats_star -> empty .)


state 33

    (113) statement -> for_statement .

    KW_if           reduce using rule 113 (statement -> for_statement .)
    KW_while        reduce using rule 113 (statement -> for_statement .)
    KW_for          reduce using rule 113 (statement -> for_statement .)
    KW_def          reduce using rule 113 (statement -> for_statement .)
    KW_var          reduce using rule 113 (statement -> for_statement .)
    KW_val          reduce using rule 113 (statement -> for_statement .)
    TOK_lcurly      reduce using rule 113 (statement -> for_statement .)
    TOK_semi        reduce using rule 113 (statement -> for_statement .)
    KW_return       reduce using rule 113 (statement -> for_statement .)
    KW_obj          reduce using rule 113 (statement -> for_statement .)
    TOK_identifier  reduce using rule 113 (statement -> for_statement .)
    TOK_rcurly      reduce using rule 113 (statement -> for_statement .)


state 34

    (12) block_stat -> local_variable_declaration_statement .

    KW_if           reduce using rule 12 (block_stat -> local_variable_declaration_statement .)
    KW_while        reduce using rule 12 (block_stat -> local_variable_declaration_statement .)
    KW_for          reduce using rule 12 (block_stat -> local_variable_declaration_statement .)
    KW_def          reduce using rule 12 (block_stat -> local_variable_declaration_statement .)
    KW_var          reduce using rule 12 (block_stat -> local_variable_declaration_statement .)
    KW_val          reduce using rule 12 (block_stat -> local_variable_declaration_statement .)
    TOK_lcurly      reduce using rule 12 (block_stat -> local_variable_declaration_statement .)
    TOK_semi        reduce using rule 12 (block_stat -> local_variable_declaration_statement .)
    KW_return       reduce using rule 12 (block_stat -> local_variable_declaration_statement .)
    KW_obj          reduce using rule 12 (block_stat -> local_variable_declaration_statement .)
    TOK_identifier  reduce using rule 12 (block_stat -> local_variable_declaration_statement .)
    TOK_rcurly      reduce using rule 12 (block_stat -> local_variable_declaration_statement .)


state 35

    (119) statement_expression -> assignment .

    TOK_semi        reduce using rule 119 (statement_expression -> assignment .)


state 36

    (120) statement_expression -> method_invocation .

    TOK_semi        reduce using rule 120 (statement_expression -> method_invocation .)


state 37

    (25) id -> name .
    (27) qualified_id -> name . TOK_dot name

    TOK_paraleft    reduce using rule 25 (id -> name .)
    TOK_lsqb        reduce using rule 25 (id -> name .)
    TOK_times       reduce using rule 25 (id -> name .)
    TOK_divide      reduce using rule 25 (id -> name .)
    TOK_modulus     reduce using rule 25 (id -> name .)
    TOK_plus        reduce using rule 25 (id -> name .)
    TOK_minus       reduce using rule 25 (id -> name .)
    TOK_lshift      reduce using rule 25 (id -> name .)
    TOK_rshift      reduce using rule 25 (id -> name .)
    TOK_greater     reduce using rule 25 (id -> name .)
    TOK_lesser      reduce using rule 25 (id -> name .)
    TOK_geq         reduce using rule 25 (id -> name .)
    TOK_leq         reduce using rule 25 (id -> name .)
    TOK_equal       reduce using rule 25 (id -> name .)
    TOK_nequal      reduce using rule 25 (id -> name .)
    TOK_and_bitwise reduce using rule 25 (id -> name .)
    TOK_xor         reduce using rule 25 (id -> name .)
    TOK_or_bitwise  reduce using rule 25 (id -> name .)
    TOK_and         reduce using rule 25 (id -> name .)
    TOK_or          reduce using rule 25 (id -> name .)
    TOK_semi        reduce using rule 25 (id -> name .)
    TOK_comma       reduce using rule 25 (id -> name .)
    TOK_pararight   reduce using rule 25 (id -> name .)
    TOK_rsqb        reduce using rule 25 (id -> name .)
    KW_until        reduce using rule 25 (id -> name .)
    KW_to           reduce using rule 25 (id -> name .)
    KW_by           reduce using rule 25 (id -> name .)
    TOK_assignment  reduce using rule 25 (id -> name .)
    TOK_mulassign   reduce using rule 25 (id -> name .)
    TOK_divassign   reduce using rule 25 (id -> name .)
    TOK_modassign   reduce using rule 25 (id -> name .)
    TOK_addassign   reduce using rule 25 (id -> name .)
    TOK_subassign   reduce using rule 25 (id -> name .)
    TOK_dot         shift and go to state 65


state 38

    (26) id -> qualified_id .

    TOK_paraleft    reduce using rule 26 (id -> qualified_id .)
    TOK_lsqb        reduce using rule 26 (id -> qualified_id .)
    TOK_times       reduce using rule 26 (id -> qualified_id .)
    TOK_divide      reduce using rule 26 (id -> qualified_id .)
    TOK_modulus     reduce using rule 26 (id -> qualified_id .)
    TOK_plus        reduce using rule 26 (id -> qualified_id .)
    TOK_minus       reduce using rule 26 (id -> qualified_id .)
    TOK_lshift      reduce using rule 26 (id -> qualified_id .)
    TOK_rshift      reduce using rule 26 (id -> qualified_id .)
    TOK_greater     reduce using rule 26 (id -> qualified_id .)
    TOK_lesser      reduce using rule 26 (id -> qualified_id .)
    TOK_geq         reduce using rule 26 (id -> qualified_id .)
    TOK_leq         reduce using rule 26 (id -> qualified_id .)
    TOK_equal       reduce using rule 26 (id -> qualified_id .)
    TOK_nequal      reduce using rule 26 (id -> qualified_id .)
    TOK_and_bitwise reduce using rule 26 (id -> qualified_id .)
    TOK_xor         reduce using rule 26 (id -> qualified_id .)
    TOK_or_bitwise  reduce using rule 26 (id -> qualified_id .)
    TOK_and         reduce using rule 26 (id -> qualified_id .)
    TOK_or          reduce using rule 26 (id -> qualified_id .)
    TOK_semi        reduce using rule 26 (id -> qualified_id .)
    TOK_comma       reduce using rule 26 (id -> qualified_id .)
    TOK_pararight   reduce using rule 26 (id -> qualified_id .)
    TOK_rsqb        reduce using rule 26 (id -> qualified_id .)
    KW_until        reduce using rule 26 (id -> qualified_id .)
    KW_to           reduce using rule 26 (id -> qualified_id .)
    KW_by           reduce using rule 26 (id -> qualified_id .)
    TOK_assignment  reduce using rule 26 (id -> qualified_id .)
    TOK_mulassign   reduce using rule 26 (id -> qualified_id .)
    TOK_divassign   reduce using rule 26 (id -> qualified_id .)
    TOK_modassign   reduce using rule 26 (id -> qualified_id .)
    TOK_addassign   reduce using rule 26 (id -> qualified_id .)
    TOK_subassign   reduce using rule 26 (id -> qualified_id .)


state 39

    (137) method_declaration -> method_header . method_body
    (145) method_body -> . block
    (7) block -> . TOK_lcurly block_stats_star TOK_rcurly

    TOK_lcurly      shift and go to state 9

    method_body                    shift and go to state 66
    block                          shift and go to state 67

state 40

    (116) normal_statement -> empty_statement .

    KW_if           reduce using rule 116 (normal_statement -> empty_statement .)
    KW_while        reduce using rule 116 (normal_statement -> empty_statement .)
    KW_for          reduce using rule 116 (normal_statement -> empty_statement .)
    KW_def          reduce using rule 116 (normal_statement -> empty_statement .)
    KW_var          reduce using rule 116 (normal_statement -> empty_statement .)
    KW_val          reduce using rule 116 (normal_statement -> empty_statement .)
    TOK_lcurly      reduce using rule 116 (normal_statement -> empty_statement .)
    TOK_semi        reduce using rule 116 (normal_statement -> empty_statement .)
    KW_return       reduce using rule 116 (normal_statement -> empty_statement .)
    KW_obj          reduce using rule 116 (normal_statement -> empty_statement .)
    TOK_identifier  reduce using rule 116 (normal_statement -> empty_statement .)
    TOK_rcurly      reduce using rule 116 (normal_statement -> empty_statement .)
    KW_else         reduce using rule 116 (normal_statement -> empty_statement .)


state 41

    (134) empty_statement -> TOK_semi .

    KW_if           reduce using rule 134 (empty_statement -> TOK_semi .)
    KW_while        reduce using rule 134 (empty_statement -> TOK_semi .)
    KW_for          reduce using rule 134 (empty_statement -> TOK_semi .)
    KW_def          reduce using rule 134 (empty_statement -> TOK_semi .)
    KW_var          reduce using rule 134 (empty_statement -> TOK_semi .)
    KW_val          reduce using rule 134 (empty_statement -> TOK_semi .)
    TOK_lcurly      reduce using rule 134 (empty_statement -> TOK_semi .)
    TOK_semi        reduce using rule 134 (empty_statement -> TOK_semi .)
    KW_return       reduce using rule 134 (empty_statement -> TOK_semi .)
    KW_obj          reduce using rule 134 (empty_statement -> TOK_semi .)
    TOK_identifier  reduce using rule 134 (empty_statement -> TOK_semi .)
    TOK_rcurly      reduce using rule 134 (empty_statement -> TOK_semi .)
    KW_else         reduce using rule 134 (empty_statement -> TOK_semi .)


state 42

    (135) return_statement -> KW_return . expression_question TOK_semi
    (16) expression_question -> . expression
    (17) expression_question -> . empty
    (18) expression -> . assignment_expression
    (146) empty -> .
    (19) assignment_expression -> . assignment
    (20) assignment_expression -> . conditional_or_expression
    (21) assignment_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (37) conditional_or_expression -> . conditional_and_expression
    (38) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (39) conditional_and_expression -> . inclusive_or_expression
    (40) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (41) inclusive_or_expression -> . exclusive_or_expression
    (42) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (43) exclusive_or_expression -> . and_expression
    (44) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_semi        reduce using rule 146 (empty -> .)
    TOK_identifier  shift and go to state 22
    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    unary_expression               shift and go to state 68
    exclusive_or_expression        shift and go to state 69
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 72
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    and_expression                 shift and go to state 79
    c_literal                      shift and go to state 73
    base_variable_set              shift and go to state 74
    inclusive_or_expression        shift and go to state 75
    literal                        shift and go to state 78
    relational_expression          shift and go to state 83
    method_invocation              shift and go to state 80
    conditional_or_expression      shift and go to state 81
    empty                          shift and go to state 82
    assignment_expression          shift and go to state 86
    assignment                     shift and go to state 87
    multiplicative_expression      shift and go to state 88
    additive_expression            shift and go to state 77
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 94
    int_float                      shift and go to state 95
    expression_question            shift and go to state 96
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    conditional_and_expression     shift and go to state 103
    expression                     shift and go to state 102

state 43

    (92) local_variable_declaration_statement -> local_variable_declaration . TOK_semi

    TOK_semi        shift and go to state 104


state 44

    (8) block_stats_star -> block_stats .
    (11) block_stats -> block_stats . block_stat
    (12) block_stat -> . local_variable_declaration_statement
    (13) block_stat -> . statement
    (14) block_stat -> . class_and_obj_declaration
    (15) block_stat -> . method_declaration
    (92) local_variable_declaration_statement -> . local_variable_declaration TOK_semi
    (109) statement -> . normal_statement
    (110) statement -> . if_then_statement
    (111) statement -> . if_then_else_statement
    (112) statement -> . while_statement
    (113) statement -> . for_statement
    (4) class_and_obj_declaration -> . singleton_object
    (137) method_declaration -> . method_header method_body
    (93) local_variable_declaration -> . declaration_keyword variable_declaration_body
    (114) normal_statement -> . block
    (115) normal_statement -> . expression_statement
    (116) normal_statement -> . empty_statement
    (117) normal_statement -> . return_statement
    (121) if_then_statement -> . KW_if TOK_paraleft expression TOK_pararight statement
    (122) if_then_else_statement -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (126) while_statement -> . KW_while TOK_paraleft expression TOK_pararight statement
    (127) for_statement -> . KW_for TOK_paraleft for_update TOK_pararight statement
    (5) singleton_object -> . object_declaration block
    (138) method_header -> . KW_def name TOK_paraleft fun_params_question TOK_pararight type_question TOK_assignment
    (139) method_header -> . KW_def name TOK_paraleft fun_params_question TOK_pararight
    (90) declaration_keyword -> . KW_var
    (91) declaration_keyword -> . KW_val
    (7) block -> . TOK_lcurly block_stats_star TOK_rcurly
    (118) expression_statement -> . statement_expression TOK_semi
    (134) empty_statement -> . TOK_semi
    (135) return_statement -> . KW_return expression_question TOK_semi
    (6) object_declaration -> . KW_obj TOK_identifier
    (119) statement_expression -> . assignment
    (120) statement_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name

    TOK_rcurly      reduce using rule 8 (block_stats_star -> block_stats .)
    KW_if           shift and go to state 31
    KW_while        shift and go to state 45
    KW_for          shift and go to state 25
    KW_def          shift and go to state 28
    KW_var          shift and go to state 17
    KW_val          shift and go to state 14
    TOK_lcurly      shift and go to state 9
    TOK_semi        shift and go to state 41
    KW_return       shift and go to state 42
    KW_obj          shift and go to state 4
    TOK_identifier  shift and go to state 22

    expression_statement           shift and go to state 11
    object_declaration             shift and go to state 5
    block_stat                     shift and go to state 105
    normal_statement               shift and go to state 13
    declaration_keyword            shift and go to state 16
    if_then_statement              shift and go to state 18
    left_hand_side                 shift and go to state 19
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    class_and_obj_declaration      shift and go to state 23
    method_declaration             shift and go to state 24
    return_statement               shift and go to state 26
    while_statement                shift and go to state 27
    statement                      shift and go to state 29
    statement_expression           shift and go to state 30
    method_invocation              shift and go to state 36
    for_statement                  shift and go to state 33
    local_variable_declaration_statement shift and go to state 34
    assignment                     shift and go to state 35
    singleton_object               shift and go to state 6
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    method_header                  shift and go to state 39
    empty_statement                shift and go to state 40
    local_variable_declaration     shift and go to state 43
    block                          shift and go to state 46
    if_then_else_statement         shift and go to state 47

state 45

    (126) while_statement -> KW_while . TOK_paraleft expression TOK_pararight statement

    TOK_paraleft    shift and go to state 106


state 46

    (114) normal_statement -> block .

    KW_if           reduce using rule 114 (normal_statement -> block .)
    KW_while        reduce using rule 114 (normal_statement -> block .)
    KW_for          reduce using rule 114 (normal_statement -> block .)
    KW_def          reduce using rule 114 (normal_statement -> block .)
    KW_var          reduce using rule 114 (normal_statement -> block .)
    KW_val          reduce using rule 114 (normal_statement -> block .)
    TOK_lcurly      reduce using rule 114 (normal_statement -> block .)
    TOK_semi        reduce using rule 114 (normal_statement -> block .)
    KW_return       reduce using rule 114 (normal_statement -> block .)
    KW_obj          reduce using rule 114 (normal_statement -> block .)
    TOK_identifier  reduce using rule 114 (normal_statement -> block .)
    TOK_rcurly      reduce using rule 114 (normal_statement -> block .)
    KW_else         reduce using rule 114 (normal_statement -> block .)


state 47

    (111) statement -> if_then_else_statement .

    KW_if           reduce using rule 111 (statement -> if_then_else_statement .)
    KW_while        reduce using rule 111 (statement -> if_then_else_statement .)
    KW_for          reduce using rule 111 (statement -> if_then_else_statement .)
    KW_def          reduce using rule 111 (statement -> if_then_else_statement .)
    KW_var          reduce using rule 111 (statement -> if_then_else_statement .)
    KW_val          reduce using rule 111 (statement -> if_then_else_statement .)
    TOK_lcurly      reduce using rule 111 (statement -> if_then_else_statement .)
    TOK_semi        reduce using rule 111 (statement -> if_then_else_statement .)
    KW_return       reduce using rule 111 (statement -> if_then_else_statement .)
    KW_obj          reduce using rule 111 (statement -> if_then_else_statement .)
    TOK_identifier  reduce using rule 111 (statement -> if_then_else_statement .)
    TOK_rcurly      reduce using rule 111 (statement -> if_then_else_statement .)


state 48

    (7) block -> TOK_lcurly block_stats_star TOK_rcurly .

    KW_if           reduce using rule 7 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_while        reduce using rule 7 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_for          reduce using rule 7 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_def          reduce using rule 7 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_var          reduce using rule 7 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_val          reduce using rule 7 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    TOK_lcurly      reduce using rule 7 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    TOK_semi        reduce using rule 7 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_return       reduce using rule 7 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_obj          reduce using rule 7 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    TOK_identifier  reduce using rule 7 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    TOK_rcurly      reduce using rule 7 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_else         reduce using rule 7 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    $end            reduce using rule 7 (block -> TOK_lcurly block_stats_star TOK_rcurly .)


state 49

    (93) local_variable_declaration -> declaration_keyword variable_declaration_body .

    TOK_semi        reduce using rule 93 (local_variable_declaration -> declaration_keyword variable_declaration_body .)


state 50

    (96) variable_declaration_body -> TOK_identifier . type_question TOK_assignment variable_declaration_initializer
    (136) type_question -> . TOK_colon type

    TOK_colon       shift and go to state 108

    type_question                  shift and go to state 107

state 51

    (33) assignment_operator -> TOK_divassign .

    TOK_identifier  reduce using rule 33 (assignment_operator -> TOK_divassign .)
    TOK_plus        reduce using rule 33 (assignment_operator -> TOK_divassign .)
    TOK_minus       reduce using rule 33 (assignment_operator -> TOK_divassign .)
    TOK_not         reduce using rule 33 (assignment_operator -> TOK_divassign .)
    TOK_paraleft    reduce using rule 33 (assignment_operator -> TOK_divassign .)
    TOK_float       reduce using rule 33 (assignment_operator -> TOK_divassign .)
    TOK_int         reduce using rule 33 (assignment_operator -> TOK_divassign .)
    TOK_string      reduce using rule 33 (assignment_operator -> TOK_divassign .)
    KW_true         reduce using rule 33 (assignment_operator -> TOK_divassign .)
    KW_false        reduce using rule 33 (assignment_operator -> TOK_divassign .)
    KW_null         reduce using rule 33 (assignment_operator -> TOK_divassign .)
    TOK_char        reduce using rule 33 (assignment_operator -> TOK_divassign .)


state 52

    (34) assignment_operator -> TOK_modassign .

    TOK_identifier  reduce using rule 34 (assignment_operator -> TOK_modassign .)
    TOK_plus        reduce using rule 34 (assignment_operator -> TOK_modassign .)
    TOK_minus       reduce using rule 34 (assignment_operator -> TOK_modassign .)
    TOK_not         reduce using rule 34 (assignment_operator -> TOK_modassign .)
    TOK_paraleft    reduce using rule 34 (assignment_operator -> TOK_modassign .)
    TOK_float       reduce using rule 34 (assignment_operator -> TOK_modassign .)
    TOK_int         reduce using rule 34 (assignment_operator -> TOK_modassign .)
    TOK_string      reduce using rule 34 (assignment_operator -> TOK_modassign .)
    KW_true         reduce using rule 34 (assignment_operator -> TOK_modassign .)
    KW_false        reduce using rule 34 (assignment_operator -> TOK_modassign .)
    KW_null         reduce using rule 34 (assignment_operator -> TOK_modassign .)
    TOK_char        reduce using rule 34 (assignment_operator -> TOK_modassign .)


state 53

    (36) assignment_operator -> TOK_subassign .

    TOK_identifier  reduce using rule 36 (assignment_operator -> TOK_subassign .)
    TOK_plus        reduce using rule 36 (assignment_operator -> TOK_subassign .)
    TOK_minus       reduce using rule 36 (assignment_operator -> TOK_subassign .)
    TOK_not         reduce using rule 36 (assignment_operator -> TOK_subassign .)
    TOK_paraleft    reduce using rule 36 (assignment_operator -> TOK_subassign .)
    TOK_float       reduce using rule 36 (assignment_operator -> TOK_subassign .)
    TOK_int         reduce using rule 36 (assignment_operator -> TOK_subassign .)
    TOK_string      reduce using rule 36 (assignment_operator -> TOK_subassign .)
    KW_true         reduce using rule 36 (assignment_operator -> TOK_subassign .)
    KW_false        reduce using rule 36 (assignment_operator -> TOK_subassign .)
    KW_null         reduce using rule 36 (assignment_operator -> TOK_subassign .)
    TOK_char        reduce using rule 36 (assignment_operator -> TOK_subassign .)


state 54

    (35) assignment_operator -> TOK_addassign .

    TOK_identifier  reduce using rule 35 (assignment_operator -> TOK_addassign .)
    TOK_plus        reduce using rule 35 (assignment_operator -> TOK_addassign .)
    TOK_minus       reduce using rule 35 (assignment_operator -> TOK_addassign .)
    TOK_not         reduce using rule 35 (assignment_operator -> TOK_addassign .)
    TOK_paraleft    reduce using rule 35 (assignment_operator -> TOK_addassign .)
    TOK_float       reduce using rule 35 (assignment_operator -> TOK_addassign .)
    TOK_int         reduce using rule 35 (assignment_operator -> TOK_addassign .)
    TOK_string      reduce using rule 35 (assignment_operator -> TOK_addassign .)
    KW_true         reduce using rule 35 (assignment_operator -> TOK_addassign .)
    KW_false        reduce using rule 35 (assignment_operator -> TOK_addassign .)
    KW_null         reduce using rule 35 (assignment_operator -> TOK_addassign .)
    TOK_char        reduce using rule 35 (assignment_operator -> TOK_addassign .)


state 55

    (22) assignment -> left_hand_side assignment_operator . assignment_expression
    (19) assignment_expression -> . assignment
    (20) assignment_expression -> . conditional_or_expression
    (21) assignment_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (37) conditional_or_expression -> . conditional_and_expression
    (38) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (39) conditional_and_expression -> . inclusive_or_expression
    (40) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (41) inclusive_or_expression -> . exclusive_or_expression
    (42) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (43) exclusive_or_expression -> . and_expression
    (44) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_identifier  shift and go to state 22
    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    unary_expression               shift and go to state 68
    exclusive_or_expression        shift and go to state 69
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 72
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    additive_expression            shift and go to state 77
    c_literal                      shift and go to state 73
    base_variable_set              shift and go to state 74
    inclusive_or_expression        shift and go to state 75
    literal                        shift and go to state 78
    and_expression                 shift and go to state 79
    relational_expression          shift and go to state 83
    method_invocation              shift and go to state 80
    conditional_or_expression      shift and go to state 81
    assignment_expression          shift and go to state 109
    assignment                     shift and go to state 87
    multiplicative_expression      shift and go to state 88
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 94
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    conditional_and_expression     shift and go to state 103

state 56

    (31) assignment_operator -> TOK_assignment .

    TOK_identifier  reduce using rule 31 (assignment_operator -> TOK_assignment .)
    TOK_plus        reduce using rule 31 (assignment_operator -> TOK_assignment .)
    TOK_minus       reduce using rule 31 (assignment_operator -> TOK_assignment .)
    TOK_not         reduce using rule 31 (assignment_operator -> TOK_assignment .)
    TOK_paraleft    reduce using rule 31 (assignment_operator -> TOK_assignment .)
    TOK_float       reduce using rule 31 (assignment_operator -> TOK_assignment .)
    TOK_int         reduce using rule 31 (assignment_operator -> TOK_assignment .)
    TOK_string      reduce using rule 31 (assignment_operator -> TOK_assignment .)
    KW_true         reduce using rule 31 (assignment_operator -> TOK_assignment .)
    KW_false        reduce using rule 31 (assignment_operator -> TOK_assignment .)
    KW_null         reduce using rule 31 (assignment_operator -> TOK_assignment .)
    TOK_char        reduce using rule 31 (assignment_operator -> TOK_assignment .)


state 57

    (32) assignment_operator -> TOK_mulassign .

    TOK_identifier  reduce using rule 32 (assignment_operator -> TOK_mulassign .)
    TOK_plus        reduce using rule 32 (assignment_operator -> TOK_mulassign .)
    TOK_minus       reduce using rule 32 (assignment_operator -> TOK_mulassign .)
    TOK_not         reduce using rule 32 (assignment_operator -> TOK_mulassign .)
    TOK_paraleft    reduce using rule 32 (assignment_operator -> TOK_mulassign .)
    TOK_float       reduce using rule 32 (assignment_operator -> TOK_mulassign .)
    TOK_int         reduce using rule 32 (assignment_operator -> TOK_mulassign .)
    TOK_string      reduce using rule 32 (assignment_operator -> TOK_mulassign .)
    KW_true         reduce using rule 32 (assignment_operator -> TOK_mulassign .)
    KW_false        reduce using rule 32 (assignment_operator -> TOK_mulassign .)
    KW_null         reduce using rule 32 (assignment_operator -> TOK_mulassign .)
    TOK_char        reduce using rule 32 (assignment_operator -> TOK_mulassign .)


state 58

    (85) method_invocation -> id TOK_paraleft . argument_list_question TOK_pararight
    (86) argument_list_question -> . argument_list
    (87) argument_list_question -> . empty
    (88) argument_list -> . expression
    (89) argument_list -> . argument_list TOK_comma expression
    (146) empty -> .
    (18) expression -> . assignment_expression
    (19) assignment_expression -> . assignment
    (20) assignment_expression -> . conditional_or_expression
    (21) assignment_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (37) conditional_or_expression -> . conditional_and_expression
    (38) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (39) conditional_and_expression -> . inclusive_or_expression
    (40) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (41) inclusive_or_expression -> . exclusive_or_expression
    (42) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (43) exclusive_or_expression -> . and_expression
    (44) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_pararight   reduce using rule 146 (empty -> .)
    TOK_identifier  shift and go to state 22
    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    unary_expression               shift and go to state 68
    exclusive_or_expression        shift and go to state 69
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 72
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    and_expression                 shift and go to state 79
    c_literal                      shift and go to state 73
    base_variable_set              shift and go to state 74
    inclusive_or_expression        shift and go to state 75
    literal                        shift and go to state 78
    relational_expression          shift and go to state 83
    method_invocation              shift and go to state 80
    conditional_or_expression      shift and go to state 81
    empty                          shift and go to state 111
    argument_list                  shift and go to state 110
    assignment_expression          shift and go to state 86
    assignment                     shift and go to state 87
    multiplicative_expression      shift and go to state 88
    additive_expression            shift and go to state 77
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 94
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    argument_list_question         shift and go to state 112
    expression                     shift and go to state 113
    conditional_and_expression     shift and go to state 103

state 59

    (29) array_access -> id dimension .

    TOK_assignment  reduce using rule 29 (array_access -> id dimension .)
    TOK_mulassign   reduce using rule 29 (array_access -> id dimension .)
    TOK_divassign   reduce using rule 29 (array_access -> id dimension .)
    TOK_modassign   reduce using rule 29 (array_access -> id dimension .)
    TOK_addassign   reduce using rule 29 (array_access -> id dimension .)
    TOK_subassign   reduce using rule 29 (array_access -> id dimension .)
    TOK_times       reduce using rule 29 (array_access -> id dimension .)
    TOK_divide      reduce using rule 29 (array_access -> id dimension .)
    TOK_modulus     reduce using rule 29 (array_access -> id dimension .)
    TOK_plus        reduce using rule 29 (array_access -> id dimension .)
    TOK_minus       reduce using rule 29 (array_access -> id dimension .)
    TOK_lshift      reduce using rule 29 (array_access -> id dimension .)
    TOK_rshift      reduce using rule 29 (array_access -> id dimension .)
    TOK_greater     reduce using rule 29 (array_access -> id dimension .)
    TOK_lesser      reduce using rule 29 (array_access -> id dimension .)
    TOK_geq         reduce using rule 29 (array_access -> id dimension .)
    TOK_leq         reduce using rule 29 (array_access -> id dimension .)
    TOK_equal       reduce using rule 29 (array_access -> id dimension .)
    TOK_nequal      reduce using rule 29 (array_access -> id dimension .)
    TOK_and_bitwise reduce using rule 29 (array_access -> id dimension .)
    TOK_xor         reduce using rule 29 (array_access -> id dimension .)
    TOK_or_bitwise  reduce using rule 29 (array_access -> id dimension .)
    TOK_and         reduce using rule 29 (array_access -> id dimension .)
    TOK_or          reduce using rule 29 (array_access -> id dimension .)
    TOK_semi        reduce using rule 29 (array_access -> id dimension .)
    TOK_comma       reduce using rule 29 (array_access -> id dimension .)
    TOK_pararight   reduce using rule 29 (array_access -> id dimension .)
    TOK_rsqb        reduce using rule 29 (array_access -> id dimension .)
    KW_until        reduce using rule 29 (array_access -> id dimension .)
    KW_to           reduce using rule 29 (array_access -> id dimension .)
    KW_by           reduce using rule 29 (array_access -> id dimension .)


state 60

    (30) dimension -> TOK_lsqb . expression TOK_rsqb
    (18) expression -> . assignment_expression
    (19) assignment_expression -> . assignment
    (20) assignment_expression -> . conditional_or_expression
    (21) assignment_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (37) conditional_or_expression -> . conditional_and_expression
    (38) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (39) conditional_and_expression -> . inclusive_or_expression
    (40) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (41) inclusive_or_expression -> . exclusive_or_expression
    (42) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (43) exclusive_or_expression -> . and_expression
    (44) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_identifier  shift and go to state 22
    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    and_expression                 shift and go to state 79
    exclusive_or_expression        shift and go to state 69
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 72
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    additive_expression            shift and go to state 77
    c_literal                      shift and go to state 73
    unary_expression               shift and go to state 68
    base_variable_set              shift and go to state 74
    inclusive_or_expression        shift and go to state 75
    literal                        shift and go to state 78
    relational_expression          shift and go to state 83
    method_invocation              shift and go to state 80
    conditional_or_expression      shift and go to state 81
    assignment_expression          shift and go to state 86
    assignment                     shift and go to state 87
    multiplicative_expression      shift and go to state 88
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 94
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    conditional_and_expression     shift and go to state 103
    expression                     shift and go to state 114

state 61

    (127) for_statement -> KW_for TOK_paraleft . for_update TOK_pararight statement
    (128) for_update -> . for_loop for_step_opts
    (129) for_loop -> . TOK_identifier TOK_choose expression for_untilTo expression

    TOK_identifier  shift and go to state 117

    for_loop                       shift and go to state 115
    for_update                     shift and go to state 116

state 62

    (138) method_header -> KW_def name . TOK_paraleft fun_params_question TOK_pararight type_question TOK_assignment
    (139) method_header -> KW_def name . TOK_paraleft fun_params_question TOK_pararight

    TOK_paraleft    shift and go to state 118


state 63

    (118) expression_statement -> statement_expression TOK_semi .

    KW_if           reduce using rule 118 (expression_statement -> statement_expression TOK_semi .)
    KW_while        reduce using rule 118 (expression_statement -> statement_expression TOK_semi .)
    KW_for          reduce using rule 118 (expression_statement -> statement_expression TOK_semi .)
    KW_def          reduce using rule 118 (expression_statement -> statement_expression TOK_semi .)
    KW_var          reduce using rule 118 (expression_statement -> statement_expression TOK_semi .)
    KW_val          reduce using rule 118 (expression_statement -> statement_expression TOK_semi .)
    TOK_lcurly      reduce using rule 118 (expression_statement -> statement_expression TOK_semi .)
    TOK_semi        reduce using rule 118 (expression_statement -> statement_expression TOK_semi .)
    KW_return       reduce using rule 118 (expression_statement -> statement_expression TOK_semi .)
    KW_obj          reduce using rule 118 (expression_statement -> statement_expression TOK_semi .)
    TOK_identifier  reduce using rule 118 (expression_statement -> statement_expression TOK_semi .)
    TOK_rcurly      reduce using rule 118 (expression_statement -> statement_expression TOK_semi .)
    KW_else         reduce using rule 118 (expression_statement -> statement_expression TOK_semi .)


state 64

    (121) if_then_statement -> KW_if TOK_paraleft . expression TOK_pararight statement
    (122) if_then_else_statement -> KW_if TOK_paraleft . expression TOK_pararight if_then_else_intermediate KW_else statement
    (18) expression -> . assignment_expression
    (19) assignment_expression -> . assignment
    (20) assignment_expression -> . conditional_or_expression
    (21) assignment_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (37) conditional_or_expression -> . conditional_and_expression
    (38) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (39) conditional_and_expression -> . inclusive_or_expression
    (40) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (41) inclusive_or_expression -> . exclusive_or_expression
    (42) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (43) exclusive_or_expression -> . and_expression
    (44) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_identifier  shift and go to state 22
    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    unary_expression               shift and go to state 68
    exclusive_or_expression        shift and go to state 69
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 72
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    and_expression                 shift and go to state 79
    c_literal                      shift and go to state 73
    base_variable_set              shift and go to state 74
    inclusive_or_expression        shift and go to state 75
    literal                        shift and go to state 78
    relational_expression          shift and go to state 83
    method_invocation              shift and go to state 80
    conditional_or_expression      shift and go to state 81
    assignment_expression          shift and go to state 86
    assignment                     shift and go to state 87
    multiplicative_expression      shift and go to state 88
    additive_expression            shift and go to state 77
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 94
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    conditional_and_expression     shift and go to state 103
    expression                     shift and go to state 119

state 65

    (27) qualified_id -> name TOK_dot . name
    (28) name -> . TOK_identifier

    TOK_identifier  shift and go to state 22

    name                           shift and go to state 120

state 66

    (137) method_declaration -> method_header method_body .

    KW_if           reduce using rule 137 (method_declaration -> method_header method_body .)
    KW_while        reduce using rule 137 (method_declaration -> method_header method_body .)
    KW_for          reduce using rule 137 (method_declaration -> method_header method_body .)
    KW_def          reduce using rule 137 (method_declaration -> method_header method_body .)
    KW_var          reduce using rule 137 (method_declaration -> method_header method_body .)
    KW_val          reduce using rule 137 (method_declaration -> method_header method_body .)
    TOK_lcurly      reduce using rule 137 (method_declaration -> method_header method_body .)
    TOK_semi        reduce using rule 137 (method_declaration -> method_header method_body .)
    KW_return       reduce using rule 137 (method_declaration -> method_header method_body .)
    KW_obj          reduce using rule 137 (method_declaration -> method_header method_body .)
    TOK_identifier  reduce using rule 137 (method_declaration -> method_header method_body .)
    TOK_rcurly      reduce using rule 137 (method_declaration -> method_header method_body .)


state 67

    (145) method_body -> block .

    KW_if           reduce using rule 145 (method_body -> block .)
    KW_while        reduce using rule 145 (method_body -> block .)
    KW_for          reduce using rule 145 (method_body -> block .)
    KW_def          reduce using rule 145 (method_body -> block .)
    KW_var          reduce using rule 145 (method_body -> block .)
    KW_val          reduce using rule 145 (method_body -> block .)
    TOK_lcurly      reduce using rule 145 (method_body -> block .)
    TOK_semi        reduce using rule 145 (method_body -> block .)
    KW_return       reduce using rule 145 (method_body -> block .)
    KW_obj          reduce using rule 145 (method_body -> block .)
    TOK_identifier  reduce using rule 145 (method_body -> block .)
    TOK_rcurly      reduce using rule 145 (method_body -> block .)


state 68

    (61) multiplicative_expression -> unary_expression .

    TOK_times       reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_divide      reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_modulus     reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_plus        reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_minus       reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_lshift      reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_rshift      reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_greater     reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_lesser      reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_geq         reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_leq         reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_equal       reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_nequal      reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_and_bitwise reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_xor         reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_or_bitwise  reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_and         reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_or          reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_semi        reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_comma       reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_pararight   reduce using rule 61 (multiplicative_expression -> unary_expression .)
    TOK_rsqb        reduce using rule 61 (multiplicative_expression -> unary_expression .)
    KW_until        reduce using rule 61 (multiplicative_expression -> unary_expression .)
    KW_to           reduce using rule 61 (multiplicative_expression -> unary_expression .)
    KW_by           reduce using rule 61 (multiplicative_expression -> unary_expression .)


state 69

    (41) inclusive_or_expression -> exclusive_or_expression .
    (44) exclusive_or_expression -> exclusive_or_expression . TOK_xor and_expression

    TOK_or_bitwise  reduce using rule 41 (inclusive_or_expression -> exclusive_or_expression .)
    TOK_and         reduce using rule 41 (inclusive_or_expression -> exclusive_or_expression .)
    TOK_or          reduce using rule 41 (inclusive_or_expression -> exclusive_or_expression .)
    TOK_pararight   reduce using rule 41 (inclusive_or_expression -> exclusive_or_expression .)
    TOK_rsqb        reduce using rule 41 (inclusive_or_expression -> exclusive_or_expression .)
    TOK_comma       reduce using rule 41 (inclusive_or_expression -> exclusive_or_expression .)
    TOK_semi        reduce using rule 41 (inclusive_or_expression -> exclusive_or_expression .)
    KW_until        reduce using rule 41 (inclusive_or_expression -> exclusive_or_expression .)
    KW_to           reduce using rule 41 (inclusive_or_expression -> exclusive_or_expression .)
    KW_by           reduce using rule 41 (inclusive_or_expression -> exclusive_or_expression .)
    TOK_xor         shift and go to state 121


state 70

    (73) variable_literal -> primary .

    TOK_times       reduce using rule 73 (variable_literal -> primary .)
    TOK_divide      reduce using rule 73 (variable_literal -> primary .)
    TOK_modulus     reduce using rule 73 (variable_literal -> primary .)
    TOK_plus        reduce using rule 73 (variable_literal -> primary .)
    TOK_minus       reduce using rule 73 (variable_literal -> primary .)
    TOK_lshift      reduce using rule 73 (variable_literal -> primary .)
    TOK_rshift      reduce using rule 73 (variable_literal -> primary .)
    TOK_greater     reduce using rule 73 (variable_literal -> primary .)
    TOK_lesser      reduce using rule 73 (variable_literal -> primary .)
    TOK_geq         reduce using rule 73 (variable_literal -> primary .)
    TOK_leq         reduce using rule 73 (variable_literal -> primary .)
    TOK_equal       reduce using rule 73 (variable_literal -> primary .)
    TOK_nequal      reduce using rule 73 (variable_literal -> primary .)
    TOK_and_bitwise reduce using rule 73 (variable_literal -> primary .)
    TOK_xor         reduce using rule 73 (variable_literal -> primary .)
    TOK_or_bitwise  reduce using rule 73 (variable_literal -> primary .)
    TOK_and         reduce using rule 73 (variable_literal -> primary .)
    TOK_or          reduce using rule 73 (variable_literal -> primary .)
    TOK_semi        reduce using rule 73 (variable_literal -> primary .)
    TOK_comma       reduce using rule 73 (variable_literal -> primary .)
    TOK_pararight   reduce using rule 73 (variable_literal -> primary .)
    TOK_rsqb        reduce using rule 73 (variable_literal -> primary .)
    KW_until        reduce using rule 73 (variable_literal -> primary .)
    KW_to           reduce using rule 73 (variable_literal -> primary .)
    KW_by           reduce using rule 73 (variable_literal -> primary .)


state 71

    (67) unary_expression -> unary_expression_not_plus_minus .

    TOK_times       reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_divide      reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_modulus     reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_plus        reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_minus       reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_lshift      reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_rshift      reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_greater     reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_lesser      reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_geq         reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_leq         reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_equal       reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_nequal      reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_and_bitwise reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_xor         reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_or_bitwise  reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_and         reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_or          reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    KW_until        reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    KW_to           reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_semi        reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_comma       reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_pararight   reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_rsqb        reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)
    KW_by           reduce using rule 67 (unary_expression -> unary_expression_not_plus_minus .)


state 72

    (22) assignment -> left_hand_side . assignment_operator assignment_expression
    (72) variable_literal -> left_hand_side .
    (31) assignment_operator -> . TOK_assignment
    (32) assignment_operator -> . TOK_mulassign
    (33) assignment_operator -> . TOK_divassign
    (34) assignment_operator -> . TOK_modassign
    (35) assignment_operator -> . TOK_addassign
    (36) assignment_operator -> . TOK_subassign

    TOK_times       reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_divide      reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_modulus     reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_plus        reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_minus       reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_lshift      reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_rshift      reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_greater     reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_lesser      reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_geq         reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_leq         reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_equal       reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_nequal      reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_and_bitwise reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_xor         reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_or_bitwise  reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_and         reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_or          reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_pararight   reduce using rule 72 (variable_literal -> left_hand_side .)
    KW_by           reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_semi        reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_comma       reduce using rule 72 (variable_literal -> left_hand_side .)
    KW_until        reduce using rule 72 (variable_literal -> left_hand_side .)
    KW_to           reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_rsqb        reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_assignment  shift and go to state 56
    TOK_mulassign   shift and go to state 57
    TOK_divassign   shift and go to state 51
    TOK_modassign   shift and go to state 52
    TOK_addassign   shift and go to state 54
    TOK_subassign   shift and go to state 53

    assignment_operator            shift and go to state 55

state 73

    (77) literal -> c_literal .

    TOK_times       reduce using rule 77 (literal -> c_literal .)
    TOK_divide      reduce using rule 77 (literal -> c_literal .)
    TOK_modulus     reduce using rule 77 (literal -> c_literal .)
    TOK_plus        reduce using rule 77 (literal -> c_literal .)
    TOK_minus       reduce using rule 77 (literal -> c_literal .)
    TOK_lshift      reduce using rule 77 (literal -> c_literal .)
    TOK_rshift      reduce using rule 77 (literal -> c_literal .)
    TOK_greater     reduce using rule 77 (literal -> c_literal .)
    TOK_lesser      reduce using rule 77 (literal -> c_literal .)
    TOK_geq         reduce using rule 77 (literal -> c_literal .)
    TOK_leq         reduce using rule 77 (literal -> c_literal .)
    TOK_equal       reduce using rule 77 (literal -> c_literal .)
    TOK_nequal      reduce using rule 77 (literal -> c_literal .)
    TOK_and_bitwise reduce using rule 77 (literal -> c_literal .)
    TOK_xor         reduce using rule 77 (literal -> c_literal .)
    TOK_or_bitwise  reduce using rule 77 (literal -> c_literal .)
    TOK_and         reduce using rule 77 (literal -> c_literal .)
    TOK_or          reduce using rule 77 (literal -> c_literal .)
    KW_until        reduce using rule 77 (literal -> c_literal .)
    KW_to           reduce using rule 77 (literal -> c_literal .)
    TOK_semi        reduce using rule 77 (literal -> c_literal .)
    TOK_comma       reduce using rule 77 (literal -> c_literal .)
    TOK_pararight   reduce using rule 77 (literal -> c_literal .)
    TOK_rsqb        reduce using rule 77 (literal -> c_literal .)
    KW_by           reduce using rule 77 (literal -> c_literal .)


state 74

    (68) unary_expression_not_plus_minus -> base_variable_set .

    TOK_times       reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_divide      reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_modulus     reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_plus        reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_minus       reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_lshift      reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_rshift      reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_greater     reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_lesser      reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_geq         reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_leq         reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_equal       reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_nequal      reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_and_bitwise reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_xor         reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_or_bitwise  reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_and         reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_or          reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_semi        reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_comma       reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_pararight   reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_rsqb        reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_until        reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_to           reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_by           reduce using rule 68 (unary_expression_not_plus_minus -> base_variable_set .)


state 75

    (39) conditional_and_expression -> inclusive_or_expression .
    (42) inclusive_or_expression -> inclusive_or_expression . TOK_or_bitwise exclusive_or_expression

    TOK_and         reduce using rule 39 (conditional_and_expression -> inclusive_or_expression .)
    TOK_or          reduce using rule 39 (conditional_and_expression -> inclusive_or_expression .)
    TOK_rsqb        reduce using rule 39 (conditional_and_expression -> inclusive_or_expression .)
    TOK_semi        reduce using rule 39 (conditional_and_expression -> inclusive_or_expression .)
    TOK_comma       reduce using rule 39 (conditional_and_expression -> inclusive_or_expression .)
    TOK_pararight   reduce using rule 39 (conditional_and_expression -> inclusive_or_expression .)
    KW_until        reduce using rule 39 (conditional_and_expression -> inclusive_or_expression .)
    KW_to           reduce using rule 39 (conditional_and_expression -> inclusive_or_expression .)
    KW_by           reduce using rule 39 (conditional_and_expression -> inclusive_or_expression .)
    TOK_or_bitwise  shift and go to state 122


state 76

    (81) c_literal -> KW_null .

    TOK_times       reduce using rule 81 (c_literal -> KW_null .)
    TOK_divide      reduce using rule 81 (c_literal -> KW_null .)
    TOK_modulus     reduce using rule 81 (c_literal -> KW_null .)
    TOK_plus        reduce using rule 81 (c_literal -> KW_null .)
    TOK_minus       reduce using rule 81 (c_literal -> KW_null .)
    TOK_lshift      reduce using rule 81 (c_literal -> KW_null .)
    TOK_rshift      reduce using rule 81 (c_literal -> KW_null .)
    TOK_greater     reduce using rule 81 (c_literal -> KW_null .)
    TOK_lesser      reduce using rule 81 (c_literal -> KW_null .)
    TOK_geq         reduce using rule 81 (c_literal -> KW_null .)
    TOK_leq         reduce using rule 81 (c_literal -> KW_null .)
    TOK_equal       reduce using rule 81 (c_literal -> KW_null .)
    TOK_nequal      reduce using rule 81 (c_literal -> KW_null .)
    TOK_and_bitwise reduce using rule 81 (c_literal -> KW_null .)
    TOK_xor         reduce using rule 81 (c_literal -> KW_null .)
    TOK_or_bitwise  reduce using rule 81 (c_literal -> KW_null .)
    TOK_and         reduce using rule 81 (c_literal -> KW_null .)
    TOK_or          reduce using rule 81 (c_literal -> KW_null .)
    KW_until        reduce using rule 81 (c_literal -> KW_null .)
    KW_to           reduce using rule 81 (c_literal -> KW_null .)
    TOK_semi        reduce using rule 81 (c_literal -> KW_null .)
    TOK_comma       reduce using rule 81 (c_literal -> KW_null .)
    TOK_pararight   reduce using rule 81 (c_literal -> KW_null .)
    TOK_rsqb        reduce using rule 81 (c_literal -> KW_null .)
    KW_by           reduce using rule 81 (c_literal -> KW_null .)


state 77

    (55) shift_expression -> additive_expression .
    (59) additive_expression -> additive_expression . TOK_plus multiplicative_expression
    (60) additive_expression -> additive_expression . TOK_minus multiplicative_expression

    TOK_lshift      reduce using rule 55 (shift_expression -> additive_expression .)
    TOK_rshift      reduce using rule 55 (shift_expression -> additive_expression .)
    TOK_greater     reduce using rule 55 (shift_expression -> additive_expression .)
    TOK_lesser      reduce using rule 55 (shift_expression -> additive_expression .)
    TOK_geq         reduce using rule 55 (shift_expression -> additive_expression .)
    TOK_leq         reduce using rule 55 (shift_expression -> additive_expression .)
    TOK_equal       reduce using rule 55 (shift_expression -> additive_expression .)
    TOK_nequal      reduce using rule 55 (shift_expression -> additive_expression .)
    TOK_and_bitwise reduce using rule 55 (shift_expression -> additive_expression .)
    TOK_xor         reduce using rule 55 (shift_expression -> additive_expression .)
    TOK_or_bitwise  reduce using rule 55 (shift_expression -> additive_expression .)
    TOK_and         reduce using rule 55 (shift_expression -> additive_expression .)
    TOK_or          reduce using rule 55 (shift_expression -> additive_expression .)
    TOK_pararight   reduce using rule 55 (shift_expression -> additive_expression .)
    TOK_semi        reduce using rule 55 (shift_expression -> additive_expression .)
    TOK_comma       reduce using rule 55 (shift_expression -> additive_expression .)
    TOK_rsqb        reduce using rule 55 (shift_expression -> additive_expression .)
    KW_until        reduce using rule 55 (shift_expression -> additive_expression .)
    KW_to           reduce using rule 55 (shift_expression -> additive_expression .)
    KW_by           reduce using rule 55 (shift_expression -> additive_expression .)
    TOK_plus        shift and go to state 124
    TOK_minus       shift and go to state 123


state 78

    (74) primary -> literal .

    TOK_times       reduce using rule 74 (primary -> literal .)
    TOK_divide      reduce using rule 74 (primary -> literal .)
    TOK_modulus     reduce using rule 74 (primary -> literal .)
    TOK_plus        reduce using rule 74 (primary -> literal .)
    TOK_minus       reduce using rule 74 (primary -> literal .)
    TOK_lshift      reduce using rule 74 (primary -> literal .)
    TOK_rshift      reduce using rule 74 (primary -> literal .)
    TOK_greater     reduce using rule 74 (primary -> literal .)
    TOK_lesser      reduce using rule 74 (primary -> literal .)
    TOK_geq         reduce using rule 74 (primary -> literal .)
    TOK_leq         reduce using rule 74 (primary -> literal .)
    TOK_equal       reduce using rule 74 (primary -> literal .)
    TOK_nequal      reduce using rule 74 (primary -> literal .)
    TOK_and_bitwise reduce using rule 74 (primary -> literal .)
    TOK_xor         reduce using rule 74 (primary -> literal .)
    TOK_or_bitwise  reduce using rule 74 (primary -> literal .)
    TOK_and         reduce using rule 74 (primary -> literal .)
    TOK_or          reduce using rule 74 (primary -> literal .)
    TOK_semi        reduce using rule 74 (primary -> literal .)
    TOK_comma       reduce using rule 74 (primary -> literal .)
    TOK_pararight   reduce using rule 74 (primary -> literal .)
    TOK_rsqb        reduce using rule 74 (primary -> literal .)
    KW_until        reduce using rule 74 (primary -> literal .)
    KW_to           reduce using rule 74 (primary -> literal .)
    KW_by           reduce using rule 74 (primary -> literal .)


state 79

    (43) exclusive_or_expression -> and_expression .
    (46) and_expression -> and_expression . TOK_and_bitwise equality_expression

    TOK_xor         reduce using rule 43 (exclusive_or_expression -> and_expression .)
    TOK_or_bitwise  reduce using rule 43 (exclusive_or_expression -> and_expression .)
    TOK_and         reduce using rule 43 (exclusive_or_expression -> and_expression .)
    TOK_or          reduce using rule 43 (exclusive_or_expression -> and_expression .)
    TOK_semi        reduce using rule 43 (exclusive_or_expression -> and_expression .)
    TOK_comma       reduce using rule 43 (exclusive_or_expression -> and_expression .)
    TOK_pararight   reduce using rule 43 (exclusive_or_expression -> and_expression .)
    TOK_rsqb        reduce using rule 43 (exclusive_or_expression -> and_expression .)
    KW_until        reduce using rule 43 (exclusive_or_expression -> and_expression .)
    KW_to           reduce using rule 43 (exclusive_or_expression -> and_expression .)
    KW_by           reduce using rule 43 (exclusive_or_expression -> and_expression .)
    TOK_and_bitwise shift and go to state 125


state 80

    (21) assignment_expression -> method_invocation .
    (75) primary -> method_invocation .

  ! reduce/reduce conflict for TOK_pararight resolved using rule 21 (assignment_expression -> method_invocation .)
  ! reduce/reduce conflict for KW_by resolved using rule 21 (assignment_expression -> method_invocation .)
  ! reduce/reduce conflict for TOK_semi resolved using rule 21 (assignment_expression -> method_invocation .)
  ! reduce/reduce conflict for TOK_comma resolved using rule 21 (assignment_expression -> method_invocation .)
  ! reduce/reduce conflict for TOK_rsqb resolved using rule 21 (assignment_expression -> method_invocation .)
  ! reduce/reduce conflict for KW_until resolved using rule 21 (assignment_expression -> method_invocation .)
  ! reduce/reduce conflict for KW_to resolved using rule 21 (assignment_expression -> method_invocation .)
    TOK_rsqb        reduce using rule 21 (assignment_expression -> method_invocation .)
    TOK_pararight   reduce using rule 21 (assignment_expression -> method_invocation .)
    TOK_semi        reduce using rule 21 (assignment_expression -> method_invocation .)
    TOK_comma       reduce using rule 21 (assignment_expression -> method_invocation .)
    KW_until        reduce using rule 21 (assignment_expression -> method_invocation .)
    KW_to           reduce using rule 21 (assignment_expression -> method_invocation .)
    KW_by           reduce using rule 21 (assignment_expression -> method_invocation .)
    TOK_times       reduce using rule 75 (primary -> method_invocation .)
    TOK_divide      reduce using rule 75 (primary -> method_invocation .)
    TOK_modulus     reduce using rule 75 (primary -> method_invocation .)
    TOK_plus        reduce using rule 75 (primary -> method_invocation .)
    TOK_minus       reduce using rule 75 (primary -> method_invocation .)
    TOK_lshift      reduce using rule 75 (primary -> method_invocation .)
    TOK_rshift      reduce using rule 75 (primary -> method_invocation .)
    TOK_greater     reduce using rule 75 (primary -> method_invocation .)
    TOK_lesser      reduce using rule 75 (primary -> method_invocation .)
    TOK_geq         reduce using rule 75 (primary -> method_invocation .)
    TOK_leq         reduce using rule 75 (primary -> method_invocation .)
    TOK_equal       reduce using rule 75 (primary -> method_invocation .)
    TOK_nequal      reduce using rule 75 (primary -> method_invocation .)
    TOK_and_bitwise reduce using rule 75 (primary -> method_invocation .)
    TOK_xor         reduce using rule 75 (primary -> method_invocation .)
    TOK_or_bitwise  reduce using rule 75 (primary -> method_invocation .)
    TOK_and         reduce using rule 75 (primary -> method_invocation .)
    TOK_or          reduce using rule 75 (primary -> method_invocation .)

  ! TOK_pararight   [ reduce using rule 75 (primary -> method_invocation .) ]
  ! KW_by           [ reduce using rule 75 (primary -> method_invocation .) ]
  ! TOK_semi        [ reduce using rule 75 (primary -> method_invocation .) ]
  ! TOK_comma       [ reduce using rule 75 (primary -> method_invocation .) ]
  ! TOK_rsqb        [ reduce using rule 75 (primary -> method_invocation .) ]
  ! KW_until        [ reduce using rule 75 (primary -> method_invocation .) ]
  ! KW_to           [ reduce using rule 75 (primary -> method_invocation .) ]


state 81

    (20) assignment_expression -> conditional_or_expression .
    (38) conditional_or_expression -> conditional_or_expression . TOK_or conditional_and_expression

    TOK_rsqb        reduce using rule 20 (assignment_expression -> conditional_or_expression .)
    TOK_pararight   reduce using rule 20 (assignment_expression -> conditional_or_expression .)
    TOK_semi        reduce using rule 20 (assignment_expression -> conditional_or_expression .)
    TOK_comma       reduce using rule 20 (assignment_expression -> conditional_or_expression .)
    KW_until        reduce using rule 20 (assignment_expression -> conditional_or_expression .)
    KW_to           reduce using rule 20 (assignment_expression -> conditional_or_expression .)
    KW_by           reduce using rule 20 (assignment_expression -> conditional_or_expression .)
    TOK_or          shift and go to state 126


state 82

    (17) expression_question -> empty .

    TOK_semi        reduce using rule 17 (expression_question -> empty .)


state 83

    (47) equality_expression -> relational_expression .
    (51) relational_expression -> relational_expression . TOK_greater shift_expression
    (52) relational_expression -> relational_expression . TOK_lesser shift_expression
    (53) relational_expression -> relational_expression . TOK_geq shift_expression
    (54) relational_expression -> relational_expression . TOK_leq shift_expression

    TOK_equal       reduce using rule 47 (equality_expression -> relational_expression .)
    TOK_nequal      reduce using rule 47 (equality_expression -> relational_expression .)
    TOK_and_bitwise reduce using rule 47 (equality_expression -> relational_expression .)
    TOK_xor         reduce using rule 47 (equality_expression -> relational_expression .)
    TOK_or_bitwise  reduce using rule 47 (equality_expression -> relational_expression .)
    TOK_and         reduce using rule 47 (equality_expression -> relational_expression .)
    TOK_or          reduce using rule 47 (equality_expression -> relational_expression .)
    TOK_semi        reduce using rule 47 (equality_expression -> relational_expression .)
    TOK_comma       reduce using rule 47 (equality_expression -> relational_expression .)
    TOK_pararight   reduce using rule 47 (equality_expression -> relational_expression .)
    TOK_rsqb        reduce using rule 47 (equality_expression -> relational_expression .)
    KW_until        reduce using rule 47 (equality_expression -> relational_expression .)
    KW_to           reduce using rule 47 (equality_expression -> relational_expression .)
    KW_by           reduce using rule 47 (equality_expression -> relational_expression .)
    TOK_greater     shift and go to state 130
    TOK_lesser      shift and go to state 128
    TOK_geq         shift and go to state 127
    TOK_leq         shift and go to state 129


state 84

    (78) c_literal -> TOK_string .

    TOK_times       reduce using rule 78 (c_literal -> TOK_string .)
    TOK_divide      reduce using rule 78 (c_literal -> TOK_string .)
    TOK_modulus     reduce using rule 78 (c_literal -> TOK_string .)
    TOK_plus        reduce using rule 78 (c_literal -> TOK_string .)
    TOK_minus       reduce using rule 78 (c_literal -> TOK_string .)
    TOK_lshift      reduce using rule 78 (c_literal -> TOK_string .)
    TOK_rshift      reduce using rule 78 (c_literal -> TOK_string .)
    TOK_greater     reduce using rule 78 (c_literal -> TOK_string .)
    TOK_lesser      reduce using rule 78 (c_literal -> TOK_string .)
    TOK_geq         reduce using rule 78 (c_literal -> TOK_string .)
    TOK_leq         reduce using rule 78 (c_literal -> TOK_string .)
    TOK_equal       reduce using rule 78 (c_literal -> TOK_string .)
    TOK_nequal      reduce using rule 78 (c_literal -> TOK_string .)
    TOK_and_bitwise reduce using rule 78 (c_literal -> TOK_string .)
    TOK_xor         reduce using rule 78 (c_literal -> TOK_string .)
    TOK_or_bitwise  reduce using rule 78 (c_literal -> TOK_string .)
    TOK_and         reduce using rule 78 (c_literal -> TOK_string .)
    TOK_or          reduce using rule 78 (c_literal -> TOK_string .)
    KW_until        reduce using rule 78 (c_literal -> TOK_string .)
    KW_to           reduce using rule 78 (c_literal -> TOK_string .)
    TOK_semi        reduce using rule 78 (c_literal -> TOK_string .)
    TOK_comma       reduce using rule 78 (c_literal -> TOK_string .)
    TOK_pararight   reduce using rule 78 (c_literal -> TOK_string .)
    TOK_rsqb        reduce using rule 78 (c_literal -> TOK_string .)
    KW_by           reduce using rule 78 (c_literal -> TOK_string .)


state 85

    (69) unary_expression_not_plus_minus -> TOK_not . unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    int_float                      shift and go to state 95
    c_literal                      shift and go to state 73
    qualified_id                   shift and go to state 38
    variable_literal               shift and go to state 97
    unary_expression               shift and go to state 131
    base_variable_set              shift and go to state 74
    array_access                   shift and go to state 20
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    literal                        shift and go to state 78
    left_hand_side                 shift and go to state 132
    method_invocation              shift and go to state 134
    id                             shift and go to state 133
    name                           shift and go to state 37

state 86

    (18) expression -> assignment_expression .

    TOK_pararight   reduce using rule 18 (expression -> assignment_expression .)
    KW_until        reduce using rule 18 (expression -> assignment_expression .)
    KW_to           reduce using rule 18 (expression -> assignment_expression .)
    TOK_comma       reduce using rule 18 (expression -> assignment_expression .)
    KW_by           reduce using rule 18 (expression -> assignment_expression .)
    TOK_semi        reduce using rule 18 (expression -> assignment_expression .)
    TOK_rsqb        reduce using rule 18 (expression -> assignment_expression .)


state 87

    (19) assignment_expression -> assignment .

    TOK_rsqb        reduce using rule 19 (assignment_expression -> assignment .)
    TOK_pararight   reduce using rule 19 (assignment_expression -> assignment .)
    TOK_semi        reduce using rule 19 (assignment_expression -> assignment .)
    TOK_comma       reduce using rule 19 (assignment_expression -> assignment .)
    KW_until        reduce using rule 19 (assignment_expression -> assignment .)
    KW_to           reduce using rule 19 (assignment_expression -> assignment .)
    KW_by           reduce using rule 19 (assignment_expression -> assignment .)


state 88

    (58) additive_expression -> multiplicative_expression .
    (62) multiplicative_expression -> multiplicative_expression . TOK_times unary_expression
    (63) multiplicative_expression -> multiplicative_expression . TOK_divide unary_expression
    (64) multiplicative_expression -> multiplicative_expression . TOK_modulus unary_expression

    TOK_plus        reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_minus       reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_lshift      reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_rshift      reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_greater     reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_lesser      reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_geq         reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_leq         reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_equal       reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_nequal      reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_and_bitwise reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_xor         reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_or_bitwise  reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_and         reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_or          reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_semi        reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_comma       reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_pararight   reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_rsqb        reduce using rule 58 (additive_expression -> multiplicative_expression .)
    KW_until        reduce using rule 58 (additive_expression -> multiplicative_expression .)
    KW_to           reduce using rule 58 (additive_expression -> multiplicative_expression .)
    KW_by           reduce using rule 58 (additive_expression -> multiplicative_expression .)
    TOK_times       shift and go to state 135
    TOK_divide      shift and go to state 136
    TOK_modulus     shift and go to state 137


state 89

    (83) int_float -> TOK_float .

    TOK_times       reduce using rule 83 (int_float -> TOK_float .)
    TOK_divide      reduce using rule 83 (int_float -> TOK_float .)
    TOK_modulus     reduce using rule 83 (int_float -> TOK_float .)
    TOK_plus        reduce using rule 83 (int_float -> TOK_float .)
    TOK_minus       reduce using rule 83 (int_float -> TOK_float .)
    TOK_lshift      reduce using rule 83 (int_float -> TOK_float .)
    TOK_rshift      reduce using rule 83 (int_float -> TOK_float .)
    TOK_greater     reduce using rule 83 (int_float -> TOK_float .)
    TOK_lesser      reduce using rule 83 (int_float -> TOK_float .)
    TOK_geq         reduce using rule 83 (int_float -> TOK_float .)
    TOK_leq         reduce using rule 83 (int_float -> TOK_float .)
    TOK_equal       reduce using rule 83 (int_float -> TOK_float .)
    TOK_nequal      reduce using rule 83 (int_float -> TOK_float .)
    TOK_and_bitwise reduce using rule 83 (int_float -> TOK_float .)
    TOK_xor         reduce using rule 83 (int_float -> TOK_float .)
    TOK_or_bitwise  reduce using rule 83 (int_float -> TOK_float .)
    TOK_and         reduce using rule 83 (int_float -> TOK_float .)
    TOK_or          reduce using rule 83 (int_float -> TOK_float .)
    TOK_semi        reduce using rule 83 (int_float -> TOK_float .)
    TOK_comma       reduce using rule 83 (int_float -> TOK_float .)
    TOK_pararight   reduce using rule 83 (int_float -> TOK_float .)
    TOK_rsqb        reduce using rule 83 (int_float -> TOK_float .)
    KW_until        reduce using rule 83 (int_float -> TOK_float .)
    KW_to           reduce using rule 83 (int_float -> TOK_float .)
    KW_by           reduce using rule 83 (int_float -> TOK_float .)


state 90

    (65) unary_expression -> TOK_plus . unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    int_float                      shift and go to state 95
    c_literal                      shift and go to state 73
    qualified_id                   shift and go to state 38
    variable_literal               shift and go to state 97
    unary_expression               shift and go to state 138
    base_variable_set              shift and go to state 74
    array_access                   shift and go to state 20
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    literal                        shift and go to state 78
    left_hand_side                 shift and go to state 132
    method_invocation              shift and go to state 134
    id                             shift and go to state 133
    name                           shift and go to state 37

state 91

    (82) c_literal -> TOK_char .

    TOK_times       reduce using rule 82 (c_literal -> TOK_char .)
    TOK_divide      reduce using rule 82 (c_literal -> TOK_char .)
    TOK_modulus     reduce using rule 82 (c_literal -> TOK_char .)
    TOK_plus        reduce using rule 82 (c_literal -> TOK_char .)
    TOK_minus       reduce using rule 82 (c_literal -> TOK_char .)
    TOK_lshift      reduce using rule 82 (c_literal -> TOK_char .)
    TOK_rshift      reduce using rule 82 (c_literal -> TOK_char .)
    TOK_greater     reduce using rule 82 (c_literal -> TOK_char .)
    TOK_lesser      reduce using rule 82 (c_literal -> TOK_char .)
    TOK_geq         reduce using rule 82 (c_literal -> TOK_char .)
    TOK_leq         reduce using rule 82 (c_literal -> TOK_char .)
    TOK_equal       reduce using rule 82 (c_literal -> TOK_char .)
    TOK_nequal      reduce using rule 82 (c_literal -> TOK_char .)
    TOK_and_bitwise reduce using rule 82 (c_literal -> TOK_char .)
    TOK_xor         reduce using rule 82 (c_literal -> TOK_char .)
    TOK_or_bitwise  reduce using rule 82 (c_literal -> TOK_char .)
    TOK_and         reduce using rule 82 (c_literal -> TOK_char .)
    TOK_or          reduce using rule 82 (c_literal -> TOK_char .)
    KW_until        reduce using rule 82 (c_literal -> TOK_char .)
    KW_to           reduce using rule 82 (c_literal -> TOK_char .)
    TOK_semi        reduce using rule 82 (c_literal -> TOK_char .)
    TOK_comma       reduce using rule 82 (c_literal -> TOK_char .)
    TOK_pararight   reduce using rule 82 (c_literal -> TOK_char .)
    TOK_rsqb        reduce using rule 82 (c_literal -> TOK_char .)
    KW_by           reduce using rule 82 (c_literal -> TOK_char .)


state 92

    (80) c_literal -> KW_false .

    TOK_times       reduce using rule 80 (c_literal -> KW_false .)
    TOK_divide      reduce using rule 80 (c_literal -> KW_false .)
    TOK_modulus     reduce using rule 80 (c_literal -> KW_false .)
    TOK_plus        reduce using rule 80 (c_literal -> KW_false .)
    TOK_minus       reduce using rule 80 (c_literal -> KW_false .)
    TOK_lshift      reduce using rule 80 (c_literal -> KW_false .)
    TOK_rshift      reduce using rule 80 (c_literal -> KW_false .)
    TOK_greater     reduce using rule 80 (c_literal -> KW_false .)
    TOK_lesser      reduce using rule 80 (c_literal -> KW_false .)
    TOK_geq         reduce using rule 80 (c_literal -> KW_false .)
    TOK_leq         reduce using rule 80 (c_literal -> KW_false .)
    TOK_equal       reduce using rule 80 (c_literal -> KW_false .)
    TOK_nequal      reduce using rule 80 (c_literal -> KW_false .)
    TOK_and_bitwise reduce using rule 80 (c_literal -> KW_false .)
    TOK_xor         reduce using rule 80 (c_literal -> KW_false .)
    TOK_or_bitwise  reduce using rule 80 (c_literal -> KW_false .)
    TOK_and         reduce using rule 80 (c_literal -> KW_false .)
    TOK_or          reduce using rule 80 (c_literal -> KW_false .)
    KW_until        reduce using rule 80 (c_literal -> KW_false .)
    KW_to           reduce using rule 80 (c_literal -> KW_false .)
    TOK_semi        reduce using rule 80 (c_literal -> KW_false .)
    TOK_comma       reduce using rule 80 (c_literal -> KW_false .)
    TOK_pararight   reduce using rule 80 (c_literal -> KW_false .)
    TOK_rsqb        reduce using rule 80 (c_literal -> KW_false .)
    KW_by           reduce using rule 80 (c_literal -> KW_false .)


state 93

    (50) relational_expression -> shift_expression .
    (56) shift_expression -> shift_expression . TOK_lshift additive_expression
    (57) shift_expression -> shift_expression . TOK_rshift additive_expression

    TOK_greater     reduce using rule 50 (relational_expression -> shift_expression .)
    TOK_lesser      reduce using rule 50 (relational_expression -> shift_expression .)
    TOK_geq         reduce using rule 50 (relational_expression -> shift_expression .)
    TOK_leq         reduce using rule 50 (relational_expression -> shift_expression .)
    TOK_equal       reduce using rule 50 (relational_expression -> shift_expression .)
    TOK_nequal      reduce using rule 50 (relational_expression -> shift_expression .)
    TOK_and_bitwise reduce using rule 50 (relational_expression -> shift_expression .)
    TOK_xor         reduce using rule 50 (relational_expression -> shift_expression .)
    TOK_or_bitwise  reduce using rule 50 (relational_expression -> shift_expression .)
    TOK_and         reduce using rule 50 (relational_expression -> shift_expression .)
    TOK_or          reduce using rule 50 (relational_expression -> shift_expression .)
    TOK_pararight   reduce using rule 50 (relational_expression -> shift_expression .)
    TOK_semi        reduce using rule 50 (relational_expression -> shift_expression .)
    TOK_comma       reduce using rule 50 (relational_expression -> shift_expression .)
    TOK_rsqb        reduce using rule 50 (relational_expression -> shift_expression .)
    KW_until        reduce using rule 50 (relational_expression -> shift_expression .)
    KW_to           reduce using rule 50 (relational_expression -> shift_expression .)
    KW_by           reduce using rule 50 (relational_expression -> shift_expression .)
    TOK_lshift      shift and go to state 140
    TOK_rshift      shift and go to state 139


state 94

    (45) and_expression -> equality_expression .
    (48) equality_expression -> equality_expression . TOK_equal relational_expression
    (49) equality_expression -> equality_expression . TOK_nequal relational_expression

    TOK_and_bitwise reduce using rule 45 (and_expression -> equality_expression .)
    TOK_xor         reduce using rule 45 (and_expression -> equality_expression .)
    TOK_or_bitwise  reduce using rule 45 (and_expression -> equality_expression .)
    TOK_and         reduce using rule 45 (and_expression -> equality_expression .)
    TOK_or          reduce using rule 45 (and_expression -> equality_expression .)
    TOK_semi        reduce using rule 45 (and_expression -> equality_expression .)
    TOK_comma       reduce using rule 45 (and_expression -> equality_expression .)
    TOK_pararight   reduce using rule 45 (and_expression -> equality_expression .)
    TOK_rsqb        reduce using rule 45 (and_expression -> equality_expression .)
    KW_until        reduce using rule 45 (and_expression -> equality_expression .)
    KW_to           reduce using rule 45 (and_expression -> equality_expression .)
    KW_by           reduce using rule 45 (and_expression -> equality_expression .)
    TOK_equal       shift and go to state 141
    TOK_nequal      shift and go to state 142


state 95

    (76) literal -> int_float .

    TOK_times       reduce using rule 76 (literal -> int_float .)
    TOK_divide      reduce using rule 76 (literal -> int_float .)
    TOK_modulus     reduce using rule 76 (literal -> int_float .)
    TOK_plus        reduce using rule 76 (literal -> int_float .)
    TOK_minus       reduce using rule 76 (literal -> int_float .)
    TOK_lshift      reduce using rule 76 (literal -> int_float .)
    TOK_rshift      reduce using rule 76 (literal -> int_float .)
    TOK_greater     reduce using rule 76 (literal -> int_float .)
    TOK_lesser      reduce using rule 76 (literal -> int_float .)
    TOK_geq         reduce using rule 76 (literal -> int_float .)
    TOK_leq         reduce using rule 76 (literal -> int_float .)
    TOK_equal       reduce using rule 76 (literal -> int_float .)
    TOK_nequal      reduce using rule 76 (literal -> int_float .)
    TOK_and_bitwise reduce using rule 76 (literal -> int_float .)
    TOK_xor         reduce using rule 76 (literal -> int_float .)
    TOK_or_bitwise  reduce using rule 76 (literal -> int_float .)
    TOK_and         reduce using rule 76 (literal -> int_float .)
    TOK_or          reduce using rule 76 (literal -> int_float .)
    KW_until        reduce using rule 76 (literal -> int_float .)
    KW_to           reduce using rule 76 (literal -> int_float .)
    TOK_semi        reduce using rule 76 (literal -> int_float .)
    TOK_comma       reduce using rule 76 (literal -> int_float .)
    TOK_pararight   reduce using rule 76 (literal -> int_float .)
    TOK_rsqb        reduce using rule 76 (literal -> int_float .)
    KW_by           reduce using rule 76 (literal -> int_float .)


state 96

    (135) return_statement -> KW_return expression_question . TOK_semi

    TOK_semi        shift and go to state 143


state 97

    (70) base_variable_set -> variable_literal .

    TOK_times       reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_divide      reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_modulus     reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_plus        reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_minus       reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_lshift      reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_rshift      reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_greater     reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_lesser      reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_geq         reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_leq         reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_equal       reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_nequal      reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_and_bitwise reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_xor         reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_or_bitwise  reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_and         reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_or          reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_semi        reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_comma       reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_pararight   reduce using rule 70 (base_variable_set -> variable_literal .)
    TOK_rsqb        reduce using rule 70 (base_variable_set -> variable_literal .)
    KW_until        reduce using rule 70 (base_variable_set -> variable_literal .)
    KW_to           reduce using rule 70 (base_variable_set -> variable_literal .)
    KW_by           reduce using rule 70 (base_variable_set -> variable_literal .)


state 98

    (71) base_variable_set -> TOK_paraleft . expression TOK_pararight
    (18) expression -> . assignment_expression
    (19) assignment_expression -> . assignment
    (20) assignment_expression -> . conditional_or_expression
    (21) assignment_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (37) conditional_or_expression -> . conditional_and_expression
    (38) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (39) conditional_and_expression -> . inclusive_or_expression
    (40) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (41) inclusive_or_expression -> . exclusive_or_expression
    (42) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (43) exclusive_or_expression -> . and_expression
    (44) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_identifier  shift and go to state 22
    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    and_expression                 shift and go to state 79
    exclusive_or_expression        shift and go to state 69
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 72
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    additive_expression            shift and go to state 77
    c_literal                      shift and go to state 73
    unary_expression               shift and go to state 68
    base_variable_set              shift and go to state 74
    inclusive_or_expression        shift and go to state 75
    literal                        shift and go to state 78
    relational_expression          shift and go to state 83
    method_invocation              shift and go to state 80
    conditional_or_expression      shift and go to state 81
    assignment_expression          shift and go to state 86
    assignment                     shift and go to state 87
    multiplicative_expression      shift and go to state 88
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 94
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    conditional_and_expression     shift and go to state 103
    expression                     shift and go to state 144

state 99

    (66) unary_expression -> TOK_minus . unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    int_float                      shift and go to state 95
    c_literal                      shift and go to state 73
    qualified_id                   shift and go to state 38
    variable_literal               shift and go to state 97
    unary_expression               shift and go to state 145
    base_variable_set              shift and go to state 74
    array_access                   shift and go to state 20
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    literal                        shift and go to state 78
    left_hand_side                 shift and go to state 132
    method_invocation              shift and go to state 134
    id                             shift and go to state 133
    name                           shift and go to state 37

state 100

    (79) c_literal -> KW_true .

    TOK_times       reduce using rule 79 (c_literal -> KW_true .)
    TOK_divide      reduce using rule 79 (c_literal -> KW_true .)
    TOK_modulus     reduce using rule 79 (c_literal -> KW_true .)
    TOK_plus        reduce using rule 79 (c_literal -> KW_true .)
    TOK_minus       reduce using rule 79 (c_literal -> KW_true .)
    TOK_lshift      reduce using rule 79 (c_literal -> KW_true .)
    TOK_rshift      reduce using rule 79 (c_literal -> KW_true .)
    TOK_greater     reduce using rule 79 (c_literal -> KW_true .)
    TOK_lesser      reduce using rule 79 (c_literal -> KW_true .)
    TOK_geq         reduce using rule 79 (c_literal -> KW_true .)
    TOK_leq         reduce using rule 79 (c_literal -> KW_true .)
    TOK_equal       reduce using rule 79 (c_literal -> KW_true .)
    TOK_nequal      reduce using rule 79 (c_literal -> KW_true .)
    TOK_and_bitwise reduce using rule 79 (c_literal -> KW_true .)
    TOK_xor         reduce using rule 79 (c_literal -> KW_true .)
    TOK_or_bitwise  reduce using rule 79 (c_literal -> KW_true .)
    TOK_and         reduce using rule 79 (c_literal -> KW_true .)
    TOK_or          reduce using rule 79 (c_literal -> KW_true .)
    KW_until        reduce using rule 79 (c_literal -> KW_true .)
    KW_to           reduce using rule 79 (c_literal -> KW_true .)
    TOK_semi        reduce using rule 79 (c_literal -> KW_true .)
    TOK_comma       reduce using rule 79 (c_literal -> KW_true .)
    TOK_pararight   reduce using rule 79 (c_literal -> KW_true .)
    TOK_rsqb        reduce using rule 79 (c_literal -> KW_true .)
    KW_by           reduce using rule 79 (c_literal -> KW_true .)


state 101

    (84) int_float -> TOK_int .

    TOK_times       reduce using rule 84 (int_float -> TOK_int .)
    TOK_divide      reduce using rule 84 (int_float -> TOK_int .)
    TOK_modulus     reduce using rule 84 (int_float -> TOK_int .)
    TOK_plus        reduce using rule 84 (int_float -> TOK_int .)
    TOK_minus       reduce using rule 84 (int_float -> TOK_int .)
    TOK_lshift      reduce using rule 84 (int_float -> TOK_int .)
    TOK_rshift      reduce using rule 84 (int_float -> TOK_int .)
    TOK_greater     reduce using rule 84 (int_float -> TOK_int .)
    TOK_lesser      reduce using rule 84 (int_float -> TOK_int .)
    TOK_geq         reduce using rule 84 (int_float -> TOK_int .)
    TOK_leq         reduce using rule 84 (int_float -> TOK_int .)
    TOK_equal       reduce using rule 84 (int_float -> TOK_int .)
    TOK_nequal      reduce using rule 84 (int_float -> TOK_int .)
    TOK_and_bitwise reduce using rule 84 (int_float -> TOK_int .)
    TOK_xor         reduce using rule 84 (int_float -> TOK_int .)
    TOK_or_bitwise  reduce using rule 84 (int_float -> TOK_int .)
    TOK_and         reduce using rule 84 (int_float -> TOK_int .)
    TOK_or          reduce using rule 84 (int_float -> TOK_int .)
    TOK_semi        reduce using rule 84 (int_float -> TOK_int .)
    TOK_comma       reduce using rule 84 (int_float -> TOK_int .)
    TOK_pararight   reduce using rule 84 (int_float -> TOK_int .)
    TOK_rsqb        reduce using rule 84 (int_float -> TOK_int .)
    KW_until        reduce using rule 84 (int_float -> TOK_int .)
    KW_to           reduce using rule 84 (int_float -> TOK_int .)
    KW_by           reduce using rule 84 (int_float -> TOK_int .)


state 102

    (16) expression_question -> expression .

    TOK_semi        reduce using rule 16 (expression_question -> expression .)


state 103

    (37) conditional_or_expression -> conditional_and_expression .
    (40) conditional_and_expression -> conditional_and_expression . TOK_and inclusive_or_expression

    TOK_or          reduce using rule 37 (conditional_or_expression -> conditional_and_expression .)
    TOK_comma       reduce using rule 37 (conditional_or_expression -> conditional_and_expression .)
    TOK_pararight   reduce using rule 37 (conditional_or_expression -> conditional_and_expression .)
    TOK_semi        reduce using rule 37 (conditional_or_expression -> conditional_and_expression .)
    TOK_rsqb        reduce using rule 37 (conditional_or_expression -> conditional_and_expression .)
    KW_by           reduce using rule 37 (conditional_or_expression -> conditional_and_expression .)
    KW_until        reduce using rule 37 (conditional_or_expression -> conditional_and_expression .)
    KW_to           reduce using rule 37 (conditional_or_expression -> conditional_and_expression .)
    TOK_and         shift and go to state 146


state 104

    (92) local_variable_declaration_statement -> local_variable_declaration TOK_semi .

    KW_if           reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    KW_while        reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    KW_for          reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    KW_def          reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    KW_var          reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    KW_val          reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    TOK_lcurly      reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    TOK_semi        reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    KW_return       reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    KW_obj          reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    TOK_identifier  reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    TOK_rcurly      reduce using rule 92 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)


state 105

    (11) block_stats -> block_stats block_stat .

    KW_if           reduce using rule 11 (block_stats -> block_stats block_stat .)
    KW_while        reduce using rule 11 (block_stats -> block_stats block_stat .)
    KW_for          reduce using rule 11 (block_stats -> block_stats block_stat .)
    KW_def          reduce using rule 11 (block_stats -> block_stats block_stat .)
    KW_var          reduce using rule 11 (block_stats -> block_stats block_stat .)
    KW_val          reduce using rule 11 (block_stats -> block_stats block_stat .)
    TOK_lcurly      reduce using rule 11 (block_stats -> block_stats block_stat .)
    TOK_semi        reduce using rule 11 (block_stats -> block_stats block_stat .)
    KW_return       reduce using rule 11 (block_stats -> block_stats block_stat .)
    KW_obj          reduce using rule 11 (block_stats -> block_stats block_stat .)
    TOK_identifier  reduce using rule 11 (block_stats -> block_stats block_stat .)
    TOK_rcurly      reduce using rule 11 (block_stats -> block_stats block_stat .)


state 106

    (126) while_statement -> KW_while TOK_paraleft . expression TOK_pararight statement
    (18) expression -> . assignment_expression
    (19) assignment_expression -> . assignment
    (20) assignment_expression -> . conditional_or_expression
    (21) assignment_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (37) conditional_or_expression -> . conditional_and_expression
    (38) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (39) conditional_and_expression -> . inclusive_or_expression
    (40) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (41) inclusive_or_expression -> . exclusive_or_expression
    (42) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (43) exclusive_or_expression -> . and_expression
    (44) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_identifier  shift and go to state 22
    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    and_expression                 shift and go to state 79
    exclusive_or_expression        shift and go to state 69
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 72
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    additive_expression            shift and go to state 77
    c_literal                      shift and go to state 73
    unary_expression               shift and go to state 68
    base_variable_set              shift and go to state 74
    inclusive_or_expression        shift and go to state 75
    literal                        shift and go to state 78
    relational_expression          shift and go to state 83
    method_invocation              shift and go to state 80
    conditional_or_expression      shift and go to state 81
    assignment_expression          shift and go to state 86
    assignment                     shift and go to state 87
    multiplicative_expression      shift and go to state 88
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 94
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    conditional_and_expression     shift and go to state 103
    expression                     shift and go to state 147

state 107

    (96) variable_declaration_body -> TOK_identifier type_question . TOK_assignment variable_declaration_initializer

    TOK_assignment  shift and go to state 148


state 108

    (136) type_question -> TOK_colon . type
    (98) type -> . primitive_type
    (99) type -> . reference_type
    (100) primitive_type -> . KW_int
    (101) primitive_type -> . KW_double
    (102) primitive_type -> . KW_char
    (103) primitive_type -> . KW_string
    (104) primitive_type -> . KW_boolean
    (105) primitive_type -> . KW_void
    (106) reference_type -> . array_data_type
    (107) array_data_type -> . KW_array TOK_lsqb type TOK_rsqb

    KW_int          shift and go to state 154
    KW_double       shift and go to state 151
    KW_char         shift and go to state 149
    KW_string       shift and go to state 159
    KW_boolean      shift and go to state 153
    KW_void         shift and go to state 150
    KW_array        shift and go to state 156

    primitive_type                 shift and go to state 155
    reference_type                 shift and go to state 152
    type                           shift and go to state 157
    array_data_type                shift and go to state 158

state 109

    (22) assignment -> left_hand_side assignment_operator assignment_expression .

    TOK_semi        reduce using rule 22 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_by           reduce using rule 22 (assignment -> left_hand_side assignment_operator assignment_expression .)
    TOK_pararight   reduce using rule 22 (assignment -> left_hand_side assignment_operator assignment_expression .)
    TOK_rsqb        reduce using rule 22 (assignment -> left_hand_side assignment_operator assignment_expression .)
    TOK_comma       reduce using rule 22 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_until        reduce using rule 22 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_to           reduce using rule 22 (assignment -> left_hand_side assignment_operator assignment_expression .)


state 110

    (86) argument_list_question -> argument_list .
    (89) argument_list -> argument_list . TOK_comma expression

    TOK_pararight   reduce using rule 86 (argument_list_question -> argument_list .)
    TOK_comma       shift and go to state 160


state 111

    (87) argument_list_question -> empty .

    TOK_pararight   reduce using rule 87 (argument_list_question -> empty .)


state 112

    (85) method_invocation -> id TOK_paraleft argument_list_question . TOK_pararight

    TOK_pararight   shift and go to state 161


state 113

    (88) argument_list -> expression .

    TOK_comma       reduce using rule 88 (argument_list -> expression .)
    TOK_pararight   reduce using rule 88 (argument_list -> expression .)


state 114

    (30) dimension -> TOK_lsqb expression . TOK_rsqb

    TOK_rsqb        shift and go to state 162


state 115

    (128) for_update -> for_loop . for_step_opts
    (132) for_step_opts -> . KW_by expression
    (133) for_step_opts -> . empty
    (146) empty -> .

    KW_by           shift and go to state 163
    TOK_pararight   reduce using rule 146 (empty -> .)

    for_step_opts                  shift and go to state 164
    empty                          shift and go to state 165

state 116

    (127) for_statement -> KW_for TOK_paraleft for_update . TOK_pararight statement

    TOK_pararight   shift and go to state 166


state 117

    (129) for_loop -> TOK_identifier . TOK_choose expression for_untilTo expression

    TOK_choose      shift and go to state 167


state 118

    (138) method_header -> KW_def name TOK_paraleft . fun_params_question TOK_pararight type_question TOK_assignment
    (139) method_header -> KW_def name TOK_paraleft . fun_params_question TOK_pararight
    (140) fun_params_question -> . fun_params
    (141) fun_params_question -> . empty
    (142) fun_params -> . fun_param
    (143) fun_params -> . fun_params TOK_comma fun_param
    (146) empty -> .
    (144) fun_param -> . variable_declarator_id
    (97) variable_declarator_id -> . TOK_identifier TOK_colon type

    TOK_pararight   reduce using rule 146 (empty -> .)
    TOK_identifier  shift and go to state 172

    fun_param                      shift and go to state 169
    fun_params                     shift and go to state 170
    fun_params_question            shift and go to state 171
    variable_declarator_id         shift and go to state 168
    empty                          shift and go to state 173

state 119

    (121) if_then_statement -> KW_if TOK_paraleft expression . TOK_pararight statement
    (122) if_then_else_statement -> KW_if TOK_paraleft expression . TOK_pararight if_then_else_intermediate KW_else statement

    TOK_pararight   shift and go to state 174


state 120

    (27) qualified_id -> name TOK_dot name .

    TOK_paraleft    reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_lsqb        reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_assignment  reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_mulassign   reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_divassign   reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_modassign   reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_addassign   reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_subassign   reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_times       reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_divide      reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_modulus     reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_plus        reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_minus       reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_lshift      reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_rshift      reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_greater     reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_lesser      reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_geq         reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_leq         reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_equal       reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_nequal      reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_and_bitwise reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_xor         reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_or_bitwise  reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_and         reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_or          reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_semi        reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_comma       reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_pararight   reduce using rule 27 (qualified_id -> name TOK_dot name .)
    TOK_rsqb        reduce using rule 27 (qualified_id -> name TOK_dot name .)
    KW_until        reduce using rule 27 (qualified_id -> name TOK_dot name .)
    KW_to           reduce using rule 27 (qualified_id -> name TOK_dot name .)
    KW_by           reduce using rule 27 (qualified_id -> name TOK_dot name .)


state 121

    (44) exclusive_or_expression -> exclusive_or_expression TOK_xor . and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    unary_expression               shift and go to state 68
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 132
    array_access                   shift and go to state 20
    id                             shift and go to state 133
    and_expression                 shift and go to state 175
    c_literal                      shift and go to state 73
    base_variable_set              shift and go to state 74
    literal                        shift and go to state 78
    additive_expression            shift and go to state 77
    method_invocation              shift and go to state 134
    relational_expression          shift and go to state 83
    multiplicative_expression      shift and go to state 88
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 94
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38

state 122

    (42) inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise . exclusive_or_expression
    (43) exclusive_or_expression -> . and_expression
    (44) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    unary_expression               shift and go to state 68
    exclusive_or_expression        shift and go to state 176
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 132
    array_access                   shift and go to state 20
    id                             shift and go to state 133
    additive_expression            shift and go to state 77
    c_literal                      shift and go to state 73
    base_variable_set              shift and go to state 74
    literal                        shift and go to state 78
    and_expression                 shift and go to state 79
    method_invocation              shift and go to state 134
    relational_expression          shift and go to state 83
    multiplicative_expression      shift and go to state 88
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 94
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38

state 123

    (60) additive_expression -> additive_expression TOK_minus . multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    int_float                      shift and go to state 95
    c_literal                      shift and go to state 73
    qualified_id                   shift and go to state 38
    variable_literal               shift and go to state 97
    base_variable_set              shift and go to state 74
    unary_expression               shift and go to state 68
    array_access                   shift and go to state 20
    multiplicative_expression      shift and go to state 177
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    literal                        shift and go to state 78
    left_hand_side                 shift and go to state 132
    method_invocation              shift and go to state 134
    id                             shift and go to state 133
    name                           shift and go to state 37

state 124

    (59) additive_expression -> additive_expression TOK_plus . multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    int_float                      shift and go to state 95
    c_literal                      shift and go to state 73
    qualified_id                   shift and go to state 38
    variable_literal               shift and go to state 97
    base_variable_set              shift and go to state 74
    unary_expression               shift and go to state 68
    array_access                   shift and go to state 20
    multiplicative_expression      shift and go to state 178
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    literal                        shift and go to state 78
    left_hand_side                 shift and go to state 132
    method_invocation              shift and go to state 134
    id                             shift and go to state 133
    name                           shift and go to state 37

state 125

    (46) and_expression -> and_expression TOK_and_bitwise . equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    unary_expression               shift and go to state 68
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 132
    array_access                   shift and go to state 20
    id                             shift and go to state 133
    c_literal                      shift and go to state 73
    base_variable_set              shift and go to state 74
    literal                        shift and go to state 78
    additive_expression            shift and go to state 77
    method_invocation              shift and go to state 134
    relational_expression          shift and go to state 83
    multiplicative_expression      shift and go to state 88
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 179
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38

state 126

    (38) conditional_or_expression -> conditional_or_expression TOK_or . conditional_and_expression
    (39) conditional_and_expression -> . inclusive_or_expression
    (40) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (41) inclusive_or_expression -> . exclusive_or_expression
    (42) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (43) exclusive_or_expression -> . and_expression
    (44) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    unary_expression               shift and go to state 68
    exclusive_or_expression        shift and go to state 69
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 132
    array_access                   shift and go to state 20
    id                             shift and go to state 133
    additive_expression            shift and go to state 77
    c_literal                      shift and go to state 73
    base_variable_set              shift and go to state 74
    inclusive_or_expression        shift and go to state 75
    literal                        shift and go to state 78
    and_expression                 shift and go to state 79
    method_invocation              shift and go to state 134
    relational_expression          shift and go to state 83
    multiplicative_expression      shift and go to state 88
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 94
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    conditional_and_expression     shift and go to state 180

state 127

    (53) relational_expression -> relational_expression TOK_geq . shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    int_float                      shift and go to state 95
    c_literal                      shift and go to state 73
    qualified_id                   shift and go to state 38
    variable_literal               shift and go to state 97
    base_variable_set              shift and go to state 74
    unary_expression               shift and go to state 68
    array_access                   shift and go to state 20
    multiplicative_expression      shift and go to state 88
    primary                        shift and go to state 70
    id                             shift and go to state 133
    unary_expression_not_plus_minus shift and go to state 71
    literal                        shift and go to state 78
    left_hand_side                 shift and go to state 132
    method_invocation              shift and go to state 134
    shift_expression               shift and go to state 181
    additive_expression            shift and go to state 77
    name                           shift and go to state 37

state 128

    (52) relational_expression -> relational_expression TOK_lesser . shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    int_float                      shift and go to state 95
    c_literal                      shift and go to state 73
    qualified_id                   shift and go to state 38
    variable_literal               shift and go to state 97
    base_variable_set              shift and go to state 74
    unary_expression               shift and go to state 68
    array_access                   shift and go to state 20
    multiplicative_expression      shift and go to state 88
    primary                        shift and go to state 70
    id                             shift and go to state 133
    unary_expression_not_plus_minus shift and go to state 71
    literal                        shift and go to state 78
    left_hand_side                 shift and go to state 132
    method_invocation              shift and go to state 134
    shift_expression               shift and go to state 182
    additive_expression            shift and go to state 77
    name                           shift and go to state 37

state 129

    (54) relational_expression -> relational_expression TOK_leq . shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    int_float                      shift and go to state 95
    c_literal                      shift and go to state 73
    qualified_id                   shift and go to state 38
    variable_literal               shift and go to state 97
    base_variable_set              shift and go to state 74
    unary_expression               shift and go to state 68
    array_access                   shift and go to state 20
    multiplicative_expression      shift and go to state 88
    primary                        shift and go to state 70
    id                             shift and go to state 133
    unary_expression_not_plus_minus shift and go to state 71
    literal                        shift and go to state 78
    left_hand_side                 shift and go to state 132
    method_invocation              shift and go to state 134
    shift_expression               shift and go to state 183
    additive_expression            shift and go to state 77
    name                           shift and go to state 37

state 130

    (51) relational_expression -> relational_expression TOK_greater . shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    int_float                      shift and go to state 95
    c_literal                      shift and go to state 73
    qualified_id                   shift and go to state 38
    variable_literal               shift and go to state 97
    base_variable_set              shift and go to state 74
    unary_expression               shift and go to state 68
    array_access                   shift and go to state 20
    multiplicative_expression      shift and go to state 88
    primary                        shift and go to state 70
    id                             shift and go to state 133
    unary_expression_not_plus_minus shift and go to state 71
    literal                        shift and go to state 78
    left_hand_side                 shift and go to state 132
    method_invocation              shift and go to state 134
    shift_expression               shift and go to state 184
    additive_expression            shift and go to state 77
    name                           shift and go to state 37

state 131

    (69) unary_expression_not_plus_minus -> TOK_not unary_expression .

    TOK_times       reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_divide      reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_modulus     reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_plus        reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_minus       reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_lshift      reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_rshift      reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_greater     reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_lesser      reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_geq         reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_leq         reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_equal       reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_nequal      reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_and_bitwise reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_xor         reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_or_bitwise  reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_and         reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_or          reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_semi        reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_comma       reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_pararight   reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_rsqb        reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_until        reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_to           reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_by           reduce using rule 69 (unary_expression_not_plus_minus -> TOK_not unary_expression .)


state 132

    (72) variable_literal -> left_hand_side .

    TOK_times       reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_divide      reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_modulus     reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_plus        reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_minus       reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_lshift      reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_rshift      reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_greater     reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_lesser      reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_geq         reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_leq         reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_equal       reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_nequal      reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_and_bitwise reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_xor         reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_or_bitwise  reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_and         reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_or          reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_semi        reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_comma       reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_pararight   reduce using rule 72 (variable_literal -> left_hand_side .)
    TOK_rsqb        reduce using rule 72 (variable_literal -> left_hand_side .)
    KW_until        reduce using rule 72 (variable_literal -> left_hand_side .)
    KW_to           reduce using rule 72 (variable_literal -> left_hand_side .)
    KW_by           reduce using rule 72 (variable_literal -> left_hand_side .)


state 133

    (23) left_hand_side -> id .
    (29) array_access -> id . dimension
    (85) method_invocation -> id . TOK_paraleft argument_list_question TOK_pararight
    (30) dimension -> . TOK_lsqb expression TOK_rsqb

    TOK_times       reduce using rule 23 (left_hand_side -> id .)
    TOK_divide      reduce using rule 23 (left_hand_side -> id .)
    TOK_modulus     reduce using rule 23 (left_hand_side -> id .)
    TOK_plus        reduce using rule 23 (left_hand_side -> id .)
    TOK_minus       reduce using rule 23 (left_hand_side -> id .)
    TOK_lshift      reduce using rule 23 (left_hand_side -> id .)
    TOK_rshift      reduce using rule 23 (left_hand_side -> id .)
    TOK_greater     reduce using rule 23 (left_hand_side -> id .)
    TOK_lesser      reduce using rule 23 (left_hand_side -> id .)
    TOK_geq         reduce using rule 23 (left_hand_side -> id .)
    TOK_leq         reduce using rule 23 (left_hand_side -> id .)
    TOK_equal       reduce using rule 23 (left_hand_side -> id .)
    TOK_nequal      reduce using rule 23 (left_hand_side -> id .)
    TOK_and_bitwise reduce using rule 23 (left_hand_side -> id .)
    TOK_xor         reduce using rule 23 (left_hand_side -> id .)
    TOK_or_bitwise  reduce using rule 23 (left_hand_side -> id .)
    TOK_and         reduce using rule 23 (left_hand_side -> id .)
    TOK_or          reduce using rule 23 (left_hand_side -> id .)
    TOK_semi        reduce using rule 23 (left_hand_side -> id .)
    TOK_comma       reduce using rule 23 (left_hand_side -> id .)
    TOK_pararight   reduce using rule 23 (left_hand_side -> id .)
    TOK_rsqb        reduce using rule 23 (left_hand_side -> id .)
    KW_until        reduce using rule 23 (left_hand_side -> id .)
    KW_to           reduce using rule 23 (left_hand_side -> id .)
    KW_by           reduce using rule 23 (left_hand_side -> id .)
    TOK_paraleft    shift and go to state 58
    TOK_lsqb        shift and go to state 60

    dimension                      shift and go to state 59

state 134

    (75) primary -> method_invocation .

    TOK_times       reduce using rule 75 (primary -> method_invocation .)
    TOK_divide      reduce using rule 75 (primary -> method_invocation .)
    TOK_modulus     reduce using rule 75 (primary -> method_invocation .)
    TOK_plus        reduce using rule 75 (primary -> method_invocation .)
    TOK_minus       reduce using rule 75 (primary -> method_invocation .)
    TOK_lshift      reduce using rule 75 (primary -> method_invocation .)
    TOK_rshift      reduce using rule 75 (primary -> method_invocation .)
    TOK_greater     reduce using rule 75 (primary -> method_invocation .)
    TOK_lesser      reduce using rule 75 (primary -> method_invocation .)
    TOK_geq         reduce using rule 75 (primary -> method_invocation .)
    TOK_leq         reduce using rule 75 (primary -> method_invocation .)
    TOK_equal       reduce using rule 75 (primary -> method_invocation .)
    TOK_nequal      reduce using rule 75 (primary -> method_invocation .)
    TOK_and_bitwise reduce using rule 75 (primary -> method_invocation .)
    TOK_xor         reduce using rule 75 (primary -> method_invocation .)
    TOK_or_bitwise  reduce using rule 75 (primary -> method_invocation .)
    TOK_and         reduce using rule 75 (primary -> method_invocation .)
    TOK_or          reduce using rule 75 (primary -> method_invocation .)
    TOK_semi        reduce using rule 75 (primary -> method_invocation .)
    TOK_comma       reduce using rule 75 (primary -> method_invocation .)
    TOK_pararight   reduce using rule 75 (primary -> method_invocation .)
    TOK_rsqb        reduce using rule 75 (primary -> method_invocation .)
    KW_until        reduce using rule 75 (primary -> method_invocation .)
    KW_to           reduce using rule 75 (primary -> method_invocation .)
    KW_by           reduce using rule 75 (primary -> method_invocation .)


state 135

    (62) multiplicative_expression -> multiplicative_expression TOK_times . unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    int_float                      shift and go to state 95
    c_literal                      shift and go to state 73
    qualified_id                   shift and go to state 38
    variable_literal               shift and go to state 97
    unary_expression               shift and go to state 185
    base_variable_set              shift and go to state 74
    array_access                   shift and go to state 20
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    literal                        shift and go to state 78
    left_hand_side                 shift and go to state 132
    method_invocation              shift and go to state 134
    id                             shift and go to state 133
    name                           shift and go to state 37

state 136

    (63) multiplicative_expression -> multiplicative_expression TOK_divide . unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    int_float                      shift and go to state 95
    c_literal                      shift and go to state 73
    qualified_id                   shift and go to state 38
    variable_literal               shift and go to state 97
    unary_expression               shift and go to state 186
    base_variable_set              shift and go to state 74
    array_access                   shift and go to state 20
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    literal                        shift and go to state 78
    left_hand_side                 shift and go to state 132
    method_invocation              shift and go to state 134
    id                             shift and go to state 133
    name                           shift and go to state 37

state 137

    (64) multiplicative_expression -> multiplicative_expression TOK_modulus . unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    int_float                      shift and go to state 95
    c_literal                      shift and go to state 73
    qualified_id                   shift and go to state 38
    variable_literal               shift and go to state 97
    unary_expression               shift and go to state 187
    base_variable_set              shift and go to state 74
    array_access                   shift and go to state 20
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    literal                        shift and go to state 78
    left_hand_side                 shift and go to state 132
    method_invocation              shift and go to state 134
    id                             shift and go to state 133
    name                           shift and go to state 37

state 138

    (65) unary_expression -> TOK_plus unary_expression .

    TOK_times       reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_divide      reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_modulus     reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_plus        reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_minus       reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_lshift      reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_rshift      reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_greater     reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_lesser      reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_geq         reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_leq         reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_equal       reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_nequal      reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_and_bitwise reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_xor         reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_or_bitwise  reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_and         reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_or          reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    KW_until        reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    KW_to           reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_semi        reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_comma       reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_pararight   reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    TOK_rsqb        reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)
    KW_by           reduce using rule 65 (unary_expression -> TOK_plus unary_expression .)


state 139

    (57) shift_expression -> shift_expression TOK_rshift . additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    int_float                      shift and go to state 95
    c_literal                      shift and go to state 73
    qualified_id                   shift and go to state 38
    variable_literal               shift and go to state 97
    base_variable_set              shift and go to state 74
    unary_expression               shift and go to state 68
    array_access                   shift and go to state 20
    multiplicative_expression      shift and go to state 88
    primary                        shift and go to state 70
    id                             shift and go to state 133
    unary_expression_not_plus_minus shift and go to state 71
    literal                        shift and go to state 78
    left_hand_side                 shift and go to state 132
    method_invocation              shift and go to state 134
    additive_expression            shift and go to state 188
    name                           shift and go to state 37

state 140

    (56) shift_expression -> shift_expression TOK_lshift . additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    int_float                      shift and go to state 95
    c_literal                      shift and go to state 73
    qualified_id                   shift and go to state 38
    variable_literal               shift and go to state 97
    base_variable_set              shift and go to state 74
    unary_expression               shift and go to state 68
    array_access                   shift and go to state 20
    multiplicative_expression      shift and go to state 88
    primary                        shift and go to state 70
    id                             shift and go to state 133
    unary_expression_not_plus_minus shift and go to state 71
    literal                        shift and go to state 78
    left_hand_side                 shift and go to state 132
    method_invocation              shift and go to state 134
    additive_expression            shift and go to state 189
    name                           shift and go to state 37

state 141

    (48) equality_expression -> equality_expression TOK_equal . relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    unary_expression               shift and go to state 68
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 132
    array_access                   shift and go to state 20
    id                             shift and go to state 133
    additive_expression            shift and go to state 77
    c_literal                      shift and go to state 73
    base_variable_set              shift and go to state 74
    literal                        shift and go to state 78
    relational_expression          shift and go to state 190
    method_invocation              shift and go to state 134
    multiplicative_expression      shift and go to state 88
    shift_expression               shift and go to state 93
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38

state 142

    (49) equality_expression -> equality_expression TOK_nequal . relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    unary_expression               shift and go to state 68
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 132
    array_access                   shift and go to state 20
    id                             shift and go to state 133
    additive_expression            shift and go to state 77
    c_literal                      shift and go to state 73
    base_variable_set              shift and go to state 74
    literal                        shift and go to state 78
    relational_expression          shift and go to state 191
    method_invocation              shift and go to state 134
    multiplicative_expression      shift and go to state 88
    shift_expression               shift and go to state 93
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38

state 143

    (135) return_statement -> KW_return expression_question TOK_semi .

    KW_if           reduce using rule 135 (return_statement -> KW_return expression_question TOK_semi .)
    KW_while        reduce using rule 135 (return_statement -> KW_return expression_question TOK_semi .)
    KW_for          reduce using rule 135 (return_statement -> KW_return expression_question TOK_semi .)
    KW_def          reduce using rule 135 (return_statement -> KW_return expression_question TOK_semi .)
    KW_var          reduce using rule 135 (return_statement -> KW_return expression_question TOK_semi .)
    KW_val          reduce using rule 135 (return_statement -> KW_return expression_question TOK_semi .)
    TOK_lcurly      reduce using rule 135 (return_statement -> KW_return expression_question TOK_semi .)
    TOK_semi        reduce using rule 135 (return_statement -> KW_return expression_question TOK_semi .)
    KW_return       reduce using rule 135 (return_statement -> KW_return expression_question TOK_semi .)
    KW_obj          reduce using rule 135 (return_statement -> KW_return expression_question TOK_semi .)
    TOK_identifier  reduce using rule 135 (return_statement -> KW_return expression_question TOK_semi .)
    TOK_rcurly      reduce using rule 135 (return_statement -> KW_return expression_question TOK_semi .)
    KW_else         reduce using rule 135 (return_statement -> KW_return expression_question TOK_semi .)


state 144

    (71) base_variable_set -> TOK_paraleft expression . TOK_pararight

    TOK_pararight   shift and go to state 192


state 145

    (66) unary_expression -> TOK_minus unary_expression .

    TOK_times       reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_divide      reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_modulus     reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_plus        reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_minus       reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_lshift      reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_rshift      reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_greater     reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_lesser      reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_geq         reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_leq         reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_equal       reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_nequal      reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_and_bitwise reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_xor         reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_or_bitwise  reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_and         reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_or          reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    KW_until        reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    KW_to           reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_semi        reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_comma       reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_pararight   reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    TOK_rsqb        reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)
    KW_by           reduce using rule 66 (unary_expression -> TOK_minus unary_expression .)


state 146

    (40) conditional_and_expression -> conditional_and_expression TOK_and . inclusive_or_expression
    (41) inclusive_or_expression -> . exclusive_or_expression
    (42) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (43) exclusive_or_expression -> . and_expression
    (44) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_identifier  shift and go to state 22
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    unary_expression               shift and go to state 68
    exclusive_or_expression        shift and go to state 69
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 132
    array_access                   shift and go to state 20
    id                             shift and go to state 133
    additive_expression            shift and go to state 77
    c_literal                      shift and go to state 73
    base_variable_set              shift and go to state 74
    inclusive_or_expression        shift and go to state 193
    literal                        shift and go to state 78
    and_expression                 shift and go to state 79
    method_invocation              shift and go to state 134
    relational_expression          shift and go to state 83
    multiplicative_expression      shift and go to state 88
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 94
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38

state 147

    (126) while_statement -> KW_while TOK_paraleft expression . TOK_pararight statement

    TOK_pararight   shift and go to state 194


state 148

    (96) variable_declaration_body -> TOK_identifier type_question TOK_assignment . variable_declaration_initializer
    (94) variable_declaration_initializer -> . expression
    (95) variable_declaration_initializer -> . array_initializer
    (18) expression -> . assignment_expression
    (108) array_initializer -> . KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft TOK_int TOK_pararight
    (19) assignment_expression -> . assignment
    (20) assignment_expression -> . conditional_or_expression
    (21) assignment_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (37) conditional_or_expression -> . conditional_and_expression
    (38) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (39) conditional_and_expression -> . inclusive_or_expression
    (40) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (41) inclusive_or_expression -> . exclusive_or_expression
    (42) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (43) exclusive_or_expression -> . and_expression
    (44) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    KW_new          shift and go to state 196
    TOK_identifier  shift and go to state 22
    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    variable_declaration_initializer shift and go to state 195
    unary_expression               shift and go to state 68
    exclusive_or_expression        shift and go to state 69
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 72
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    and_expression                 shift and go to state 79
    c_literal                      shift and go to state 73
    base_variable_set              shift and go to state 74
    inclusive_or_expression        shift and go to state 75
    literal                        shift and go to state 78
    relational_expression          shift and go to state 83
    method_invocation              shift and go to state 80
    conditional_or_expression      shift and go to state 81
    assignment_expression          shift and go to state 86
    assignment                     shift and go to state 87
    multiplicative_expression      shift and go to state 88
    additive_expression            shift and go to state 77
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 94
    array_initializer              shift and go to state 197
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    conditional_and_expression     shift and go to state 103
    expression                     shift and go to state 198

state 149

    (102) primitive_type -> KW_char .

    TOK_comma       reduce using rule 102 (primitive_type -> KW_char .)
    TOK_pararight   reduce using rule 102 (primitive_type -> KW_char .)
    TOK_rsqb        reduce using rule 102 (primitive_type -> KW_char .)
    TOK_assignment  reduce using rule 102 (primitive_type -> KW_char .)


state 150

    (105) primitive_type -> KW_void .

    TOK_comma       reduce using rule 105 (primitive_type -> KW_void .)
    TOK_pararight   reduce using rule 105 (primitive_type -> KW_void .)
    TOK_rsqb        reduce using rule 105 (primitive_type -> KW_void .)
    TOK_assignment  reduce using rule 105 (primitive_type -> KW_void .)


state 151

    (101) primitive_type -> KW_double .

    TOK_comma       reduce using rule 101 (primitive_type -> KW_double .)
    TOK_pararight   reduce using rule 101 (primitive_type -> KW_double .)
    TOK_rsqb        reduce using rule 101 (primitive_type -> KW_double .)
    TOK_assignment  reduce using rule 101 (primitive_type -> KW_double .)


state 152

    (99) type -> reference_type .

    TOK_rsqb        reduce using rule 99 (type -> reference_type .)
    TOK_assignment  reduce using rule 99 (type -> reference_type .)
    TOK_comma       reduce using rule 99 (type -> reference_type .)
    TOK_pararight   reduce using rule 99 (type -> reference_type .)


state 153

    (104) primitive_type -> KW_boolean .

    TOK_comma       reduce using rule 104 (primitive_type -> KW_boolean .)
    TOK_pararight   reduce using rule 104 (primitive_type -> KW_boolean .)
    TOK_rsqb        reduce using rule 104 (primitive_type -> KW_boolean .)
    TOK_assignment  reduce using rule 104 (primitive_type -> KW_boolean .)


state 154

    (100) primitive_type -> KW_int .

    TOK_comma       reduce using rule 100 (primitive_type -> KW_int .)
    TOK_pararight   reduce using rule 100 (primitive_type -> KW_int .)
    TOK_rsqb        reduce using rule 100 (primitive_type -> KW_int .)
    TOK_assignment  reduce using rule 100 (primitive_type -> KW_int .)


state 155

    (98) type -> primitive_type .

    TOK_rsqb        reduce using rule 98 (type -> primitive_type .)
    TOK_assignment  reduce using rule 98 (type -> primitive_type .)
    TOK_comma       reduce using rule 98 (type -> primitive_type .)
    TOK_pararight   reduce using rule 98 (type -> primitive_type .)


state 156

    (107) array_data_type -> KW_array . TOK_lsqb type TOK_rsqb

    TOK_lsqb        shift and go to state 199


state 157

    (136) type_question -> TOK_colon type .

    TOK_assignment  reduce using rule 136 (type_question -> TOK_colon type .)


state 158

    (106) reference_type -> array_data_type .

    TOK_comma       reduce using rule 106 (reference_type -> array_data_type .)
    TOK_pararight   reduce using rule 106 (reference_type -> array_data_type .)
    TOK_rsqb        reduce using rule 106 (reference_type -> array_data_type .)
    TOK_assignment  reduce using rule 106 (reference_type -> array_data_type .)


state 159

    (103) primitive_type -> KW_string .

    TOK_comma       reduce using rule 103 (primitive_type -> KW_string .)
    TOK_pararight   reduce using rule 103 (primitive_type -> KW_string .)
    TOK_rsqb        reduce using rule 103 (primitive_type -> KW_string .)
    TOK_assignment  reduce using rule 103 (primitive_type -> KW_string .)


state 160

    (89) argument_list -> argument_list TOK_comma . expression
    (18) expression -> . assignment_expression
    (19) assignment_expression -> . assignment
    (20) assignment_expression -> . conditional_or_expression
    (21) assignment_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (37) conditional_or_expression -> . conditional_and_expression
    (38) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (39) conditional_and_expression -> . inclusive_or_expression
    (40) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (41) inclusive_or_expression -> . exclusive_or_expression
    (42) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (43) exclusive_or_expression -> . and_expression
    (44) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_identifier  shift and go to state 22
    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    and_expression                 shift and go to state 79
    exclusive_or_expression        shift and go to state 69
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 72
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    additive_expression            shift and go to state 77
    c_literal                      shift and go to state 73
    unary_expression               shift and go to state 68
    base_variable_set              shift and go to state 74
    inclusive_or_expression        shift and go to state 75
    literal                        shift and go to state 78
    relational_expression          shift and go to state 83
    method_invocation              shift and go to state 80
    conditional_or_expression      shift and go to state 81
    assignment_expression          shift and go to state 86
    assignment                     shift and go to state 87
    multiplicative_expression      shift and go to state 88
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 94
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    conditional_and_expression     shift and go to state 103
    expression                     shift and go to state 200

state 161

    (85) method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .

    TOK_times       reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_divide      reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_modulus     reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_plus        reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_minus       reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_lshift      reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_rshift      reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_greater     reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_lesser      reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_geq         reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_leq         reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_equal       reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_nequal      reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_and_bitwise reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_xor         reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_or_bitwise  reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_and         reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_or          reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_semi        reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_comma       reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_pararight   reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_rsqb        reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_until        reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_to           reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_by           reduce using rule 85 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)


state 162

    (30) dimension -> TOK_lsqb expression TOK_rsqb .

    TOK_assignment  reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_mulassign   reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_divassign   reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_modassign   reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_addassign   reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_subassign   reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_times       reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_divide      reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_modulus     reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_plus        reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_minus       reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_lshift      reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_rshift      reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_greater     reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_lesser      reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_geq         reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_leq         reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_equal       reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_nequal      reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_and_bitwise reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_xor         reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_or_bitwise  reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_and         reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_or          reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_semi        reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_comma       reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_pararight   reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_rsqb        reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_until        reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_to           reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_by           reduce using rule 30 (dimension -> TOK_lsqb expression TOK_rsqb .)


state 163

    (132) for_step_opts -> KW_by . expression
    (18) expression -> . assignment_expression
    (19) assignment_expression -> . assignment
    (20) assignment_expression -> . conditional_or_expression
    (21) assignment_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (37) conditional_or_expression -> . conditional_and_expression
    (38) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (39) conditional_and_expression -> . inclusive_or_expression
    (40) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (41) inclusive_or_expression -> . exclusive_or_expression
    (42) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (43) exclusive_or_expression -> . and_expression
    (44) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_identifier  shift and go to state 22
    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    and_expression                 shift and go to state 79
    exclusive_or_expression        shift and go to state 69
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 72
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    additive_expression            shift and go to state 77
    c_literal                      shift and go to state 73
    unary_expression               shift and go to state 68
    base_variable_set              shift and go to state 74
    inclusive_or_expression        shift and go to state 75
    literal                        shift and go to state 78
    relational_expression          shift and go to state 83
    method_invocation              shift and go to state 80
    conditional_or_expression      shift and go to state 81
    assignment_expression          shift and go to state 86
    assignment                     shift and go to state 87
    multiplicative_expression      shift and go to state 88
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 94
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    conditional_and_expression     shift and go to state 103
    expression                     shift and go to state 201

state 164

    (128) for_update -> for_loop for_step_opts .

    TOK_pararight   reduce using rule 128 (for_update -> for_loop for_step_opts .)


state 165

    (133) for_step_opts -> empty .

    TOK_pararight   reduce using rule 133 (for_step_opts -> empty .)


state 166

    (127) for_statement -> KW_for TOK_paraleft for_update TOK_pararight . statement
    (109) statement -> . normal_statement
    (110) statement -> . if_then_statement
    (111) statement -> . if_then_else_statement
    (112) statement -> . while_statement
    (113) statement -> . for_statement
    (114) normal_statement -> . block
    (115) normal_statement -> . expression_statement
    (116) normal_statement -> . empty_statement
    (117) normal_statement -> . return_statement
    (121) if_then_statement -> . KW_if TOK_paraleft expression TOK_pararight statement
    (122) if_then_else_statement -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (126) while_statement -> . KW_while TOK_paraleft expression TOK_pararight statement
    (127) for_statement -> . KW_for TOK_paraleft for_update TOK_pararight statement
    (7) block -> . TOK_lcurly block_stats_star TOK_rcurly
    (118) expression_statement -> . statement_expression TOK_semi
    (134) empty_statement -> . TOK_semi
    (135) return_statement -> . KW_return expression_question TOK_semi
    (119) statement_expression -> . assignment
    (120) statement_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name

    KW_if           shift and go to state 31
    KW_while        shift and go to state 45
    KW_for          shift and go to state 25
    TOK_lcurly      shift and go to state 9
    TOK_semi        shift and go to state 41
    KW_return       shift and go to state 42
    TOK_identifier  shift and go to state 22

    expression_statement           shift and go to state 11
    normal_statement               shift and go to state 13
    if_then_statement              shift and go to state 18
    left_hand_side                 shift and go to state 19
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    return_statement               shift and go to state 26
    while_statement                shift and go to state 27
    statement                      shift and go to state 202
    statement_expression           shift and go to state 30
    method_invocation              shift and go to state 36
    for_statement                  shift and go to state 33
    assignment                     shift and go to state 35
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    empty_statement                shift and go to state 40
    block                          shift and go to state 46
    if_then_else_statement         shift and go to state 47

state 167

    (129) for_loop -> TOK_identifier TOK_choose . expression for_untilTo expression
    (18) expression -> . assignment_expression
    (19) assignment_expression -> . assignment
    (20) assignment_expression -> . conditional_or_expression
    (21) assignment_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (37) conditional_or_expression -> . conditional_and_expression
    (38) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (39) conditional_and_expression -> . inclusive_or_expression
    (40) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (41) inclusive_or_expression -> . exclusive_or_expression
    (42) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (43) exclusive_or_expression -> . and_expression
    (44) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_identifier  shift and go to state 22
    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    and_expression                 shift and go to state 79
    exclusive_or_expression        shift and go to state 69
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 72
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    additive_expression            shift and go to state 77
    c_literal                      shift and go to state 73
    unary_expression               shift and go to state 68
    base_variable_set              shift and go to state 74
    inclusive_or_expression        shift and go to state 75
    literal                        shift and go to state 78
    relational_expression          shift and go to state 83
    method_invocation              shift and go to state 80
    conditional_or_expression      shift and go to state 81
    assignment_expression          shift and go to state 86
    assignment                     shift and go to state 87
    multiplicative_expression      shift and go to state 88
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 94
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    conditional_and_expression     shift and go to state 103
    expression                     shift and go to state 203

state 168

    (144) fun_param -> variable_declarator_id .

    TOK_comma       reduce using rule 144 (fun_param -> variable_declarator_id .)
    TOK_pararight   reduce using rule 144 (fun_param -> variable_declarator_id .)


state 169

    (142) fun_params -> fun_param .

    TOK_comma       reduce using rule 142 (fun_params -> fun_param .)
    TOK_pararight   reduce using rule 142 (fun_params -> fun_param .)


state 170

    (140) fun_params_question -> fun_params .
    (143) fun_params -> fun_params . TOK_comma fun_param

    TOK_pararight   reduce using rule 140 (fun_params_question -> fun_params .)
    TOK_comma       shift and go to state 204


state 171

    (138) method_header -> KW_def name TOK_paraleft fun_params_question . TOK_pararight type_question TOK_assignment
    (139) method_header -> KW_def name TOK_paraleft fun_params_question . TOK_pararight

    TOK_pararight   shift and go to state 205


state 172

    (97) variable_declarator_id -> TOK_identifier . TOK_colon type

    TOK_colon       shift and go to state 206


state 173

    (141) fun_params_question -> empty .

    TOK_pararight   reduce using rule 141 (fun_params_question -> empty .)


state 174

    (121) if_then_statement -> KW_if TOK_paraleft expression TOK_pararight . statement
    (122) if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight . if_then_else_intermediate KW_else statement
    (109) statement -> . normal_statement
    (110) statement -> . if_then_statement
    (111) statement -> . if_then_else_statement
    (112) statement -> . while_statement
    (113) statement -> . for_statement
    (124) if_then_else_intermediate -> . normal_statement
    (125) if_then_else_intermediate -> . if_then_else_statement_precedence
    (114) normal_statement -> . block
    (115) normal_statement -> . expression_statement
    (116) normal_statement -> . empty_statement
    (117) normal_statement -> . return_statement
    (121) if_then_statement -> . KW_if TOK_paraleft expression TOK_pararight statement
    (122) if_then_else_statement -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (126) while_statement -> . KW_while TOK_paraleft expression TOK_pararight statement
    (127) for_statement -> . KW_for TOK_paraleft for_update TOK_pararight statement
    (123) if_then_else_statement_precedence -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate
    (7) block -> . TOK_lcurly block_stats_star TOK_rcurly
    (118) expression_statement -> . statement_expression TOK_semi
    (134) empty_statement -> . TOK_semi
    (135) return_statement -> . KW_return expression_question TOK_semi
    (119) statement_expression -> . assignment
    (120) statement_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name

    KW_if           shift and go to state 211
    KW_while        shift and go to state 45
    KW_for          shift and go to state 25
    TOK_lcurly      shift and go to state 9
    TOK_semi        shift and go to state 41
    KW_return       shift and go to state 42
    TOK_identifier  shift and go to state 22

    expression_statement           shift and go to state 11
    if_then_else_statement_precedence shift and go to state 207
    normal_statement               shift and go to state 208
    if_then_else_intermediate      shift and go to state 209
    if_then_statement              shift and go to state 18
    left_hand_side                 shift and go to state 19
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    return_statement               shift and go to state 26
    while_statement                shift and go to state 27
    statement                      shift and go to state 210
    statement_expression           shift and go to state 30
    method_invocation              shift and go to state 36
    for_statement                  shift and go to state 33
    assignment                     shift and go to state 35
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    empty_statement                shift and go to state 40
    block                          shift and go to state 46
    if_then_else_statement         shift and go to state 47

state 175

    (44) exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .
    (46) and_expression -> and_expression . TOK_and_bitwise equality_expression

    TOK_xor         reduce using rule 44 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_or_bitwise  reduce using rule 44 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_and         reduce using rule 44 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_or          reduce using rule 44 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_semi        reduce using rule 44 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_comma       reduce using rule 44 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_pararight   reduce using rule 44 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_rsqb        reduce using rule 44 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_until        reduce using rule 44 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_to           reduce using rule 44 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_by           reduce using rule 44 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_and_bitwise shift and go to state 125


state 176

    (42) inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .
    (44) exclusive_or_expression -> exclusive_or_expression . TOK_xor and_expression

    TOK_or_bitwise  reduce using rule 42 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    TOK_and         reduce using rule 42 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    TOK_or          reduce using rule 42 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    TOK_pararight   reduce using rule 42 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    TOK_rsqb        reduce using rule 42 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    TOK_comma       reduce using rule 42 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    TOK_semi        reduce using rule 42 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_until        reduce using rule 42 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_to           reduce using rule 42 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_by           reduce using rule 42 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    TOK_xor         shift and go to state 121


state 177

    (60) additive_expression -> additive_expression TOK_minus multiplicative_expression .
    (62) multiplicative_expression -> multiplicative_expression . TOK_times unary_expression
    (63) multiplicative_expression -> multiplicative_expression . TOK_divide unary_expression
    (64) multiplicative_expression -> multiplicative_expression . TOK_modulus unary_expression

    TOK_plus        reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_minus       reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_lshift      reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_rshift      reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_greater     reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_lesser      reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_geq         reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_leq         reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_equal       reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_nequal      reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_and_bitwise reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_xor         reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_or_bitwise  reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_and         reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_or          reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_semi        reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_comma       reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_pararight   reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_rsqb        reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_until        reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_to           reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_by           reduce using rule 60 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_times       shift and go to state 135
    TOK_divide      shift and go to state 136
    TOK_modulus     shift and go to state 137


state 178

    (59) additive_expression -> additive_expression TOK_plus multiplicative_expression .
    (62) multiplicative_expression -> multiplicative_expression . TOK_times unary_expression
    (63) multiplicative_expression -> multiplicative_expression . TOK_divide unary_expression
    (64) multiplicative_expression -> multiplicative_expression . TOK_modulus unary_expression

    TOK_plus        reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_minus       reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_lshift      reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_rshift      reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_greater     reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_lesser      reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_geq         reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_leq         reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_equal       reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_nequal      reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_and_bitwise reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_xor         reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_or_bitwise  reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_and         reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_or          reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_semi        reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_comma       reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_pararight   reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_rsqb        reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_until        reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_to           reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_by           reduce using rule 59 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_times       shift and go to state 135
    TOK_divide      shift and go to state 136
    TOK_modulus     shift and go to state 137


state 179

    (46) and_expression -> and_expression TOK_and_bitwise equality_expression .
    (48) equality_expression -> equality_expression . TOK_equal relational_expression
    (49) equality_expression -> equality_expression . TOK_nequal relational_expression

    TOK_and_bitwise reduce using rule 46 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_xor         reduce using rule 46 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_or_bitwise  reduce using rule 46 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_and         reduce using rule 46 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_or          reduce using rule 46 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_semi        reduce using rule 46 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_comma       reduce using rule 46 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_pararight   reduce using rule 46 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_rsqb        reduce using rule 46 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_until        reduce using rule 46 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_to           reduce using rule 46 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_by           reduce using rule 46 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_equal       shift and go to state 141
    TOK_nequal      shift and go to state 142


state 180

    (38) conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .
    (40) conditional_and_expression -> conditional_and_expression . TOK_and inclusive_or_expression

    TOK_or          reduce using rule 38 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    TOK_comma       reduce using rule 38 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    TOK_pararight   reduce using rule 38 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    TOK_semi        reduce using rule 38 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    TOK_rsqb        reduce using rule 38 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_by           reduce using rule 38 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_until        reduce using rule 38 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_to           reduce using rule 38 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    TOK_and         shift and go to state 146


state 181

    (53) relational_expression -> relational_expression TOK_geq shift_expression .
    (56) shift_expression -> shift_expression . TOK_lshift additive_expression
    (57) shift_expression -> shift_expression . TOK_rshift additive_expression

    TOK_greater     reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_lesser      reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_geq         reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_leq         reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_equal       reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_nequal      reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_and_bitwise reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_xor         reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_or_bitwise  reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_and         reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_or          reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_pararight   reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_semi        reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_comma       reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_rsqb        reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_until        reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_to           reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_by           reduce using rule 53 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_lshift      shift and go to state 140
    TOK_rshift      shift and go to state 139


state 182

    (52) relational_expression -> relational_expression TOK_lesser shift_expression .
    (56) shift_expression -> shift_expression . TOK_lshift additive_expression
    (57) shift_expression -> shift_expression . TOK_rshift additive_expression

    TOK_greater     reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_lesser      reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_geq         reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_leq         reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_equal       reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_nequal      reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_and_bitwise reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_xor         reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_or_bitwise  reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_and         reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_or          reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_pararight   reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_semi        reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_comma       reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_rsqb        reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_until        reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_to           reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_by           reduce using rule 52 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_lshift      shift and go to state 140
    TOK_rshift      shift and go to state 139


state 183

    (54) relational_expression -> relational_expression TOK_leq shift_expression .
    (56) shift_expression -> shift_expression . TOK_lshift additive_expression
    (57) shift_expression -> shift_expression . TOK_rshift additive_expression

    TOK_greater     reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_lesser      reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_geq         reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_leq         reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_equal       reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_nequal      reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_and_bitwise reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_xor         reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_or_bitwise  reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_and         reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_or          reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_pararight   reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_semi        reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_comma       reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_rsqb        reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_until        reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_to           reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_by           reduce using rule 54 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_lshift      shift and go to state 140
    TOK_rshift      shift and go to state 139


state 184

    (51) relational_expression -> relational_expression TOK_greater shift_expression .
    (56) shift_expression -> shift_expression . TOK_lshift additive_expression
    (57) shift_expression -> shift_expression . TOK_rshift additive_expression

    TOK_greater     reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_lesser      reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_geq         reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_leq         reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_equal       reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_nequal      reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_and_bitwise reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_xor         reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_or_bitwise  reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_and         reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_or          reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_pararight   reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_semi        reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_comma       reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_rsqb        reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_until        reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_to           reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_by           reduce using rule 51 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_lshift      shift and go to state 140
    TOK_rshift      shift and go to state 139


state 185

    (62) multiplicative_expression -> multiplicative_expression TOK_times unary_expression .

    TOK_times       reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_divide      reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_modulus     reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_plus        reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_minus       reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_lshift      reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_rshift      reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_greater     reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_lesser      reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_geq         reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_leq         reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_equal       reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_nequal      reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_and_bitwise reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_xor         reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_or_bitwise  reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_and         reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_or          reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_semi        reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_comma       reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_pararight   reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_rsqb        reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_until        reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_to           reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_by           reduce using rule 62 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)


state 186

    (63) multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .

    TOK_times       reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_divide      reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_modulus     reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_plus        reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_minus       reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_lshift      reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_rshift      reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_greater     reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_lesser      reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_geq         reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_leq         reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_equal       reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_nequal      reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_and_bitwise reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_xor         reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_or_bitwise  reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_and         reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_or          reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_semi        reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_comma       reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_pararight   reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_rsqb        reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_until        reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_to           reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_by           reduce using rule 63 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)


state 187

    (64) multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .

    TOK_times       reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_divide      reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_modulus     reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_plus        reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_minus       reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_lshift      reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_rshift      reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_greater     reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_lesser      reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_geq         reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_leq         reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_equal       reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_nequal      reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_and_bitwise reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_xor         reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_or_bitwise  reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_and         reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_or          reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_semi        reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_comma       reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_pararight   reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_rsqb        reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_until        reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_to           reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_by           reduce using rule 64 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)


state 188

    (57) shift_expression -> shift_expression TOK_rshift additive_expression .
    (59) additive_expression -> additive_expression . TOK_plus multiplicative_expression
    (60) additive_expression -> additive_expression . TOK_minus multiplicative_expression

    TOK_lshift      reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_rshift      reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_greater     reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_lesser      reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_geq         reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_leq         reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_equal       reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_nequal      reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_and_bitwise reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_xor         reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_or_bitwise  reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_and         reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_or          reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_pararight   reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_semi        reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_comma       reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_rsqb        reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_until        reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_to           reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_by           reduce using rule 57 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_plus        shift and go to state 124
    TOK_minus       shift and go to state 123


state 189

    (56) shift_expression -> shift_expression TOK_lshift additive_expression .
    (59) additive_expression -> additive_expression . TOK_plus multiplicative_expression
    (60) additive_expression -> additive_expression . TOK_minus multiplicative_expression

    TOK_lshift      reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_rshift      reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_greater     reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_lesser      reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_geq         reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_leq         reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_equal       reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_nequal      reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_and_bitwise reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_xor         reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_or_bitwise  reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_and         reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_or          reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_pararight   reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_semi        reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_comma       reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_rsqb        reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_until        reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_to           reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_by           reduce using rule 56 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_plus        shift and go to state 124
    TOK_minus       shift and go to state 123


state 190

    (48) equality_expression -> equality_expression TOK_equal relational_expression .
    (51) relational_expression -> relational_expression . TOK_greater shift_expression
    (52) relational_expression -> relational_expression . TOK_lesser shift_expression
    (53) relational_expression -> relational_expression . TOK_geq shift_expression
    (54) relational_expression -> relational_expression . TOK_leq shift_expression

    TOK_equal       reduce using rule 48 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_nequal      reduce using rule 48 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_and_bitwise reduce using rule 48 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_xor         reduce using rule 48 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_or_bitwise  reduce using rule 48 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_and         reduce using rule 48 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_or          reduce using rule 48 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_semi        reduce using rule 48 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_comma       reduce using rule 48 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_pararight   reduce using rule 48 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_rsqb        reduce using rule 48 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_until        reduce using rule 48 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_to           reduce using rule 48 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_by           reduce using rule 48 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_greater     shift and go to state 130
    TOK_lesser      shift and go to state 128
    TOK_geq         shift and go to state 127
    TOK_leq         shift and go to state 129


state 191

    (49) equality_expression -> equality_expression TOK_nequal relational_expression .
    (51) relational_expression -> relational_expression . TOK_greater shift_expression
    (52) relational_expression -> relational_expression . TOK_lesser shift_expression
    (53) relational_expression -> relational_expression . TOK_geq shift_expression
    (54) relational_expression -> relational_expression . TOK_leq shift_expression

    TOK_equal       reduce using rule 49 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_nequal      reduce using rule 49 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_and_bitwise reduce using rule 49 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_xor         reduce using rule 49 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_or_bitwise  reduce using rule 49 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_and         reduce using rule 49 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_or          reduce using rule 49 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_semi        reduce using rule 49 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_comma       reduce using rule 49 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_pararight   reduce using rule 49 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_rsqb        reduce using rule 49 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_until        reduce using rule 49 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_to           reduce using rule 49 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_by           reduce using rule 49 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_greater     shift and go to state 130
    TOK_lesser      shift and go to state 128
    TOK_geq         shift and go to state 127
    TOK_leq         shift and go to state 129


state 192

    (71) base_variable_set -> TOK_paraleft expression TOK_pararight .

    TOK_times       reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_divide      reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_modulus     reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_plus        reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_minus       reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_lshift      reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_rshift      reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_greater     reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_lesser      reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_geq         reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_leq         reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_equal       reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_nequal      reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_and_bitwise reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_xor         reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_or_bitwise  reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_and         reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_or          reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_semi        reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_comma       reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_pararight   reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_rsqb        reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_until        reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_to           reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_by           reduce using rule 71 (base_variable_set -> TOK_paraleft expression TOK_pararight .)


state 193

    (40) conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .
    (42) inclusive_or_expression -> inclusive_or_expression . TOK_or_bitwise exclusive_or_expression

    TOK_and         reduce using rule 40 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    TOK_or          reduce using rule 40 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    TOK_rsqb        reduce using rule 40 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    TOK_semi        reduce using rule 40 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    TOK_comma       reduce using rule 40 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    TOK_pararight   reduce using rule 40 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_until        reduce using rule 40 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_to           reduce using rule 40 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_by           reduce using rule 40 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    TOK_or_bitwise  shift and go to state 122


state 194

    (126) while_statement -> KW_while TOK_paraleft expression TOK_pararight . statement
    (109) statement -> . normal_statement
    (110) statement -> . if_then_statement
    (111) statement -> . if_then_else_statement
    (112) statement -> . while_statement
    (113) statement -> . for_statement
    (114) normal_statement -> . block
    (115) normal_statement -> . expression_statement
    (116) normal_statement -> . empty_statement
    (117) normal_statement -> . return_statement
    (121) if_then_statement -> . KW_if TOK_paraleft expression TOK_pararight statement
    (122) if_then_else_statement -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (126) while_statement -> . KW_while TOK_paraleft expression TOK_pararight statement
    (127) for_statement -> . KW_for TOK_paraleft for_update TOK_pararight statement
    (7) block -> . TOK_lcurly block_stats_star TOK_rcurly
    (118) expression_statement -> . statement_expression TOK_semi
    (134) empty_statement -> . TOK_semi
    (135) return_statement -> . KW_return expression_question TOK_semi
    (119) statement_expression -> . assignment
    (120) statement_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name

    KW_if           shift and go to state 31
    KW_while        shift and go to state 45
    KW_for          shift and go to state 25
    TOK_lcurly      shift and go to state 9
    TOK_semi        shift and go to state 41
    KW_return       shift and go to state 42
    TOK_identifier  shift and go to state 22

    expression_statement           shift and go to state 11
    normal_statement               shift and go to state 13
    if_then_statement              shift and go to state 18
    left_hand_side                 shift and go to state 19
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    return_statement               shift and go to state 26
    while_statement                shift and go to state 27
    statement                      shift and go to state 212
    statement_expression           shift and go to state 30
    method_invocation              shift and go to state 36
    for_statement                  shift and go to state 33
    assignment                     shift and go to state 35
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    empty_statement                shift and go to state 40
    block                          shift and go to state 46
    if_then_else_statement         shift and go to state 47

state 195

    (96) variable_declaration_body -> TOK_identifier type_question TOK_assignment variable_declaration_initializer .

    TOK_semi        reduce using rule 96 (variable_declaration_body -> TOK_identifier type_question TOK_assignment variable_declaration_initializer .)


state 196

    (108) array_initializer -> KW_new . KW_array TOK_lsqb type TOK_rsqb TOK_paraleft TOK_int TOK_pararight

    KW_array        shift and go to state 213


state 197

    (95) variable_declaration_initializer -> array_initializer .

    TOK_semi        reduce using rule 95 (variable_declaration_initializer -> array_initializer .)


state 198

    (94) variable_declaration_initializer -> expression .

    TOK_semi        reduce using rule 94 (variable_declaration_initializer -> expression .)


state 199

    (107) array_data_type -> KW_array TOK_lsqb . type TOK_rsqb
    (98) type -> . primitive_type
    (99) type -> . reference_type
    (100) primitive_type -> . KW_int
    (101) primitive_type -> . KW_double
    (102) primitive_type -> . KW_char
    (103) primitive_type -> . KW_string
    (104) primitive_type -> . KW_boolean
    (105) primitive_type -> . KW_void
    (106) reference_type -> . array_data_type
    (107) array_data_type -> . KW_array TOK_lsqb type TOK_rsqb

    KW_int          shift and go to state 154
    KW_double       shift and go to state 151
    KW_char         shift and go to state 149
    KW_string       shift and go to state 159
    KW_boolean      shift and go to state 153
    KW_void         shift and go to state 150
    KW_array        shift and go to state 156

    primitive_type                 shift and go to state 155
    reference_type                 shift and go to state 152
    type                           shift and go to state 214
    array_data_type                shift and go to state 158

state 200

    (89) argument_list -> argument_list TOK_comma expression .

    TOK_comma       reduce using rule 89 (argument_list -> argument_list TOK_comma expression .)
    TOK_pararight   reduce using rule 89 (argument_list -> argument_list TOK_comma expression .)


state 201

    (132) for_step_opts -> KW_by expression .

    TOK_pararight   reduce using rule 132 (for_step_opts -> KW_by expression .)


state 202

    (127) for_statement -> KW_for TOK_paraleft for_update TOK_pararight statement .

    KW_if           reduce using rule 127 (for_statement -> KW_for TOK_paraleft for_update TOK_pararight statement .)
    KW_while        reduce using rule 127 (for_statement -> KW_for TOK_paraleft for_update TOK_pararight statement .)
    KW_for          reduce using rule 127 (for_statement -> KW_for TOK_paraleft for_update TOK_pararight statement .)
    KW_def          reduce using rule 127 (for_statement -> KW_for TOK_paraleft for_update TOK_pararight statement .)
    KW_var          reduce using rule 127 (for_statement -> KW_for TOK_paraleft for_update TOK_pararight statement .)
    KW_val          reduce using rule 127 (for_statement -> KW_for TOK_paraleft for_update TOK_pararight statement .)
    TOK_lcurly      reduce using rule 127 (for_statement -> KW_for TOK_paraleft for_update TOK_pararight statement .)
    TOK_semi        reduce using rule 127 (for_statement -> KW_for TOK_paraleft for_update TOK_pararight statement .)
    KW_return       reduce using rule 127 (for_statement -> KW_for TOK_paraleft for_update TOK_pararight statement .)
    KW_obj          reduce using rule 127 (for_statement -> KW_for TOK_paraleft for_update TOK_pararight statement .)
    TOK_identifier  reduce using rule 127 (for_statement -> KW_for TOK_paraleft for_update TOK_pararight statement .)
    TOK_rcurly      reduce using rule 127 (for_statement -> KW_for TOK_paraleft for_update TOK_pararight statement .)


state 203

    (129) for_loop -> TOK_identifier TOK_choose expression . for_untilTo expression
    (130) for_untilTo -> . KW_until
    (131) for_untilTo -> . KW_to

    KW_until        shift and go to state 216
    KW_to           shift and go to state 217

    for_untilTo                    shift and go to state 215

state 204

    (143) fun_params -> fun_params TOK_comma . fun_param
    (144) fun_param -> . variable_declarator_id
    (97) variable_declarator_id -> . TOK_identifier TOK_colon type

    TOK_identifier  shift and go to state 172

    fun_param                      shift and go to state 218
    variable_declarator_id         shift and go to state 168

state 205

    (138) method_header -> KW_def name TOK_paraleft fun_params_question TOK_pararight . type_question TOK_assignment
    (139) method_header -> KW_def name TOK_paraleft fun_params_question TOK_pararight .
    (136) type_question -> . TOK_colon type

    TOK_lcurly      reduce using rule 139 (method_header -> KW_def name TOK_paraleft fun_params_question TOK_pararight .)
    TOK_colon       shift and go to state 108

    type_question                  shift and go to state 219

state 206

    (97) variable_declarator_id -> TOK_identifier TOK_colon . type
    (98) type -> . primitive_type
    (99) type -> . reference_type
    (100) primitive_type -> . KW_int
    (101) primitive_type -> . KW_double
    (102) primitive_type -> . KW_char
    (103) primitive_type -> . KW_string
    (104) primitive_type -> . KW_boolean
    (105) primitive_type -> . KW_void
    (106) reference_type -> . array_data_type
    (107) array_data_type -> . KW_array TOK_lsqb type TOK_rsqb

    KW_int          shift and go to state 154
    KW_double       shift and go to state 151
    KW_char         shift and go to state 149
    KW_string       shift and go to state 159
    KW_boolean      shift and go to state 153
    KW_void         shift and go to state 150
    KW_array        shift and go to state 156

    primitive_type                 shift and go to state 155
    reference_type                 shift and go to state 152
    type                           shift and go to state 220
    array_data_type                shift and go to state 158

state 207

    (125) if_then_else_intermediate -> if_then_else_statement_precedence .

    KW_else         reduce using rule 125 (if_then_else_intermediate -> if_then_else_statement_precedence .)


state 208

    (109) statement -> normal_statement .
    (124) if_then_else_intermediate -> normal_statement .

    KW_if           reduce using rule 109 (statement -> normal_statement .)
    KW_while        reduce using rule 109 (statement -> normal_statement .)
    KW_for          reduce using rule 109 (statement -> normal_statement .)
    KW_def          reduce using rule 109 (statement -> normal_statement .)
    KW_var          reduce using rule 109 (statement -> normal_statement .)
    KW_val          reduce using rule 109 (statement -> normal_statement .)
    TOK_lcurly      reduce using rule 109 (statement -> normal_statement .)
    TOK_semi        reduce using rule 109 (statement -> normal_statement .)
    KW_return       reduce using rule 109 (statement -> normal_statement .)
    KW_obj          reduce using rule 109 (statement -> normal_statement .)
    TOK_identifier  reduce using rule 109 (statement -> normal_statement .)
    TOK_rcurly      reduce using rule 109 (statement -> normal_statement .)
    KW_else         reduce using rule 124 (if_then_else_intermediate -> normal_statement .)


state 209

    (122) if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate . KW_else statement

    KW_else         shift and go to state 221


state 210

    (121) if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .

    KW_if           reduce using rule 121 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    KW_while        reduce using rule 121 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    KW_for          reduce using rule 121 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    KW_def          reduce using rule 121 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    KW_var          reduce using rule 121 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    KW_val          reduce using rule 121 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    TOK_lcurly      reduce using rule 121 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    TOK_semi        reduce using rule 121 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    KW_return       reduce using rule 121 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    KW_obj          reduce using rule 121 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    TOK_identifier  reduce using rule 121 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    TOK_rcurly      reduce using rule 121 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)


state 211

    (121) if_then_statement -> KW_if . TOK_paraleft expression TOK_pararight statement
    (122) if_then_else_statement -> KW_if . TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (123) if_then_else_statement_precedence -> KW_if . TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate

    TOK_paraleft    shift and go to state 222


state 212

    (126) while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .

    KW_if           reduce using rule 126 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    KW_while        reduce using rule 126 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    KW_for          reduce using rule 126 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    KW_def          reduce using rule 126 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    KW_var          reduce using rule 126 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    KW_val          reduce using rule 126 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    TOK_lcurly      reduce using rule 126 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    TOK_semi        reduce using rule 126 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    KW_return       reduce using rule 126 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    KW_obj          reduce using rule 126 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    TOK_identifier  reduce using rule 126 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    TOK_rcurly      reduce using rule 126 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)


state 213

    (108) array_initializer -> KW_new KW_array . TOK_lsqb type TOK_rsqb TOK_paraleft TOK_int TOK_pararight

    TOK_lsqb        shift and go to state 223


state 214

    (107) array_data_type -> KW_array TOK_lsqb type . TOK_rsqb

    TOK_rsqb        shift and go to state 224


state 215

    (129) for_loop -> TOK_identifier TOK_choose expression for_untilTo . expression
    (18) expression -> . assignment_expression
    (19) assignment_expression -> . assignment
    (20) assignment_expression -> . conditional_or_expression
    (21) assignment_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (37) conditional_or_expression -> . conditional_and_expression
    (38) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (39) conditional_and_expression -> . inclusive_or_expression
    (40) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (41) inclusive_or_expression -> . exclusive_or_expression
    (42) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (43) exclusive_or_expression -> . and_expression
    (44) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_identifier  shift and go to state 22
    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    and_expression                 shift and go to state 79
    exclusive_or_expression        shift and go to state 69
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 72
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    additive_expression            shift and go to state 77
    c_literal                      shift and go to state 73
    unary_expression               shift and go to state 68
    base_variable_set              shift and go to state 74
    inclusive_or_expression        shift and go to state 75
    literal                        shift and go to state 78
    relational_expression          shift and go to state 83
    method_invocation              shift and go to state 80
    conditional_or_expression      shift and go to state 81
    assignment_expression          shift and go to state 86
    assignment                     shift and go to state 87
    multiplicative_expression      shift and go to state 88
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 94
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    conditional_and_expression     shift and go to state 103
    expression                     shift and go to state 225

state 216

    (130) for_untilTo -> KW_until .

    TOK_identifier  reduce using rule 130 (for_untilTo -> KW_until .)
    TOK_plus        reduce using rule 130 (for_untilTo -> KW_until .)
    TOK_minus       reduce using rule 130 (for_untilTo -> KW_until .)
    TOK_not         reduce using rule 130 (for_untilTo -> KW_until .)
    TOK_paraleft    reduce using rule 130 (for_untilTo -> KW_until .)
    TOK_float       reduce using rule 130 (for_untilTo -> KW_until .)
    TOK_int         reduce using rule 130 (for_untilTo -> KW_until .)
    TOK_string      reduce using rule 130 (for_untilTo -> KW_until .)
    KW_true         reduce using rule 130 (for_untilTo -> KW_until .)
    KW_false        reduce using rule 130 (for_untilTo -> KW_until .)
    KW_null         reduce using rule 130 (for_untilTo -> KW_until .)
    TOK_char        reduce using rule 130 (for_untilTo -> KW_until .)


state 217

    (131) for_untilTo -> KW_to .

    TOK_identifier  reduce using rule 131 (for_untilTo -> KW_to .)
    TOK_plus        reduce using rule 131 (for_untilTo -> KW_to .)
    TOK_minus       reduce using rule 131 (for_untilTo -> KW_to .)
    TOK_not         reduce using rule 131 (for_untilTo -> KW_to .)
    TOK_paraleft    reduce using rule 131 (for_untilTo -> KW_to .)
    TOK_float       reduce using rule 131 (for_untilTo -> KW_to .)
    TOK_int         reduce using rule 131 (for_untilTo -> KW_to .)
    TOK_string      reduce using rule 131 (for_untilTo -> KW_to .)
    KW_true         reduce using rule 131 (for_untilTo -> KW_to .)
    KW_false        reduce using rule 131 (for_untilTo -> KW_to .)
    KW_null         reduce using rule 131 (for_untilTo -> KW_to .)
    TOK_char        reduce using rule 131 (for_untilTo -> KW_to .)


state 218

    (143) fun_params -> fun_params TOK_comma fun_param .

    TOK_comma       reduce using rule 143 (fun_params -> fun_params TOK_comma fun_param .)
    TOK_pararight   reduce using rule 143 (fun_params -> fun_params TOK_comma fun_param .)


state 219

    (138) method_header -> KW_def name TOK_paraleft fun_params_question TOK_pararight type_question . TOK_assignment

    TOK_assignment  shift and go to state 226


state 220

    (97) variable_declarator_id -> TOK_identifier TOK_colon type .

    TOK_comma       reduce using rule 97 (variable_declarator_id -> TOK_identifier TOK_colon type .)
    TOK_pararight   reduce using rule 97 (variable_declarator_id -> TOK_identifier TOK_colon type .)


state 221

    (122) if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else . statement
    (109) statement -> . normal_statement
    (110) statement -> . if_then_statement
    (111) statement -> . if_then_else_statement
    (112) statement -> . while_statement
    (113) statement -> . for_statement
    (114) normal_statement -> . block
    (115) normal_statement -> . expression_statement
    (116) normal_statement -> . empty_statement
    (117) normal_statement -> . return_statement
    (121) if_then_statement -> . KW_if TOK_paraleft expression TOK_pararight statement
    (122) if_then_else_statement -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (126) while_statement -> . KW_while TOK_paraleft expression TOK_pararight statement
    (127) for_statement -> . KW_for TOK_paraleft for_update TOK_pararight statement
    (7) block -> . TOK_lcurly block_stats_star TOK_rcurly
    (118) expression_statement -> . statement_expression TOK_semi
    (134) empty_statement -> . TOK_semi
    (135) return_statement -> . KW_return expression_question TOK_semi
    (119) statement_expression -> . assignment
    (120) statement_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name

    KW_if           shift and go to state 31
    KW_while        shift and go to state 45
    KW_for          shift and go to state 25
    TOK_lcurly      shift and go to state 9
    TOK_semi        shift and go to state 41
    KW_return       shift and go to state 42
    TOK_identifier  shift and go to state 22

    expression_statement           shift and go to state 11
    normal_statement               shift and go to state 13
    if_then_statement              shift and go to state 18
    left_hand_side                 shift and go to state 19
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    return_statement               shift and go to state 26
    while_statement                shift and go to state 27
    statement                      shift and go to state 227
    statement_expression           shift and go to state 30
    method_invocation              shift and go to state 36
    for_statement                  shift and go to state 33
    assignment                     shift and go to state 35
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    empty_statement                shift and go to state 40
    block                          shift and go to state 46
    if_then_else_statement         shift and go to state 47

state 222

    (121) if_then_statement -> KW_if TOK_paraleft . expression TOK_pararight statement
    (122) if_then_else_statement -> KW_if TOK_paraleft . expression TOK_pararight if_then_else_intermediate KW_else statement
    (123) if_then_else_statement_precedence -> KW_if TOK_paraleft . expression TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate
    (18) expression -> . assignment_expression
    (19) assignment_expression -> . assignment
    (20) assignment_expression -> . conditional_or_expression
    (21) assignment_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (37) conditional_or_expression -> . conditional_and_expression
    (38) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (39) conditional_and_expression -> . inclusive_or_expression
    (40) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (41) inclusive_or_expression -> . exclusive_or_expression
    (42) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name
    (43) exclusive_or_expression -> . and_expression
    (44) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (45) and_expression -> . equality_expression
    (46) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (47) equality_expression -> . relational_expression
    (48) equality_expression -> . equality_expression TOK_equal relational_expression
    (49) equality_expression -> . equality_expression TOK_nequal relational_expression
    (50) relational_expression -> . shift_expression
    (51) relational_expression -> . relational_expression TOK_greater shift_expression
    (52) relational_expression -> . relational_expression TOK_lesser shift_expression
    (53) relational_expression -> . relational_expression TOK_geq shift_expression
    (54) relational_expression -> . relational_expression TOK_leq shift_expression
    (55) shift_expression -> . additive_expression
    (56) shift_expression -> . shift_expression TOK_lshift additive_expression
    (57) shift_expression -> . shift_expression TOK_rshift additive_expression
    (58) additive_expression -> . multiplicative_expression
    (59) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (60) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (61) multiplicative_expression -> . unary_expression
    (62) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (63) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (64) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (65) unary_expression -> . TOK_plus unary_expression
    (66) unary_expression -> . TOK_minus unary_expression
    (67) unary_expression -> . unary_expression_not_plus_minus
    (68) unary_expression_not_plus_minus -> . base_variable_set
    (69) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (70) base_variable_set -> . variable_literal
    (71) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (72) variable_literal -> . left_hand_side
    (73) variable_literal -> . primary
    (74) primary -> . literal
    (75) primary -> . method_invocation
    (76) literal -> . int_float
    (77) literal -> . c_literal
    (83) int_float -> . TOK_float
    (84) int_float -> . TOK_int
    (78) c_literal -> . TOK_string
    (79) c_literal -> . KW_true
    (80) c_literal -> . KW_false
    (81) c_literal -> . KW_null
    (82) c_literal -> . TOK_char

    TOK_identifier  shift and go to state 22
    TOK_plus        shift and go to state 90
    TOK_minus       shift and go to state 99
    TOK_not         shift and go to state 85
    TOK_paraleft    shift and go to state 98
    TOK_float       shift and go to state 89
    TOK_int         shift and go to state 101
    TOK_string      shift and go to state 84
    KW_true         shift and go to state 100
    KW_false        shift and go to state 92
    KW_null         shift and go to state 76
    TOK_char        shift and go to state 91

    unary_expression               shift and go to state 68
    exclusive_or_expression        shift and go to state 69
    primary                        shift and go to state 70
    unary_expression_not_plus_minus shift and go to state 71
    left_hand_side                 shift and go to state 72
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    and_expression                 shift and go to state 79
    c_literal                      shift and go to state 73
    base_variable_set              shift and go to state 74
    inclusive_or_expression        shift and go to state 75
    literal                        shift and go to state 78
    relational_expression          shift and go to state 83
    method_invocation              shift and go to state 80
    conditional_or_expression      shift and go to state 81
    assignment_expression          shift and go to state 86
    assignment                     shift and go to state 87
    multiplicative_expression      shift and go to state 88
    additive_expression            shift and go to state 77
    shift_expression               shift and go to state 93
    equality_expression            shift and go to state 94
    int_float                      shift and go to state 95
    variable_literal               shift and go to state 97
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    conditional_and_expression     shift and go to state 103
    expression                     shift and go to state 228

state 223

    (108) array_initializer -> KW_new KW_array TOK_lsqb . type TOK_rsqb TOK_paraleft TOK_int TOK_pararight
    (98) type -> . primitive_type
    (99) type -> . reference_type
    (100) primitive_type -> . KW_int
    (101) primitive_type -> . KW_double
    (102) primitive_type -> . KW_char
    (103) primitive_type -> . KW_string
    (104) primitive_type -> . KW_boolean
    (105) primitive_type -> . KW_void
    (106) reference_type -> . array_data_type
    (107) array_data_type -> . KW_array TOK_lsqb type TOK_rsqb

    KW_int          shift and go to state 154
    KW_double       shift and go to state 151
    KW_char         shift and go to state 149
    KW_string       shift and go to state 159
    KW_boolean      shift and go to state 153
    KW_void         shift and go to state 150
    KW_array        shift and go to state 156

    primitive_type                 shift and go to state 155
    reference_type                 shift and go to state 152
    type                           shift and go to state 229
    array_data_type                shift and go to state 158

state 224

    (107) array_data_type -> KW_array TOK_lsqb type TOK_rsqb .

    TOK_assignment  reduce using rule 107 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    TOK_comma       reduce using rule 107 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    TOK_pararight   reduce using rule 107 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    TOK_rsqb        reduce using rule 107 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)


state 225

    (129) for_loop -> TOK_identifier TOK_choose expression for_untilTo expression .

    KW_by           reduce using rule 129 (for_loop -> TOK_identifier TOK_choose expression for_untilTo expression .)
    TOK_pararight   reduce using rule 129 (for_loop -> TOK_identifier TOK_choose expression for_untilTo expression .)


state 226

    (138) method_header -> KW_def name TOK_paraleft fun_params_question TOK_pararight type_question TOK_assignment .

    TOK_lcurly      reduce using rule 138 (method_header -> KW_def name TOK_paraleft fun_params_question TOK_pararight type_question TOK_assignment .)


state 227

    (122) if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .

    KW_if           reduce using rule 122 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    KW_while        reduce using rule 122 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    KW_for          reduce using rule 122 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    KW_def          reduce using rule 122 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    KW_var          reduce using rule 122 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    KW_val          reduce using rule 122 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    TOK_lcurly      reduce using rule 122 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    TOK_semi        reduce using rule 122 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    KW_return       reduce using rule 122 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    KW_obj          reduce using rule 122 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    TOK_identifier  reduce using rule 122 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    TOK_rcurly      reduce using rule 122 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)


state 228

    (121) if_then_statement -> KW_if TOK_paraleft expression . TOK_pararight statement
    (122) if_then_else_statement -> KW_if TOK_paraleft expression . TOK_pararight if_then_else_intermediate KW_else statement
    (123) if_then_else_statement_precedence -> KW_if TOK_paraleft expression . TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate

    TOK_pararight   shift and go to state 230


state 229

    (108) array_initializer -> KW_new KW_array TOK_lsqb type . TOK_rsqb TOK_paraleft TOK_int TOK_pararight

    TOK_rsqb        shift and go to state 231


state 230

    (121) if_then_statement -> KW_if TOK_paraleft expression TOK_pararight . statement
    (122) if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight . if_then_else_intermediate KW_else statement
    (123) if_then_else_statement_precedence -> KW_if TOK_paraleft expression TOK_pararight . if_then_else_intermediate KW_else if_then_else_intermediate
    (109) statement -> . normal_statement
    (110) statement -> . if_then_statement
    (111) statement -> . if_then_else_statement
    (112) statement -> . while_statement
    (113) statement -> . for_statement
    (124) if_then_else_intermediate -> . normal_statement
    (125) if_then_else_intermediate -> . if_then_else_statement_precedence
    (114) normal_statement -> . block
    (115) normal_statement -> . expression_statement
    (116) normal_statement -> . empty_statement
    (117) normal_statement -> . return_statement
    (121) if_then_statement -> . KW_if TOK_paraleft expression TOK_pararight statement
    (122) if_then_else_statement -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (126) while_statement -> . KW_while TOK_paraleft expression TOK_pararight statement
    (127) for_statement -> . KW_for TOK_paraleft for_update TOK_pararight statement
    (123) if_then_else_statement_precedence -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate
    (7) block -> . TOK_lcurly block_stats_star TOK_rcurly
    (118) expression_statement -> . statement_expression TOK_semi
    (134) empty_statement -> . TOK_semi
    (135) return_statement -> . KW_return expression_question TOK_semi
    (119) statement_expression -> . assignment
    (120) statement_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name

    KW_if           shift and go to state 211
    KW_while        shift and go to state 45
    KW_for          shift and go to state 25
    TOK_lcurly      shift and go to state 9
    TOK_semi        shift and go to state 41
    KW_return       shift and go to state 42
    TOK_identifier  shift and go to state 22

    expression_statement           shift and go to state 11
    if_then_else_statement_precedence shift and go to state 207
    normal_statement               shift and go to state 208
    if_then_else_intermediate      shift and go to state 232
    if_then_statement              shift and go to state 18
    left_hand_side                 shift and go to state 19
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    return_statement               shift and go to state 26
    while_statement                shift and go to state 27
    statement                      shift and go to state 210
    statement_expression           shift and go to state 30
    method_invocation              shift and go to state 36
    for_statement                  shift and go to state 33
    assignment                     shift and go to state 35
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    empty_statement                shift and go to state 40
    block                          shift and go to state 46
    if_then_else_statement         shift and go to state 47

state 231

    (108) array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb . TOK_paraleft TOK_int TOK_pararight

    TOK_paraleft    shift and go to state 233


state 232

    (122) if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate . KW_else statement
    (123) if_then_else_statement_precedence -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate . KW_else if_then_else_intermediate

    KW_else         shift and go to state 234


state 233

    (108) array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft . TOK_int TOK_pararight

    TOK_int         shift and go to state 235


state 234

    (122) if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else . statement
    (123) if_then_else_statement_precedence -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else . if_then_else_intermediate
    (109) statement -> . normal_statement
    (110) statement -> . if_then_statement
    (111) statement -> . if_then_else_statement
    (112) statement -> . while_statement
    (113) statement -> . for_statement
    (124) if_then_else_intermediate -> . normal_statement
    (125) if_then_else_intermediate -> . if_then_else_statement_precedence
    (114) normal_statement -> . block
    (115) normal_statement -> . expression_statement
    (116) normal_statement -> . empty_statement
    (117) normal_statement -> . return_statement
    (121) if_then_statement -> . KW_if TOK_paraleft expression TOK_pararight statement
    (122) if_then_else_statement -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (126) while_statement -> . KW_while TOK_paraleft expression TOK_pararight statement
    (127) for_statement -> . KW_for TOK_paraleft for_update TOK_pararight statement
    (123) if_then_else_statement_precedence -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate
    (7) block -> . TOK_lcurly block_stats_star TOK_rcurly
    (118) expression_statement -> . statement_expression TOK_semi
    (134) empty_statement -> . TOK_semi
    (135) return_statement -> . KW_return expression_question TOK_semi
    (119) statement_expression -> . assignment
    (120) statement_expression -> . method_invocation
    (22) assignment -> . left_hand_side assignment_operator assignment_expression
    (85) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (23) left_hand_side -> . id
    (24) left_hand_side -> . array_access
    (25) id -> . name
    (26) id -> . qualified_id
    (29) array_access -> . id dimension
    (28) name -> . TOK_identifier
    (27) qualified_id -> . name TOK_dot name

    KW_if           shift and go to state 211
    KW_while        shift and go to state 45
    KW_for          shift and go to state 25
    TOK_lcurly      shift and go to state 9
    TOK_semi        shift and go to state 41
    KW_return       shift and go to state 42
    TOK_identifier  shift and go to state 22

    expression_statement           shift and go to state 11
    if_then_else_statement_precedence shift and go to state 207
    normal_statement               shift and go to state 208
    if_then_else_intermediate      shift and go to state 236
    if_then_statement              shift and go to state 18
    left_hand_side                 shift and go to state 19
    array_access                   shift and go to state 20
    id                             shift and go to state 21
    return_statement               shift and go to state 26
    while_statement                shift and go to state 27
    statement                      shift and go to state 227
    statement_expression           shift and go to state 30
    method_invocation              shift and go to state 36
    for_statement                  shift and go to state 33
    assignment                     shift and go to state 35
    name                           shift and go to state 37
    qualified_id                   shift and go to state 38
    empty_statement                shift and go to state 40
    block                          shift and go to state 46
    if_then_else_statement         shift and go to state 47

state 235

    (108) array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft TOK_int . TOK_pararight

    TOK_pararight   shift and go to state 237


state 236

    (123) if_then_else_statement_precedence -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate .

    KW_else         reduce using rule 123 (if_then_else_statement_precedence -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate .)


state 237

    (108) array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft TOK_int TOK_pararight .

    TOK_semi        reduce using rule 108 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft TOK_int TOK_pararight .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 80 resolved using rule (assignment_expression -> method_invocation)
WARNING: rejected rule (primary -> method_invocation) in state 80
