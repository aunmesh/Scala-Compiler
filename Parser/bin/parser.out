Created by PLY version 3.7 (http://www.dabeaz.com/ply)

Unused terminals:

    KW_case
    KW_yield
    KW_lazy
    KW_with
    KW_do
    KW_sealed
    KW_final
    KW_Try
    KW_forSome
    TOK_at
    TOK_ignore
    KW_implicit
    KW_abstract
    TOK_nl
    TOK_long
    KW_this
    KW_catch
    KW_type
    KW_finally
    KW_super
    KW_throw
    KW_match
    KW_or
    TOK_eq_gt
    TOK_hash
    KW_trait
    KW_import
    KW_package
    TOK_error
    TOK_cmnt

Grammar

Rule 0     S' -> compilation_unit
Rule 1     compilation_unit -> class_and_obj_declarations
Rule 2     class_and_obj_declarations -> class_and_obj_declaration
Rule 3     class_and_obj_declarations -> class_and_obj_declarations class_and_obj_declaration
Rule 4     class_and_obj_declaration -> singleton_object
Rule 5     class_and_obj_declaration -> class_declaration
Rule 6     singleton_object -> object_declaration block
Rule 7     object_declaration -> KW_obj TOK_identifier
Rule 8     block -> TOK_lcurly block_stats_star TOK_rcurly
Rule 9     block_stats_star -> block_stats
Rule 10    block_stats_star -> empty
Rule 11    block_stats -> block_stat
Rule 12    block_stats -> block_stats block_stat
Rule 13    block_stat -> local_variable_declaration_statement
Rule 14    block_stat -> statement
Rule 15    block_stat -> class_and_obj_declaration
Rule 16    block_stat -> method_declaration
Rule 17    expression_question -> expression
Rule 18    expression_question -> empty
Rule 19    expression -> assignment_expression
Rule 20    assignment_expression -> assignment
Rule 21    assignment_expression -> conditional_or_expression
Rule 22    assignment_expression -> if_else_expression
Rule 23    if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
Rule 24    assignment -> left_hand_side assignment_operator assignment_expression
Rule 25    left_hand_side -> id
Rule 26    left_hand_side -> array_access
Rule 27    id -> name
Rule 28    id -> qualified_id
Rule 29    qualified_id -> name TOK_dot name
Rule 30    name -> TOK_identifier
Rule 31    array_access -> id dimension
Rule 32    dimension -> dimension TOK_lsqb expression TOK_rsqb
Rule 33    dimension -> TOK_lsqb expression TOK_rsqb
Rule 34    assignment_operator -> TOK_assignment
Rule 35    assignment_operator -> TOK_mulassign
Rule 36    assignment_operator -> TOK_divassign
Rule 37    assignment_operator -> TOK_modassign
Rule 38    assignment_operator -> TOK_addassign
Rule 39    assignment_operator -> TOK_subassign
Rule 40    conditional_or_expression -> conditional_and_expression
Rule 41    conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression
Rule 42    conditional_and_expression -> inclusive_or_expression
Rule 43    conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression
Rule 44    inclusive_or_expression -> exclusive_or_expression
Rule 45    inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression
Rule 46    exclusive_or_expression -> and_expression
Rule 47    exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression
Rule 48    and_expression -> equality_expression
Rule 49    and_expression -> and_expression TOK_and_bitwise equality_expression
Rule 50    equality_expression -> relational_expression
Rule 51    equality_expression -> equality_expression TOK_equal relational_expression
Rule 52    equality_expression -> equality_expression TOK_nequal relational_expression
Rule 53    relational_expression -> shift_expression
Rule 54    relational_expression -> relational_expression TOK_greater shift_expression
Rule 55    relational_expression -> relational_expression TOK_lesser shift_expression
Rule 56    relational_expression -> relational_expression TOK_geq shift_expression
Rule 57    relational_expression -> relational_expression TOK_leq shift_expression
Rule 58    shift_expression -> additive_expression
Rule 59    shift_expression -> shift_expression TOK_lshift additive_expression
Rule 60    shift_expression -> shift_expression TOK_rshift additive_expression
Rule 61    additive_expression -> multiplicative_expression
Rule 62    additive_expression -> additive_expression TOK_plus multiplicative_expression
Rule 63    additive_expression -> additive_expression TOK_minus multiplicative_expression
Rule 64    multiplicative_expression -> unary_expression
Rule 65    multiplicative_expression -> multiplicative_expression TOK_times unary_expression
Rule 66    multiplicative_expression -> multiplicative_expression TOK_divide unary_expression
Rule 67    multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression
Rule 68    unary_expression -> TOK_plus unary_expression
Rule 69    unary_expression -> TOK_minus unary_expression
Rule 70    unary_expression -> unary_expression_not_plus_minus
Rule 71    unary_expression_not_plus_minus -> base_variable_set
Rule 72    unary_expression_not_plus_minus -> TOK_tilda unary_expression
Rule 73    unary_expression_not_plus_minus -> TOK_not unary_expression
Rule 74    unary_expression_not_plus_minus -> cast_expression
Rule 75    base_variable_set -> variable_literal
Rule 76    base_variable_set -> TOK_paraleft expression TOK_pararight
Rule 77    variable_literal -> left_hand_side
Rule 78    variable_literal -> primary
Rule 79    cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression
Rule 80    primary -> literal
Rule 81    primary -> method_invocation
Rule 82    literal -> int_float
Rule 83    literal -> c_literal
Rule 84    c_literal -> TOK_char
Rule 85    c_literal -> TOK_string
Rule 86    c_literal -> KW_true
Rule 87    c_literal -> KW_false
Rule 88    c_literal -> KW_null
Rule 89    int_float -> TOK_float
Rule 90    int_float -> TOK_int
Rule 91    method_invocation -> id TOK_paraleft argument_list_question TOK_pararight
Rule 92    argument_list -> expression
Rule 93    argument_list -> argument_list TOK_comma expression
Rule 94    argument_list_question -> argument_list
Rule 95    argument_list_question -> empty
Rule 96    modifier -> KW_protected
Rule 97    modifier -> KW_private
Rule 98    modifier_question -> modifier
Rule 99    modifier_question -> empty
Rule 100   declaration_keyword -> KW_var
Rule 101   declaration_keyword -> KW_val
Rule 102   local_variable_declaration_statement -> local_variable_declaration TOK_semi
Rule 103   local_variable_declaration -> modifier_question declaration_keyword variable_declaration_body
Rule 104   variable_declaration_initializer -> expression
Rule 105   variable_declaration_initializer -> array_initializer
Rule 106   variable_declaration_initializer -> class_initializer
Rule 107   variable_argument_list -> variable_declaration_initializer
Rule 108   variable_argument_list -> variable_argument_list TOK_comma variable_declaration_initializer
Rule 109   variable_declaration_body -> identifiers type_question TOK_assignment variable_declaration_initializer
Rule 110   variable_declaration_body -> TOK_paraleft variable_list TOK_pararight TOK_assignment TOK_paraleft variable_argument_list TOK_pararight
Rule 111   identifiers -> identifiers TOK_comma TOK_identifier
Rule 112   identifiers -> TOK_identifier
Rule 113   variable_list -> variable_dec
Rule 114   variable_list -> variable_list TOK_comma variable_dec
Rule 115   variable_dec -> TOK_identifier type_question
Rule 116   expr_question -> TOK_assignment variable_declaration_initializer
Rule 117   expr_question -> empty
Rule 118   variable_declarator_id -> TOK_identifier TOK_colon type
Rule 119   type -> primitive_type
Rule 120   type -> reference_type
Rule 121   primitive_type -> KW_int
Rule 122   primitive_type -> KW_double
Rule 123   primitive_type -> KW_char
Rule 124   primitive_type -> KW_string
Rule 125   primitive_type -> KW_boolean
Rule 126   primitive_type -> KW_void
Rule 127   reference_type -> class_data_type
Rule 128   reference_type -> array_data_type
Rule 129   class_data_type -> id
Rule 130   array_data_type -> KW_array TOK_lsqb type TOK_rsqb
Rule 131   array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight
Rule 132   array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight
Rule 133   array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight
Rule 134   array_initializer -> multidimensional_array_initializer
Rule 135   multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight
Rule 136   class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight
Rule 137   statement -> normal_statement
Rule 138   statement -> if_then_statement
Rule 139   statement -> if_then_else_statement
Rule 140   statement -> while_statement
Rule 141   statement -> for_statement
Rule 142   normal_statement -> block
Rule 143   normal_statement -> expression_statement
Rule 144   normal_statement -> empty_statement
Rule 145   normal_statement -> return_statement
Rule 146   expression_statement -> statement_expression TOK_semi
Rule 147   statement_expression -> assignment
Rule 148   statement_expression -> method_invocation
Rule 149   if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement
Rule 150   if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
Rule 151   if_then_else_statement_precedence -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate
Rule 152   if_then_else_intermediate -> normal_statement
Rule 153   if_then_else_intermediate -> if_then_else_statement_precedence
Rule 154   while_statement -> KW_while TOK_paraleft expression TOK_pararight statement
Rule 155   for_statement -> KW_for TOK_paraleft for_logic TOK_pararight statement
Rule 156   for_logic -> for_update
Rule 157   for_logic -> for_update TOK_semi for_logic
Rule 158   for_update -> for_loop for_step_opts
Rule 159   for_loop -> TOK_identifier TOK_choose expression for_untilTo expression
Rule 160   for_untilTo -> KW_until
Rule 161   for_untilTo -> KW_to
Rule 162   for_step_opts -> KW_by expression
Rule 163   for_step_opts -> empty
Rule 164   empty_statement -> TOK_semi
Rule 165   return_statement -> KW_return expression_question TOK_semi
Rule 166   class_declaration -> class_header class_body
Rule 167   class_header -> KW_class name modifier_question class_param_clause_question class_template_question
Rule 168   class_param_clause_question -> class_param_clause
Rule 169   class_param_clause_question -> empty
Rule 170   class_param_clause -> TOK_paraleft class_params_question TOK_pararight
Rule 171   class_params_question -> class_params
Rule 172   class_params_question -> empty
Rule 173   class_params -> class_param
Rule 174   class_params -> class_params TOK_comma class_param
Rule 175   class_param -> class_declaration_keyword_question variable_declarator_id expr_question
Rule 176   override_question -> override
Rule 177   override_question -> empty
Rule 178   override -> KW_override
Rule 179   class_declaration_keyword_question -> override_question modifier_question declaration_keyword
Rule 180   class_declaration_keyword_question -> empty
Rule 181   type_question -> TOK_colon type
Rule 182   type_question -> empty
Rule 183   class_template_question -> class_template
Rule 184   class_template_question -> empty
Rule 185   class_template -> KW_extends name TOK_paraleft variable_list TOK_pararight
Rule 186   class_body -> block
Rule 187   method_declaration -> method_header method_body
Rule 188   method_header -> KW_def fun_def
Rule 189   fun_def -> fun_sig type_question TOK_assignment
Rule 190   fun_def -> fun_sig type_question
Rule 191   fun_sig -> name fun_param_clause
Rule 192   fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight
Rule 193   fun_params_question -> fun_params
Rule 194   fun_params_question -> empty
Rule 195   fun_params -> fun_param
Rule 196   fun_params -> fun_params TOK_comma fun_param
Rule 197   fun_param -> variable_declarator_id expr_question
Rule 198   method_body -> block
Rule 199   method_body -> variable_declaration_initializer
Rule 200   empty -> <empty>

Terminals, with rules where they appear

KW_Try               : 
KW_abstract          : 
KW_array             : 130 131 132 133 135
KW_boolean           : 125
KW_by                : 162
KW_case              : 
KW_catch             : 
KW_char              : 123
KW_class             : 167
KW_def               : 188
KW_do                : 
KW_double            : 122
KW_else              : 23 150 151
KW_extends           : 185
KW_false             : 87
KW_final             : 
KW_finally           : 
KW_for               : 155
KW_forSome           : 
KW_if                : 23 149 150 151
KW_implicit          : 
KW_import            : 
KW_int               : 121
KW_lazy              : 
KW_match             : 
KW_new               : 131 136
KW_null              : 88
KW_obj               : 7
KW_ofdim             : 135
KW_or                : 
KW_override          : 178
KW_package           : 
KW_private           : 97
KW_protected         : 96
KW_return            : 165
KW_sealed            : 
KW_string            : 124
KW_super             : 
KW_this              : 
KW_throw             : 
KW_to                : 161
KW_trait             : 
KW_true              : 86
KW_type              : 
KW_until             : 160
KW_val               : 101
KW_var               : 100
KW_void              : 126
KW_while             : 154
KW_with              : 
KW_yield             : 
TOK_addassign        : 38
TOK_and              : 43
TOK_and_bitwise      : 49
TOK_assignment       : 34 109 110 116 189
TOK_at               : 
TOK_char             : 84
TOK_choose           : 159
TOK_cmnt             : 
TOK_colon            : 118 181
TOK_comma            : 93 108 111 114 174 196
TOK_divassign        : 36
TOK_divide           : 66
TOK_dot              : 29 135
TOK_eq_gt            : 
TOK_equal            : 51
TOK_error            : 
TOK_float            : 89
TOK_geq              : 56
TOK_greater          : 54
TOK_hash             : 
TOK_identifier       : 7 30 111 112 115 118 159
TOK_ignore           : 
TOK_int              : 90
TOK_lcurly           : 8
TOK_leq              : 57
TOK_lesser           : 55
TOK_long             : 
TOK_lshift           : 59
TOK_lsqb             : 32 33 130 131 133 135
TOK_minus            : 63 69
TOK_modassign        : 37
TOK_modulus          : 67
TOK_mulassign        : 35
TOK_nequal           : 52
TOK_nl               : 
TOK_not              : 73
TOK_or               : 41
TOK_or_bitwise       : 45
TOK_paraleft         : 23 76 79 91 110 110 131 132 133 135 136 149 150 151 154 155 170 185 192
TOK_pararight        : 23 76 79 91 110 110 131 132 133 135 136 149 150 151 154 155 170 185 192
TOK_plus             : 62 68
TOK_rcurly           : 8
TOK_rshift           : 60
TOK_rsqb             : 32 33 130 131 133 135
TOK_semi             : 102 146 157 164 165
TOK_string           : 85
TOK_subassign        : 39
TOK_tilda            : 72
TOK_times            : 65
TOK_xor              : 47
error                : 

Nonterminals, with rules where they appear

additive_expression  : 58 59 60 62 63
and_expression       : 46 47 49
argument_list        : 93 94 135
argument_list_question : 91 132 133 136
array_access         : 26
array_data_type      : 128
array_initializer    : 105
assignment           : 20 147
assignment_expression : 19 24
assignment_operator  : 24
base_variable_set    : 71
block                : 6 142 186 198
block_stat           : 11 12
block_stats          : 9 12
block_stats_star     : 8
c_literal            : 83
cast_expression      : 74
class_and_obj_declaration : 2 3 15
class_and_obj_declarations : 1 3
class_body           : 166
class_data_type      : 127
class_declaration    : 5
class_declaration_keyword_question : 175
class_header         : 166
class_initializer    : 106
class_param          : 173 174
class_param_clause   : 168
class_param_clause_question : 167
class_params         : 171 174
class_params_question : 170
class_template       : 183
class_template_question : 167
compilation_unit     : 0
conditional_and_expression : 40 41 43
conditional_or_expression : 21 41 131
declaration_keyword  : 103 179
dimension            : 31 32
empty                : 10 18 95 99 117 163 169 172 177 180 182 184 194
empty_statement      : 144
equality_expression  : 48 49 51 52
exclusive_or_expression : 44 45 47
expr_question        : 175 197
expression           : 17 23 23 23 32 33 76 92 93 104 149 150 151 154 159 159 162
expression_question  : 165
expression_statement : 143
for_logic            : 155 157
for_loop             : 158
for_statement        : 141
for_step_opts        : 158
for_untilTo          : 159
for_update           : 156 157
fun_def              : 188
fun_param            : 195 196
fun_param_clause     : 191
fun_params           : 193 196
fun_params_question  : 192
fun_sig              : 189 190
id                   : 25 31 91 129
identifiers          : 109 111
if_else_expression   : 22
if_then_else_intermediate : 150 151 151
if_then_else_statement : 139
if_then_else_statement_precedence : 153
if_then_statement    : 138
inclusive_or_expression : 42 43 45
int_float            : 82
left_hand_side       : 24 77
literal              : 80
local_variable_declaration : 102
local_variable_declaration_statement : 13
method_body          : 187
method_declaration   : 16
method_header        : 187
method_invocation    : 81 148
modifier             : 98
modifier_question    : 103 167 179
multidimensional_array_initializer : 134
multiplicative_expression : 61 62 63 65 66 67
name                 : 27 29 29 136 167 185 191
normal_statement     : 137 152
object_declaration   : 6
override             : 176
override_question    : 179
primary              : 78
primitive_type       : 79 119
qualified_id         : 28
reference_type       : 120
relational_expression : 50 51 52 54 55 56 57
return_statement     : 145
shift_expression     : 53 54 55 56 57 59 60
singleton_object     : 4
statement            : 14 149 150 154 155
statement_expression : 146
type                 : 118 130 131 133 135 181
type_question        : 109 115 189 190
unary_expression     : 64 65 66 67 68 69 72 73 79
unary_expression_not_plus_minus : 70
variable_argument_list : 108 110
variable_dec         : 113 114
variable_declaration_body : 103
variable_declaration_initializer : 107 108 109 116 199
variable_declarator_id : 175 197
variable_list        : 110 114 185
variable_literal     : 75
while_statement      : 140

Parsing method: LALR

state 0

    (0) S' -> . compilation_unit
    (1) compilation_unit -> . class_and_obj_declarations
    (2) class_and_obj_declarations -> . class_and_obj_declaration
    (3) class_and_obj_declarations -> . class_and_obj_declarations class_and_obj_declaration
    (4) class_and_obj_declaration -> . singleton_object
    (5) class_and_obj_declaration -> . class_declaration
    (6) singleton_object -> . object_declaration block
    (166) class_declaration -> . class_header class_body
    (7) object_declaration -> . KW_obj TOK_identifier
    (167) class_header -> . KW_class name modifier_question class_param_clause_question class_template_question

    KW_obj          shift and go to state 6
    KW_class        shift and go to state 3

    class_and_obj_declaration      shift and go to state 1
    class_and_obj_declarations     shift and go to state 2
    compilation_unit               shift and go to state 4
    class_declaration              shift and go to state 5
    object_declaration             shift and go to state 7
    singleton_object               shift and go to state 8
    class_header                   shift and go to state 9

state 1

    (2) class_and_obj_declarations -> class_and_obj_declaration .

    KW_obj          reduce using rule 2 (class_and_obj_declarations -> class_and_obj_declaration .)
    KW_class        reduce using rule 2 (class_and_obj_declarations -> class_and_obj_declaration .)
    $end            reduce using rule 2 (class_and_obj_declarations -> class_and_obj_declaration .)


state 2

    (1) compilation_unit -> class_and_obj_declarations .
    (3) class_and_obj_declarations -> class_and_obj_declarations . class_and_obj_declaration
    (4) class_and_obj_declaration -> . singleton_object
    (5) class_and_obj_declaration -> . class_declaration
    (6) singleton_object -> . object_declaration block
    (166) class_declaration -> . class_header class_body
    (7) object_declaration -> . KW_obj TOK_identifier
    (167) class_header -> . KW_class name modifier_question class_param_clause_question class_template_question

    $end            reduce using rule 1 (compilation_unit -> class_and_obj_declarations .)
    KW_obj          shift and go to state 6
    KW_class        shift and go to state 3

    class_and_obj_declaration      shift and go to state 10
    class_declaration              shift and go to state 5
    object_declaration             shift and go to state 7
    singleton_object               shift and go to state 8
    class_header                   shift and go to state 9

state 3

    (167) class_header -> KW_class . name modifier_question class_param_clause_question class_template_question
    (30) name -> . TOK_identifier

    TOK_identifier  shift and go to state 12

    name                           shift and go to state 11

state 4

    (0) S' -> compilation_unit .



state 5

    (5) class_and_obj_declaration -> class_declaration .

    KW_if           reduce using rule 5 (class_and_obj_declaration -> class_declaration .)
    KW_while        reduce using rule 5 (class_and_obj_declaration -> class_declaration .)
    KW_for          reduce using rule 5 (class_and_obj_declaration -> class_declaration .)
    KW_def          reduce using rule 5 (class_and_obj_declaration -> class_declaration .)
    TOK_lcurly      reduce using rule 5 (class_and_obj_declaration -> class_declaration .)
    TOK_semi        reduce using rule 5 (class_and_obj_declaration -> class_declaration .)
    KW_return       reduce using rule 5 (class_and_obj_declaration -> class_declaration .)
    KW_obj          reduce using rule 5 (class_and_obj_declaration -> class_declaration .)
    KW_class        reduce using rule 5 (class_and_obj_declaration -> class_declaration .)
    KW_protected    reduce using rule 5 (class_and_obj_declaration -> class_declaration .)
    KW_private      reduce using rule 5 (class_and_obj_declaration -> class_declaration .)
    TOK_identifier  reduce using rule 5 (class_and_obj_declaration -> class_declaration .)
    KW_var          reduce using rule 5 (class_and_obj_declaration -> class_declaration .)
    KW_val          reduce using rule 5 (class_and_obj_declaration -> class_declaration .)
    TOK_rcurly      reduce using rule 5 (class_and_obj_declaration -> class_declaration .)
    $end            reduce using rule 5 (class_and_obj_declaration -> class_declaration .)


state 6

    (7) object_declaration -> KW_obj . TOK_identifier

    TOK_identifier  shift and go to state 13


state 7

    (6) singleton_object -> object_declaration . block
    (8) block -> . TOK_lcurly block_stats_star TOK_rcurly

    TOK_lcurly      shift and go to state 14

    block                          shift and go to state 15

state 8

    (4) class_and_obj_declaration -> singleton_object .

    KW_if           reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    KW_while        reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    KW_for          reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    KW_def          reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    TOK_lcurly      reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    TOK_semi        reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    KW_return       reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    KW_obj          reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    KW_class        reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    KW_protected    reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    KW_private      reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    TOK_identifier  reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    KW_var          reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    KW_val          reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    TOK_rcurly      reduce using rule 4 (class_and_obj_declaration -> singleton_object .)
    $end            reduce using rule 4 (class_and_obj_declaration -> singleton_object .)


state 9

    (166) class_declaration -> class_header . class_body
    (186) class_body -> . block
    (8) block -> . TOK_lcurly block_stats_star TOK_rcurly

    TOK_lcurly      shift and go to state 14

    class_body                     shift and go to state 16
    block                          shift and go to state 17

state 10

    (3) class_and_obj_declarations -> class_and_obj_declarations class_and_obj_declaration .

    KW_obj          reduce using rule 3 (class_and_obj_declarations -> class_and_obj_declarations class_and_obj_declaration .)
    KW_class        reduce using rule 3 (class_and_obj_declarations -> class_and_obj_declarations class_and_obj_declaration .)
    $end            reduce using rule 3 (class_and_obj_declarations -> class_and_obj_declarations class_and_obj_declaration .)


state 11

    (167) class_header -> KW_class name . modifier_question class_param_clause_question class_template_question
    (98) modifier_question -> . modifier
    (99) modifier_question -> . empty
    (96) modifier -> . KW_protected
    (97) modifier -> . KW_private
    (200) empty -> .

    KW_protected    shift and go to state 21
    KW_private      shift and go to state 19
    TOK_paraleft    reduce using rule 200 (empty -> .)
    KW_extends      reduce using rule 200 (empty -> .)
    TOK_lcurly      reduce using rule 200 (empty -> .)

    modifier_question              shift and go to state 20
    modifier                       shift and go to state 18
    empty                          shift and go to state 22

state 12

    (30) name -> TOK_identifier .

    TOK_dot         reduce using rule 30 (name -> TOK_identifier .)
    TOK_rsqb        reduce using rule 30 (name -> TOK_identifier .)
    TOK_paraleft    reduce using rule 30 (name -> TOK_identifier .)
    TOK_lsqb        reduce using rule 30 (name -> TOK_identifier .)
    TOK_assignment  reduce using rule 30 (name -> TOK_identifier .)
    TOK_mulassign   reduce using rule 30 (name -> TOK_identifier .)
    TOK_divassign   reduce using rule 30 (name -> TOK_identifier .)
    TOK_modassign   reduce using rule 30 (name -> TOK_identifier .)
    TOK_addassign   reduce using rule 30 (name -> TOK_identifier .)
    TOK_subassign   reduce using rule 30 (name -> TOK_identifier .)
    TOK_times       reduce using rule 30 (name -> TOK_identifier .)
    TOK_divide      reduce using rule 30 (name -> TOK_identifier .)
    TOK_modulus     reduce using rule 30 (name -> TOK_identifier .)
    TOK_plus        reduce using rule 30 (name -> TOK_identifier .)
    TOK_minus       reduce using rule 30 (name -> TOK_identifier .)
    TOK_lshift      reduce using rule 30 (name -> TOK_identifier .)
    TOK_rshift      reduce using rule 30 (name -> TOK_identifier .)
    TOK_greater     reduce using rule 30 (name -> TOK_identifier .)
    TOK_lesser      reduce using rule 30 (name -> TOK_identifier .)
    TOK_geq         reduce using rule 30 (name -> TOK_identifier .)
    TOK_leq         reduce using rule 30 (name -> TOK_identifier .)
    TOK_equal       reduce using rule 30 (name -> TOK_identifier .)
    TOK_nequal      reduce using rule 30 (name -> TOK_identifier .)
    TOK_and_bitwise reduce using rule 30 (name -> TOK_identifier .)
    TOK_xor         reduce using rule 30 (name -> TOK_identifier .)
    TOK_or_bitwise  reduce using rule 30 (name -> TOK_identifier .)
    TOK_and         reduce using rule 30 (name -> TOK_identifier .)
    TOK_or          reduce using rule 30 (name -> TOK_identifier .)
    KW_if           reduce using rule 30 (name -> TOK_identifier .)
    KW_while        reduce using rule 30 (name -> TOK_identifier .)
    KW_for          reduce using rule 30 (name -> TOK_identifier .)
    KW_def          reduce using rule 30 (name -> TOK_identifier .)
    TOK_lcurly      reduce using rule 30 (name -> TOK_identifier .)
    TOK_semi        reduce using rule 30 (name -> TOK_identifier .)
    KW_return       reduce using rule 30 (name -> TOK_identifier .)
    KW_obj          reduce using rule 30 (name -> TOK_identifier .)
    KW_class        reduce using rule 30 (name -> TOK_identifier .)
    KW_protected    reduce using rule 30 (name -> TOK_identifier .)
    KW_private      reduce using rule 30 (name -> TOK_identifier .)
    TOK_identifier  reduce using rule 30 (name -> TOK_identifier .)
    KW_var          reduce using rule 30 (name -> TOK_identifier .)
    KW_val          reduce using rule 30 (name -> TOK_identifier .)
    TOK_rcurly      reduce using rule 30 (name -> TOK_identifier .)
    TOK_comma       reduce using rule 30 (name -> TOK_identifier .)
    TOK_pararight   reduce using rule 30 (name -> TOK_identifier .)
    KW_until        reduce using rule 30 (name -> TOK_identifier .)
    KW_to           reduce using rule 30 (name -> TOK_identifier .)
    KW_else         reduce using rule 30 (name -> TOK_identifier .)
    KW_by           reduce using rule 30 (name -> TOK_identifier .)
    KW_new          reduce using rule 30 (name -> TOK_identifier .)
    KW_array        reduce using rule 30 (name -> TOK_identifier .)
    TOK_tilda       reduce using rule 30 (name -> TOK_identifier .)
    TOK_not         reduce using rule 30 (name -> TOK_identifier .)
    TOK_float       reduce using rule 30 (name -> TOK_identifier .)
    TOK_int         reduce using rule 30 (name -> TOK_identifier .)
    TOK_char        reduce using rule 30 (name -> TOK_identifier .)
    TOK_string      reduce using rule 30 (name -> TOK_identifier .)
    KW_true         reduce using rule 30 (name -> TOK_identifier .)
    KW_false        reduce using rule 30 (name -> TOK_identifier .)
    KW_null         reduce using rule 30 (name -> TOK_identifier .)
    KW_extends      reduce using rule 30 (name -> TOK_identifier .)


state 13

    (7) object_declaration -> KW_obj TOK_identifier .

    TOK_lcurly      reduce using rule 7 (object_declaration -> KW_obj TOK_identifier .)


state 14

    (8) block -> TOK_lcurly . block_stats_star TOK_rcurly
    (9) block_stats_star -> . block_stats
    (10) block_stats_star -> . empty
    (11) block_stats -> . block_stat
    (12) block_stats -> . block_stats block_stat
    (200) empty -> .
    (13) block_stat -> . local_variable_declaration_statement
    (14) block_stat -> . statement
    (15) block_stat -> . class_and_obj_declaration
    (16) block_stat -> . method_declaration
    (102) local_variable_declaration_statement -> . local_variable_declaration TOK_semi
    (137) statement -> . normal_statement
    (138) statement -> . if_then_statement
    (139) statement -> . if_then_else_statement
    (140) statement -> . while_statement
    (141) statement -> . for_statement
    (4) class_and_obj_declaration -> . singleton_object
    (5) class_and_obj_declaration -> . class_declaration
    (187) method_declaration -> . method_header method_body
    (103) local_variable_declaration -> . modifier_question declaration_keyword variable_declaration_body
    (142) normal_statement -> . block
    (143) normal_statement -> . expression_statement
    (144) normal_statement -> . empty_statement
    (145) normal_statement -> . return_statement
    (149) if_then_statement -> . KW_if TOK_paraleft expression TOK_pararight statement
    (150) if_then_else_statement -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (154) while_statement -> . KW_while TOK_paraleft expression TOK_pararight statement
    (155) for_statement -> . KW_for TOK_paraleft for_logic TOK_pararight statement
    (6) singleton_object -> . object_declaration block
    (166) class_declaration -> . class_header class_body
    (188) method_header -> . KW_def fun_def
    (98) modifier_question -> . modifier
    (99) modifier_question -> . empty
    (8) block -> . TOK_lcurly block_stats_star TOK_rcurly
    (146) expression_statement -> . statement_expression TOK_semi
    (164) empty_statement -> . TOK_semi
    (165) return_statement -> . KW_return expression_question TOK_semi
    (7) object_declaration -> . KW_obj TOK_identifier
    (167) class_header -> . KW_class name modifier_question class_param_clause_question class_template_question
    (96) modifier -> . KW_protected
    (97) modifier -> . KW_private
    (147) statement_expression -> . assignment
    (148) statement_expression -> . method_invocation
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name

    TOK_rcurly      reduce using rule 200 (empty -> .)
    KW_var          reduce using rule 200 (empty -> .)
    KW_val          reduce using rule 200 (empty -> .)
    KW_if           shift and go to state 39
    KW_while        shift and go to state 54
    KW_for          shift and go to state 33
    KW_def          shift and go to state 36
    TOK_lcurly      shift and go to state 14
    TOK_semi        shift and go to state 50
    KW_return       shift and go to state 51
    KW_obj          shift and go to state 6
    KW_class        shift and go to state 3
    KW_protected    shift and go to state 21
    KW_private      shift and go to state 19
    TOK_identifier  shift and go to state 12

    expression_statement           shift and go to state 23
    object_declaration             shift and go to state 7
    block_stat                     shift and go to state 24
    normal_statement               shift and go to state 25
    block_stats_star               shift and go to state 26
    if_then_statement              shift and go to state 27
    left_hand_side                 shift and go to state 28
    array_access                   shift and go to state 29
    id                             shift and go to state 30
    class_and_obj_declaration      shift and go to state 31
    method_declaration             shift and go to state 32
    return_statement               shift and go to state 34
    while_statement                shift and go to state 35
    statement                      shift and go to state 37
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 45
    empty                          shift and go to state 40
    for_statement                  shift and go to state 41
    local_variable_declaration_statement shift and go to state 42
    assignment                     shift and go to state 43
    modifier_question              shift and go to state 44
    singleton_object               shift and go to state 8
    class_header                   shift and go to state 9
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    method_header                  shift and go to state 48
    empty_statement                shift and go to state 49
    class_declaration              shift and go to state 5
    local_variable_declaration     shift and go to state 52
    block_stats                    shift and go to state 53
    modifier                       shift and go to state 18
    block                          shift and go to state 55
    if_then_else_statement         shift and go to state 56

state 15

    (6) singleton_object -> object_declaration block .

    KW_obj          reduce using rule 6 (singleton_object -> object_declaration block .)
    KW_class        reduce using rule 6 (singleton_object -> object_declaration block .)
    $end            reduce using rule 6 (singleton_object -> object_declaration block .)
    KW_if           reduce using rule 6 (singleton_object -> object_declaration block .)
    KW_while        reduce using rule 6 (singleton_object -> object_declaration block .)
    KW_for          reduce using rule 6 (singleton_object -> object_declaration block .)
    KW_def          reduce using rule 6 (singleton_object -> object_declaration block .)
    TOK_lcurly      reduce using rule 6 (singleton_object -> object_declaration block .)
    TOK_semi        reduce using rule 6 (singleton_object -> object_declaration block .)
    KW_return       reduce using rule 6 (singleton_object -> object_declaration block .)
    KW_protected    reduce using rule 6 (singleton_object -> object_declaration block .)
    KW_private      reduce using rule 6 (singleton_object -> object_declaration block .)
    TOK_identifier  reduce using rule 6 (singleton_object -> object_declaration block .)
    KW_var          reduce using rule 6 (singleton_object -> object_declaration block .)
    KW_val          reduce using rule 6 (singleton_object -> object_declaration block .)
    TOK_rcurly      reduce using rule 6 (singleton_object -> object_declaration block .)


state 16

    (166) class_declaration -> class_header class_body .

    KW_if           reduce using rule 166 (class_declaration -> class_header class_body .)
    KW_while        reduce using rule 166 (class_declaration -> class_header class_body .)
    KW_for          reduce using rule 166 (class_declaration -> class_header class_body .)
    KW_def          reduce using rule 166 (class_declaration -> class_header class_body .)
    TOK_lcurly      reduce using rule 166 (class_declaration -> class_header class_body .)
    TOK_semi        reduce using rule 166 (class_declaration -> class_header class_body .)
    KW_return       reduce using rule 166 (class_declaration -> class_header class_body .)
    KW_obj          reduce using rule 166 (class_declaration -> class_header class_body .)
    KW_class        reduce using rule 166 (class_declaration -> class_header class_body .)
    KW_protected    reduce using rule 166 (class_declaration -> class_header class_body .)
    KW_private      reduce using rule 166 (class_declaration -> class_header class_body .)
    TOK_identifier  reduce using rule 166 (class_declaration -> class_header class_body .)
    KW_var          reduce using rule 166 (class_declaration -> class_header class_body .)
    KW_val          reduce using rule 166 (class_declaration -> class_header class_body .)
    TOK_rcurly      reduce using rule 166 (class_declaration -> class_header class_body .)
    $end            reduce using rule 166 (class_declaration -> class_header class_body .)


state 17

    (186) class_body -> block .

    KW_obj          reduce using rule 186 (class_body -> block .)
    KW_class        reduce using rule 186 (class_body -> block .)
    $end            reduce using rule 186 (class_body -> block .)
    KW_if           reduce using rule 186 (class_body -> block .)
    KW_while        reduce using rule 186 (class_body -> block .)
    KW_for          reduce using rule 186 (class_body -> block .)
    KW_def          reduce using rule 186 (class_body -> block .)
    TOK_lcurly      reduce using rule 186 (class_body -> block .)
    TOK_semi        reduce using rule 186 (class_body -> block .)
    KW_return       reduce using rule 186 (class_body -> block .)
    KW_protected    reduce using rule 186 (class_body -> block .)
    KW_private      reduce using rule 186 (class_body -> block .)
    TOK_identifier  reduce using rule 186 (class_body -> block .)
    KW_var          reduce using rule 186 (class_body -> block .)
    KW_val          reduce using rule 186 (class_body -> block .)
    TOK_rcurly      reduce using rule 186 (class_body -> block .)


state 18

    (98) modifier_question -> modifier .

    KW_var          reduce using rule 98 (modifier_question -> modifier .)
    KW_val          reduce using rule 98 (modifier_question -> modifier .)
    TOK_paraleft    reduce using rule 98 (modifier_question -> modifier .)
    KW_extends      reduce using rule 98 (modifier_question -> modifier .)
    TOK_lcurly      reduce using rule 98 (modifier_question -> modifier .)


state 19

    (97) modifier -> KW_private .

    KW_var          reduce using rule 97 (modifier -> KW_private .)
    KW_val          reduce using rule 97 (modifier -> KW_private .)
    TOK_paraleft    reduce using rule 97 (modifier -> KW_private .)
    KW_extends      reduce using rule 97 (modifier -> KW_private .)
    TOK_lcurly      reduce using rule 97 (modifier -> KW_private .)


state 20

    (167) class_header -> KW_class name modifier_question . class_param_clause_question class_template_question
    (168) class_param_clause_question -> . class_param_clause
    (169) class_param_clause_question -> . empty
    (170) class_param_clause -> . TOK_paraleft class_params_question TOK_pararight
    (200) empty -> .

    TOK_paraleft    shift and go to state 59
    KW_extends      reduce using rule 200 (empty -> .)
    TOK_lcurly      reduce using rule 200 (empty -> .)

    class_param_clause             shift and go to state 57
    class_param_clause_question    shift and go to state 58
    empty                          shift and go to state 60

state 21

    (96) modifier -> KW_protected .

    KW_var          reduce using rule 96 (modifier -> KW_protected .)
    KW_val          reduce using rule 96 (modifier -> KW_protected .)
    TOK_paraleft    reduce using rule 96 (modifier -> KW_protected .)
    KW_extends      reduce using rule 96 (modifier -> KW_protected .)
    TOK_lcurly      reduce using rule 96 (modifier -> KW_protected .)


state 22

    (99) modifier_question -> empty .

    TOK_paraleft    reduce using rule 99 (modifier_question -> empty .)
    KW_extends      reduce using rule 99 (modifier_question -> empty .)
    TOK_lcurly      reduce using rule 99 (modifier_question -> empty .)
    KW_var          reduce using rule 99 (modifier_question -> empty .)
    KW_val          reduce using rule 99 (modifier_question -> empty .)


state 23

    (143) normal_statement -> expression_statement .

    KW_if           reduce using rule 143 (normal_statement -> expression_statement .)
    KW_while        reduce using rule 143 (normal_statement -> expression_statement .)
    KW_for          reduce using rule 143 (normal_statement -> expression_statement .)
    KW_def          reduce using rule 143 (normal_statement -> expression_statement .)
    TOK_lcurly      reduce using rule 143 (normal_statement -> expression_statement .)
    TOK_semi        reduce using rule 143 (normal_statement -> expression_statement .)
    KW_return       reduce using rule 143 (normal_statement -> expression_statement .)
    KW_obj          reduce using rule 143 (normal_statement -> expression_statement .)
    KW_class        reduce using rule 143 (normal_statement -> expression_statement .)
    KW_protected    reduce using rule 143 (normal_statement -> expression_statement .)
    KW_private      reduce using rule 143 (normal_statement -> expression_statement .)
    TOK_identifier  reduce using rule 143 (normal_statement -> expression_statement .)
    KW_var          reduce using rule 143 (normal_statement -> expression_statement .)
    KW_val          reduce using rule 143 (normal_statement -> expression_statement .)
    TOK_rcurly      reduce using rule 143 (normal_statement -> expression_statement .)
    KW_else         reduce using rule 143 (normal_statement -> expression_statement .)


state 24

    (11) block_stats -> block_stat .

    KW_if           reduce using rule 11 (block_stats -> block_stat .)
    KW_while        reduce using rule 11 (block_stats -> block_stat .)
    KW_for          reduce using rule 11 (block_stats -> block_stat .)
    KW_def          reduce using rule 11 (block_stats -> block_stat .)
    TOK_lcurly      reduce using rule 11 (block_stats -> block_stat .)
    TOK_semi        reduce using rule 11 (block_stats -> block_stat .)
    KW_return       reduce using rule 11 (block_stats -> block_stat .)
    KW_obj          reduce using rule 11 (block_stats -> block_stat .)
    KW_class        reduce using rule 11 (block_stats -> block_stat .)
    KW_protected    reduce using rule 11 (block_stats -> block_stat .)
    KW_private      reduce using rule 11 (block_stats -> block_stat .)
    TOK_identifier  reduce using rule 11 (block_stats -> block_stat .)
    KW_var          reduce using rule 11 (block_stats -> block_stat .)
    KW_val          reduce using rule 11 (block_stats -> block_stat .)
    TOK_rcurly      reduce using rule 11 (block_stats -> block_stat .)


state 25

    (137) statement -> normal_statement .

    KW_if           reduce using rule 137 (statement -> normal_statement .)
    KW_while        reduce using rule 137 (statement -> normal_statement .)
    KW_for          reduce using rule 137 (statement -> normal_statement .)
    KW_def          reduce using rule 137 (statement -> normal_statement .)
    TOK_lcurly      reduce using rule 137 (statement -> normal_statement .)
    TOK_semi        reduce using rule 137 (statement -> normal_statement .)
    KW_return       reduce using rule 137 (statement -> normal_statement .)
    KW_obj          reduce using rule 137 (statement -> normal_statement .)
    KW_class        reduce using rule 137 (statement -> normal_statement .)
    KW_protected    reduce using rule 137 (statement -> normal_statement .)
    KW_private      reduce using rule 137 (statement -> normal_statement .)
    TOK_identifier  reduce using rule 137 (statement -> normal_statement .)
    KW_var          reduce using rule 137 (statement -> normal_statement .)
    KW_val          reduce using rule 137 (statement -> normal_statement .)
    TOK_rcurly      reduce using rule 137 (statement -> normal_statement .)


state 26

    (8) block -> TOK_lcurly block_stats_star . TOK_rcurly

    TOK_rcurly      shift and go to state 61


state 27

    (138) statement -> if_then_statement .

    KW_if           reduce using rule 138 (statement -> if_then_statement .)
    KW_while        reduce using rule 138 (statement -> if_then_statement .)
    KW_for          reduce using rule 138 (statement -> if_then_statement .)
    KW_def          reduce using rule 138 (statement -> if_then_statement .)
    TOK_lcurly      reduce using rule 138 (statement -> if_then_statement .)
    TOK_semi        reduce using rule 138 (statement -> if_then_statement .)
    KW_return       reduce using rule 138 (statement -> if_then_statement .)
    KW_obj          reduce using rule 138 (statement -> if_then_statement .)
    KW_class        reduce using rule 138 (statement -> if_then_statement .)
    KW_protected    reduce using rule 138 (statement -> if_then_statement .)
    KW_private      reduce using rule 138 (statement -> if_then_statement .)
    TOK_identifier  reduce using rule 138 (statement -> if_then_statement .)
    KW_var          reduce using rule 138 (statement -> if_then_statement .)
    KW_val          reduce using rule 138 (statement -> if_then_statement .)
    TOK_rcurly      reduce using rule 138 (statement -> if_then_statement .)


state 28

    (24) assignment -> left_hand_side . assignment_operator assignment_expression
    (34) assignment_operator -> . TOK_assignment
    (35) assignment_operator -> . TOK_mulassign
    (36) assignment_operator -> . TOK_divassign
    (37) assignment_operator -> . TOK_modassign
    (38) assignment_operator -> . TOK_addassign
    (39) assignment_operator -> . TOK_subassign

    TOK_assignment  shift and go to state 67
    TOK_mulassign   shift and go to state 68
    TOK_divassign   shift and go to state 62
    TOK_modassign   shift and go to state 63
    TOK_addassign   shift and go to state 65
    TOK_subassign   shift and go to state 64

    assignment_operator            shift and go to state 66

state 29

    (26) left_hand_side -> array_access .

    TOK_times       reduce using rule 26 (left_hand_side -> array_access .)
    TOK_divide      reduce using rule 26 (left_hand_side -> array_access .)
    TOK_modulus     reduce using rule 26 (left_hand_side -> array_access .)
    TOK_plus        reduce using rule 26 (left_hand_side -> array_access .)
    TOK_minus       reduce using rule 26 (left_hand_side -> array_access .)
    TOK_lshift      reduce using rule 26 (left_hand_side -> array_access .)
    TOK_rshift      reduce using rule 26 (left_hand_side -> array_access .)
    TOK_greater     reduce using rule 26 (left_hand_side -> array_access .)
    TOK_lesser      reduce using rule 26 (left_hand_side -> array_access .)
    TOK_geq         reduce using rule 26 (left_hand_side -> array_access .)
    TOK_leq         reduce using rule 26 (left_hand_side -> array_access .)
    TOK_equal       reduce using rule 26 (left_hand_side -> array_access .)
    TOK_nequal      reduce using rule 26 (left_hand_side -> array_access .)
    TOK_and_bitwise reduce using rule 26 (left_hand_side -> array_access .)
    TOK_xor         reduce using rule 26 (left_hand_side -> array_access .)
    TOK_or_bitwise  reduce using rule 26 (left_hand_side -> array_access .)
    TOK_and         reduce using rule 26 (left_hand_side -> array_access .)
    TOK_or          reduce using rule 26 (left_hand_side -> array_access .)
    KW_if           reduce using rule 26 (left_hand_side -> array_access .)
    KW_while        reduce using rule 26 (left_hand_side -> array_access .)
    KW_for          reduce using rule 26 (left_hand_side -> array_access .)
    KW_def          reduce using rule 26 (left_hand_side -> array_access .)
    TOK_lcurly      reduce using rule 26 (left_hand_side -> array_access .)
    TOK_semi        reduce using rule 26 (left_hand_side -> array_access .)
    KW_return       reduce using rule 26 (left_hand_side -> array_access .)
    KW_obj          reduce using rule 26 (left_hand_side -> array_access .)
    KW_class        reduce using rule 26 (left_hand_side -> array_access .)
    KW_protected    reduce using rule 26 (left_hand_side -> array_access .)
    KW_private      reduce using rule 26 (left_hand_side -> array_access .)
    TOK_identifier  reduce using rule 26 (left_hand_side -> array_access .)
    KW_var          reduce using rule 26 (left_hand_side -> array_access .)
    KW_val          reduce using rule 26 (left_hand_side -> array_access .)
    TOK_rcurly      reduce using rule 26 (left_hand_side -> array_access .)
    TOK_comma       reduce using rule 26 (left_hand_side -> array_access .)
    TOK_pararight   reduce using rule 26 (left_hand_side -> array_access .)
    TOK_rsqb        reduce using rule 26 (left_hand_side -> array_access .)
    KW_until        reduce using rule 26 (left_hand_side -> array_access .)
    KW_to           reduce using rule 26 (left_hand_side -> array_access .)
    KW_else         reduce using rule 26 (left_hand_side -> array_access .)
    KW_by           reduce using rule 26 (left_hand_side -> array_access .)
    TOK_assignment  reduce using rule 26 (left_hand_side -> array_access .)
    TOK_mulassign   reduce using rule 26 (left_hand_side -> array_access .)
    TOK_divassign   reduce using rule 26 (left_hand_side -> array_access .)
    TOK_modassign   reduce using rule 26 (left_hand_side -> array_access .)
    TOK_addassign   reduce using rule 26 (left_hand_side -> array_access .)
    TOK_subassign   reduce using rule 26 (left_hand_side -> array_access .)


state 30

    (91) method_invocation -> id . TOK_paraleft argument_list_question TOK_pararight
    (25) left_hand_side -> id .
    (31) array_access -> id . dimension
    (32) dimension -> . dimension TOK_lsqb expression TOK_rsqb
    (33) dimension -> . TOK_lsqb expression TOK_rsqb

    TOK_paraleft    shift and go to state 69
    TOK_assignment  reduce using rule 25 (left_hand_side -> id .)
    TOK_mulassign   reduce using rule 25 (left_hand_side -> id .)
    TOK_divassign   reduce using rule 25 (left_hand_side -> id .)
    TOK_modassign   reduce using rule 25 (left_hand_side -> id .)
    TOK_addassign   reduce using rule 25 (left_hand_side -> id .)
    TOK_subassign   reduce using rule 25 (left_hand_side -> id .)
    TOK_lsqb        shift and go to state 71

    dimension                      shift and go to state 70

state 31

    (15) block_stat -> class_and_obj_declaration .

    KW_if           reduce using rule 15 (block_stat -> class_and_obj_declaration .)
    KW_while        reduce using rule 15 (block_stat -> class_and_obj_declaration .)
    KW_for          reduce using rule 15 (block_stat -> class_and_obj_declaration .)
    KW_def          reduce using rule 15 (block_stat -> class_and_obj_declaration .)
    TOK_lcurly      reduce using rule 15 (block_stat -> class_and_obj_declaration .)
    TOK_semi        reduce using rule 15 (block_stat -> class_and_obj_declaration .)
    KW_return       reduce using rule 15 (block_stat -> class_and_obj_declaration .)
    KW_obj          reduce using rule 15 (block_stat -> class_and_obj_declaration .)
    KW_class        reduce using rule 15 (block_stat -> class_and_obj_declaration .)
    KW_protected    reduce using rule 15 (block_stat -> class_and_obj_declaration .)
    KW_private      reduce using rule 15 (block_stat -> class_and_obj_declaration .)
    TOK_identifier  reduce using rule 15 (block_stat -> class_and_obj_declaration .)
    KW_var          reduce using rule 15 (block_stat -> class_and_obj_declaration .)
    KW_val          reduce using rule 15 (block_stat -> class_and_obj_declaration .)
    TOK_rcurly      reduce using rule 15 (block_stat -> class_and_obj_declaration .)


state 32

    (16) block_stat -> method_declaration .

    KW_if           reduce using rule 16 (block_stat -> method_declaration .)
    KW_while        reduce using rule 16 (block_stat -> method_declaration .)
    KW_for          reduce using rule 16 (block_stat -> method_declaration .)
    KW_def          reduce using rule 16 (block_stat -> method_declaration .)
    TOK_lcurly      reduce using rule 16 (block_stat -> method_declaration .)
    TOK_semi        reduce using rule 16 (block_stat -> method_declaration .)
    KW_return       reduce using rule 16 (block_stat -> method_declaration .)
    KW_obj          reduce using rule 16 (block_stat -> method_declaration .)
    KW_class        reduce using rule 16 (block_stat -> method_declaration .)
    KW_protected    reduce using rule 16 (block_stat -> method_declaration .)
    KW_private      reduce using rule 16 (block_stat -> method_declaration .)
    TOK_identifier  reduce using rule 16 (block_stat -> method_declaration .)
    KW_var          reduce using rule 16 (block_stat -> method_declaration .)
    KW_val          reduce using rule 16 (block_stat -> method_declaration .)
    TOK_rcurly      reduce using rule 16 (block_stat -> method_declaration .)


state 33

    (155) for_statement -> KW_for . TOK_paraleft for_logic TOK_pararight statement

    TOK_paraleft    shift and go to state 72


state 34

    (145) normal_statement -> return_statement .

    KW_if           reduce using rule 145 (normal_statement -> return_statement .)
    KW_while        reduce using rule 145 (normal_statement -> return_statement .)
    KW_for          reduce using rule 145 (normal_statement -> return_statement .)
    KW_def          reduce using rule 145 (normal_statement -> return_statement .)
    TOK_lcurly      reduce using rule 145 (normal_statement -> return_statement .)
    TOK_semi        reduce using rule 145 (normal_statement -> return_statement .)
    KW_return       reduce using rule 145 (normal_statement -> return_statement .)
    KW_obj          reduce using rule 145 (normal_statement -> return_statement .)
    KW_class        reduce using rule 145 (normal_statement -> return_statement .)
    KW_protected    reduce using rule 145 (normal_statement -> return_statement .)
    KW_private      reduce using rule 145 (normal_statement -> return_statement .)
    TOK_identifier  reduce using rule 145 (normal_statement -> return_statement .)
    KW_var          reduce using rule 145 (normal_statement -> return_statement .)
    KW_val          reduce using rule 145 (normal_statement -> return_statement .)
    TOK_rcurly      reduce using rule 145 (normal_statement -> return_statement .)
    KW_else         reduce using rule 145 (normal_statement -> return_statement .)


state 35

    (140) statement -> while_statement .

    KW_if           reduce using rule 140 (statement -> while_statement .)
    KW_while        reduce using rule 140 (statement -> while_statement .)
    KW_for          reduce using rule 140 (statement -> while_statement .)
    KW_def          reduce using rule 140 (statement -> while_statement .)
    TOK_lcurly      reduce using rule 140 (statement -> while_statement .)
    TOK_semi        reduce using rule 140 (statement -> while_statement .)
    KW_return       reduce using rule 140 (statement -> while_statement .)
    KW_obj          reduce using rule 140 (statement -> while_statement .)
    KW_class        reduce using rule 140 (statement -> while_statement .)
    KW_protected    reduce using rule 140 (statement -> while_statement .)
    KW_private      reduce using rule 140 (statement -> while_statement .)
    TOK_identifier  reduce using rule 140 (statement -> while_statement .)
    KW_var          reduce using rule 140 (statement -> while_statement .)
    KW_val          reduce using rule 140 (statement -> while_statement .)
    TOK_rcurly      reduce using rule 140 (statement -> while_statement .)


state 36

    (188) method_header -> KW_def . fun_def
    (189) fun_def -> . fun_sig type_question TOK_assignment
    (190) fun_def -> . fun_sig type_question
    (191) fun_sig -> . name fun_param_clause
    (30) name -> . TOK_identifier

    TOK_identifier  shift and go to state 12

    fun_def                        shift and go to state 75
    name                           shift and go to state 73
    fun_sig                        shift and go to state 74

state 37

    (14) block_stat -> statement .

    KW_if           reduce using rule 14 (block_stat -> statement .)
    KW_while        reduce using rule 14 (block_stat -> statement .)
    KW_for          reduce using rule 14 (block_stat -> statement .)
    KW_def          reduce using rule 14 (block_stat -> statement .)
    TOK_lcurly      reduce using rule 14 (block_stat -> statement .)
    TOK_semi        reduce using rule 14 (block_stat -> statement .)
    KW_return       reduce using rule 14 (block_stat -> statement .)
    KW_obj          reduce using rule 14 (block_stat -> statement .)
    KW_class        reduce using rule 14 (block_stat -> statement .)
    KW_protected    reduce using rule 14 (block_stat -> statement .)
    KW_private      reduce using rule 14 (block_stat -> statement .)
    TOK_identifier  reduce using rule 14 (block_stat -> statement .)
    KW_var          reduce using rule 14 (block_stat -> statement .)
    KW_val          reduce using rule 14 (block_stat -> statement .)
    TOK_rcurly      reduce using rule 14 (block_stat -> statement .)


state 38

    (146) expression_statement -> statement_expression . TOK_semi

    TOK_semi        shift and go to state 76


state 39

    (149) if_then_statement -> KW_if . TOK_paraleft expression TOK_pararight statement
    (150) if_then_else_statement -> KW_if . TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement

    TOK_paraleft    shift and go to state 77


state 40

    (10) block_stats_star -> empty .
    (99) modifier_question -> empty .

    TOK_rcurly      reduce using rule 10 (block_stats_star -> empty .)
    KW_var          reduce using rule 99 (modifier_question -> empty .)
    KW_val          reduce using rule 99 (modifier_question -> empty .)


state 41

    (141) statement -> for_statement .

    KW_if           reduce using rule 141 (statement -> for_statement .)
    KW_while        reduce using rule 141 (statement -> for_statement .)
    KW_for          reduce using rule 141 (statement -> for_statement .)
    KW_def          reduce using rule 141 (statement -> for_statement .)
    TOK_lcurly      reduce using rule 141 (statement -> for_statement .)
    TOK_semi        reduce using rule 141 (statement -> for_statement .)
    KW_return       reduce using rule 141 (statement -> for_statement .)
    KW_obj          reduce using rule 141 (statement -> for_statement .)
    KW_class        reduce using rule 141 (statement -> for_statement .)
    KW_protected    reduce using rule 141 (statement -> for_statement .)
    KW_private      reduce using rule 141 (statement -> for_statement .)
    TOK_identifier  reduce using rule 141 (statement -> for_statement .)
    KW_var          reduce using rule 141 (statement -> for_statement .)
    KW_val          reduce using rule 141 (statement -> for_statement .)
    TOK_rcurly      reduce using rule 141 (statement -> for_statement .)


state 42

    (13) block_stat -> local_variable_declaration_statement .

    KW_if           reduce using rule 13 (block_stat -> local_variable_declaration_statement .)
    KW_while        reduce using rule 13 (block_stat -> local_variable_declaration_statement .)
    KW_for          reduce using rule 13 (block_stat -> local_variable_declaration_statement .)
    KW_def          reduce using rule 13 (block_stat -> local_variable_declaration_statement .)
    TOK_lcurly      reduce using rule 13 (block_stat -> local_variable_declaration_statement .)
    TOK_semi        reduce using rule 13 (block_stat -> local_variable_declaration_statement .)
    KW_return       reduce using rule 13 (block_stat -> local_variable_declaration_statement .)
    KW_obj          reduce using rule 13 (block_stat -> local_variable_declaration_statement .)
    KW_class        reduce using rule 13 (block_stat -> local_variable_declaration_statement .)
    KW_protected    reduce using rule 13 (block_stat -> local_variable_declaration_statement .)
    KW_private      reduce using rule 13 (block_stat -> local_variable_declaration_statement .)
    TOK_identifier  reduce using rule 13 (block_stat -> local_variable_declaration_statement .)
    KW_var          reduce using rule 13 (block_stat -> local_variable_declaration_statement .)
    KW_val          reduce using rule 13 (block_stat -> local_variable_declaration_statement .)
    TOK_rcurly      reduce using rule 13 (block_stat -> local_variable_declaration_statement .)


state 43

    (147) statement_expression -> assignment .

    TOK_semi        reduce using rule 147 (statement_expression -> assignment .)


state 44

    (103) local_variable_declaration -> modifier_question . declaration_keyword variable_declaration_body
    (100) declaration_keyword -> . KW_var
    (101) declaration_keyword -> . KW_val

    KW_var          shift and go to state 78
    KW_val          shift and go to state 80

    declaration_keyword            shift and go to state 79

state 45

    (148) statement_expression -> method_invocation .

    TOK_semi        reduce using rule 148 (statement_expression -> method_invocation .)


state 46

    (27) id -> name .
    (29) qualified_id -> name . TOK_dot name

    TOK_paraleft    reduce using rule 27 (id -> name .)
    TOK_lsqb        reduce using rule 27 (id -> name .)
    TOK_assignment  reduce using rule 27 (id -> name .)
    TOK_mulassign   reduce using rule 27 (id -> name .)
    TOK_divassign   reduce using rule 27 (id -> name .)
    TOK_modassign   reduce using rule 27 (id -> name .)
    TOK_addassign   reduce using rule 27 (id -> name .)
    TOK_subassign   reduce using rule 27 (id -> name .)
    TOK_times       reduce using rule 27 (id -> name .)
    TOK_divide      reduce using rule 27 (id -> name .)
    TOK_modulus     reduce using rule 27 (id -> name .)
    TOK_plus        reduce using rule 27 (id -> name .)
    TOK_minus       reduce using rule 27 (id -> name .)
    TOK_lshift      reduce using rule 27 (id -> name .)
    TOK_rshift      reduce using rule 27 (id -> name .)
    TOK_greater     reduce using rule 27 (id -> name .)
    TOK_lesser      reduce using rule 27 (id -> name .)
    TOK_geq         reduce using rule 27 (id -> name .)
    TOK_leq         reduce using rule 27 (id -> name .)
    TOK_equal       reduce using rule 27 (id -> name .)
    TOK_nequal      reduce using rule 27 (id -> name .)
    TOK_and_bitwise reduce using rule 27 (id -> name .)
    TOK_xor         reduce using rule 27 (id -> name .)
    TOK_or_bitwise  reduce using rule 27 (id -> name .)
    TOK_and         reduce using rule 27 (id -> name .)
    TOK_or          reduce using rule 27 (id -> name .)
    KW_if           reduce using rule 27 (id -> name .)
    KW_while        reduce using rule 27 (id -> name .)
    KW_for          reduce using rule 27 (id -> name .)
    KW_def          reduce using rule 27 (id -> name .)
    TOK_lcurly      reduce using rule 27 (id -> name .)
    TOK_semi        reduce using rule 27 (id -> name .)
    KW_return       reduce using rule 27 (id -> name .)
    KW_obj          reduce using rule 27 (id -> name .)
    KW_class        reduce using rule 27 (id -> name .)
    KW_protected    reduce using rule 27 (id -> name .)
    KW_private      reduce using rule 27 (id -> name .)
    TOK_identifier  reduce using rule 27 (id -> name .)
    KW_var          reduce using rule 27 (id -> name .)
    KW_val          reduce using rule 27 (id -> name .)
    TOK_rcurly      reduce using rule 27 (id -> name .)
    TOK_comma       reduce using rule 27 (id -> name .)
    TOK_pararight   reduce using rule 27 (id -> name .)
    TOK_rsqb        reduce using rule 27 (id -> name .)
    KW_until        reduce using rule 27 (id -> name .)
    KW_to           reduce using rule 27 (id -> name .)
    KW_else         reduce using rule 27 (id -> name .)
    KW_by           reduce using rule 27 (id -> name .)
    KW_new          reduce using rule 27 (id -> name .)
    KW_array        reduce using rule 27 (id -> name .)
    TOK_tilda       reduce using rule 27 (id -> name .)
    TOK_not         reduce using rule 27 (id -> name .)
    TOK_float       reduce using rule 27 (id -> name .)
    TOK_int         reduce using rule 27 (id -> name .)
    TOK_char        reduce using rule 27 (id -> name .)
    TOK_string      reduce using rule 27 (id -> name .)
    KW_true         reduce using rule 27 (id -> name .)
    KW_false        reduce using rule 27 (id -> name .)
    KW_null         reduce using rule 27 (id -> name .)
    TOK_dot         shift and go to state 81


state 47

    (28) id -> qualified_id .

    TOK_paraleft    reduce using rule 28 (id -> qualified_id .)
    TOK_lsqb        reduce using rule 28 (id -> qualified_id .)
    TOK_assignment  reduce using rule 28 (id -> qualified_id .)
    TOK_mulassign   reduce using rule 28 (id -> qualified_id .)
    TOK_divassign   reduce using rule 28 (id -> qualified_id .)
    TOK_modassign   reduce using rule 28 (id -> qualified_id .)
    TOK_addassign   reduce using rule 28 (id -> qualified_id .)
    TOK_subassign   reduce using rule 28 (id -> qualified_id .)
    TOK_times       reduce using rule 28 (id -> qualified_id .)
    TOK_divide      reduce using rule 28 (id -> qualified_id .)
    TOK_modulus     reduce using rule 28 (id -> qualified_id .)
    TOK_plus        reduce using rule 28 (id -> qualified_id .)
    TOK_minus       reduce using rule 28 (id -> qualified_id .)
    TOK_lshift      reduce using rule 28 (id -> qualified_id .)
    TOK_rshift      reduce using rule 28 (id -> qualified_id .)
    TOK_greater     reduce using rule 28 (id -> qualified_id .)
    TOK_lesser      reduce using rule 28 (id -> qualified_id .)
    TOK_geq         reduce using rule 28 (id -> qualified_id .)
    TOK_leq         reduce using rule 28 (id -> qualified_id .)
    TOK_equal       reduce using rule 28 (id -> qualified_id .)
    TOK_nequal      reduce using rule 28 (id -> qualified_id .)
    TOK_and_bitwise reduce using rule 28 (id -> qualified_id .)
    TOK_xor         reduce using rule 28 (id -> qualified_id .)
    TOK_or_bitwise  reduce using rule 28 (id -> qualified_id .)
    TOK_and         reduce using rule 28 (id -> qualified_id .)
    TOK_or          reduce using rule 28 (id -> qualified_id .)
    KW_if           reduce using rule 28 (id -> qualified_id .)
    KW_while        reduce using rule 28 (id -> qualified_id .)
    KW_for          reduce using rule 28 (id -> qualified_id .)
    KW_def          reduce using rule 28 (id -> qualified_id .)
    TOK_lcurly      reduce using rule 28 (id -> qualified_id .)
    TOK_semi        reduce using rule 28 (id -> qualified_id .)
    KW_return       reduce using rule 28 (id -> qualified_id .)
    KW_obj          reduce using rule 28 (id -> qualified_id .)
    KW_class        reduce using rule 28 (id -> qualified_id .)
    KW_protected    reduce using rule 28 (id -> qualified_id .)
    KW_private      reduce using rule 28 (id -> qualified_id .)
    TOK_identifier  reduce using rule 28 (id -> qualified_id .)
    KW_var          reduce using rule 28 (id -> qualified_id .)
    KW_val          reduce using rule 28 (id -> qualified_id .)
    TOK_rcurly      reduce using rule 28 (id -> qualified_id .)
    TOK_comma       reduce using rule 28 (id -> qualified_id .)
    TOK_pararight   reduce using rule 28 (id -> qualified_id .)
    TOK_rsqb        reduce using rule 28 (id -> qualified_id .)
    KW_until        reduce using rule 28 (id -> qualified_id .)
    KW_to           reduce using rule 28 (id -> qualified_id .)
    KW_else         reduce using rule 28 (id -> qualified_id .)
    KW_by           reduce using rule 28 (id -> qualified_id .)
    KW_new          reduce using rule 28 (id -> qualified_id .)
    KW_array        reduce using rule 28 (id -> qualified_id .)
    TOK_tilda       reduce using rule 28 (id -> qualified_id .)
    TOK_not         reduce using rule 28 (id -> qualified_id .)
    TOK_float       reduce using rule 28 (id -> qualified_id .)
    TOK_int         reduce using rule 28 (id -> qualified_id .)
    TOK_char        reduce using rule 28 (id -> qualified_id .)
    TOK_string      reduce using rule 28 (id -> qualified_id .)
    KW_true         reduce using rule 28 (id -> qualified_id .)
    KW_false        reduce using rule 28 (id -> qualified_id .)
    KW_null         reduce using rule 28 (id -> qualified_id .)


state 48

    (187) method_declaration -> method_header . method_body
    (198) method_body -> . block
    (199) method_body -> . variable_declaration_initializer
    (8) block -> . TOK_lcurly block_stats_star TOK_rcurly
    (104) variable_declaration_initializer -> . expression
    (105) variable_declaration_initializer -> . array_initializer
    (106) variable_declaration_initializer -> . class_initializer
    (19) expression -> . assignment_expression
    (131) array_initializer -> . KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight
    (132) array_initializer -> . KW_array TOK_paraleft argument_list_question TOK_pararight
    (133) array_initializer -> . KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight
    (134) array_initializer -> . multidimensional_array_initializer
    (136) class_initializer -> . KW_new name TOK_paraleft argument_list_question TOK_pararight
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (135) multidimensional_array_initializer -> . KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_lcurly      shift and go to state 14
    KW_new          shift and go to state 101
    KW_array        shift and go to state 121
    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    variable_declaration_initializer shift and go to state 82
    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    and_expression                 shift and go to state 83
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    multidimensional_array_initializer shift and go to state 96
    literal                        shift and go to state 99
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    relational_expression          shift and go to state 103
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    method_body                    shift and go to state 113
    additive_expression            shift and go to state 97
    method_invocation              shift and go to state 110
    class_initializer              shift and go to state 114
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    array_initializer              shift and go to state 118
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    expression                     shift and go to state 126
    conditional_and_expression     shift and go to state 127
    block                          shift and go to state 128

state 49

    (144) normal_statement -> empty_statement .

    KW_if           reduce using rule 144 (normal_statement -> empty_statement .)
    KW_while        reduce using rule 144 (normal_statement -> empty_statement .)
    KW_for          reduce using rule 144 (normal_statement -> empty_statement .)
    KW_def          reduce using rule 144 (normal_statement -> empty_statement .)
    TOK_lcurly      reduce using rule 144 (normal_statement -> empty_statement .)
    TOK_semi        reduce using rule 144 (normal_statement -> empty_statement .)
    KW_return       reduce using rule 144 (normal_statement -> empty_statement .)
    KW_obj          reduce using rule 144 (normal_statement -> empty_statement .)
    KW_class        reduce using rule 144 (normal_statement -> empty_statement .)
    KW_protected    reduce using rule 144 (normal_statement -> empty_statement .)
    KW_private      reduce using rule 144 (normal_statement -> empty_statement .)
    TOK_identifier  reduce using rule 144 (normal_statement -> empty_statement .)
    KW_var          reduce using rule 144 (normal_statement -> empty_statement .)
    KW_val          reduce using rule 144 (normal_statement -> empty_statement .)
    TOK_rcurly      reduce using rule 144 (normal_statement -> empty_statement .)
    KW_else         reduce using rule 144 (normal_statement -> empty_statement .)


state 50

    (164) empty_statement -> TOK_semi .

    KW_if           reduce using rule 164 (empty_statement -> TOK_semi .)
    KW_while        reduce using rule 164 (empty_statement -> TOK_semi .)
    KW_for          reduce using rule 164 (empty_statement -> TOK_semi .)
    KW_def          reduce using rule 164 (empty_statement -> TOK_semi .)
    TOK_lcurly      reduce using rule 164 (empty_statement -> TOK_semi .)
    TOK_semi        reduce using rule 164 (empty_statement -> TOK_semi .)
    KW_return       reduce using rule 164 (empty_statement -> TOK_semi .)
    KW_obj          reduce using rule 164 (empty_statement -> TOK_semi .)
    KW_class        reduce using rule 164 (empty_statement -> TOK_semi .)
    KW_protected    reduce using rule 164 (empty_statement -> TOK_semi .)
    KW_private      reduce using rule 164 (empty_statement -> TOK_semi .)
    TOK_identifier  reduce using rule 164 (empty_statement -> TOK_semi .)
    KW_var          reduce using rule 164 (empty_statement -> TOK_semi .)
    KW_val          reduce using rule 164 (empty_statement -> TOK_semi .)
    TOK_rcurly      reduce using rule 164 (empty_statement -> TOK_semi .)
    KW_else         reduce using rule 164 (empty_statement -> TOK_semi .)


state 51

    (165) return_statement -> KW_return . expression_question TOK_semi
    (17) expression_question -> . expression
    (18) expression_question -> . empty
    (19) expression -> . assignment_expression
    (200) empty -> .
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_semi        reduce using rule 200 (empty -> .)
    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    and_expression                 shift and go to state 83
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    unary_expression               shift and go to state 124
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    empty                          shift and go to state 129
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    expression_question            shift and go to state 130
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    expression                     shift and go to state 131

state 52

    (102) local_variable_declaration_statement -> local_variable_declaration . TOK_semi

    TOK_semi        shift and go to state 132


state 53

    (9) block_stats_star -> block_stats .
    (12) block_stats -> block_stats . block_stat
    (13) block_stat -> . local_variable_declaration_statement
    (14) block_stat -> . statement
    (15) block_stat -> . class_and_obj_declaration
    (16) block_stat -> . method_declaration
    (102) local_variable_declaration_statement -> . local_variable_declaration TOK_semi
    (137) statement -> . normal_statement
    (138) statement -> . if_then_statement
    (139) statement -> . if_then_else_statement
    (140) statement -> . while_statement
    (141) statement -> . for_statement
    (4) class_and_obj_declaration -> . singleton_object
    (5) class_and_obj_declaration -> . class_declaration
    (187) method_declaration -> . method_header method_body
    (103) local_variable_declaration -> . modifier_question declaration_keyword variable_declaration_body
    (142) normal_statement -> . block
    (143) normal_statement -> . expression_statement
    (144) normal_statement -> . empty_statement
    (145) normal_statement -> . return_statement
    (149) if_then_statement -> . KW_if TOK_paraleft expression TOK_pararight statement
    (150) if_then_else_statement -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (154) while_statement -> . KW_while TOK_paraleft expression TOK_pararight statement
    (155) for_statement -> . KW_for TOK_paraleft for_logic TOK_pararight statement
    (6) singleton_object -> . object_declaration block
    (166) class_declaration -> . class_header class_body
    (188) method_header -> . KW_def fun_def
    (98) modifier_question -> . modifier
    (99) modifier_question -> . empty
    (8) block -> . TOK_lcurly block_stats_star TOK_rcurly
    (146) expression_statement -> . statement_expression TOK_semi
    (164) empty_statement -> . TOK_semi
    (165) return_statement -> . KW_return expression_question TOK_semi
    (7) object_declaration -> . KW_obj TOK_identifier
    (167) class_header -> . KW_class name modifier_question class_param_clause_question class_template_question
    (96) modifier -> . KW_protected
    (97) modifier -> . KW_private
    (200) empty -> .
    (147) statement_expression -> . assignment
    (148) statement_expression -> . method_invocation
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name

    TOK_rcurly      reduce using rule 9 (block_stats_star -> block_stats .)
    KW_if           shift and go to state 39
    KW_while        shift and go to state 54
    KW_for          shift and go to state 33
    KW_def          shift and go to state 36
    TOK_lcurly      shift and go to state 14
    TOK_semi        shift and go to state 50
    KW_return       shift and go to state 51
    KW_obj          shift and go to state 6
    KW_class        shift and go to state 3
    KW_protected    shift and go to state 21
    KW_private      shift and go to state 19
    KW_var          reduce using rule 200 (empty -> .)
    KW_val          reduce using rule 200 (empty -> .)
    TOK_identifier  shift and go to state 12

    expression_statement           shift and go to state 23
    object_declaration             shift and go to state 7
    block_stat                     shift and go to state 133
    normal_statement               shift and go to state 25
    if_then_statement              shift and go to state 27
    left_hand_side                 shift and go to state 28
    array_access                   shift and go to state 29
    id                             shift and go to state 30
    class_and_obj_declaration      shift and go to state 31
    method_declaration             shift and go to state 32
    return_statement               shift and go to state 34
    while_statement                shift and go to state 35
    statement                      shift and go to state 37
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 45
    empty                          shift and go to state 22
    for_statement                  shift and go to state 41
    local_variable_declaration_statement shift and go to state 42
    assignment                     shift and go to state 43
    modifier_question              shift and go to state 44
    singleton_object               shift and go to state 8
    class_header                   shift and go to state 9
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    method_header                  shift and go to state 48
    empty_statement                shift and go to state 49
    class_declaration              shift and go to state 5
    local_variable_declaration     shift and go to state 52
    modifier                       shift and go to state 18
    block                          shift and go to state 55
    if_then_else_statement         shift and go to state 56

state 54

    (154) while_statement -> KW_while . TOK_paraleft expression TOK_pararight statement

    TOK_paraleft    shift and go to state 134


state 55

    (142) normal_statement -> block .

    KW_if           reduce using rule 142 (normal_statement -> block .)
    KW_while        reduce using rule 142 (normal_statement -> block .)
    KW_for          reduce using rule 142 (normal_statement -> block .)
    KW_def          reduce using rule 142 (normal_statement -> block .)
    TOK_lcurly      reduce using rule 142 (normal_statement -> block .)
    TOK_semi        reduce using rule 142 (normal_statement -> block .)
    KW_return       reduce using rule 142 (normal_statement -> block .)
    KW_obj          reduce using rule 142 (normal_statement -> block .)
    KW_class        reduce using rule 142 (normal_statement -> block .)
    KW_protected    reduce using rule 142 (normal_statement -> block .)
    KW_private      reduce using rule 142 (normal_statement -> block .)
    TOK_identifier  reduce using rule 142 (normal_statement -> block .)
    KW_var          reduce using rule 142 (normal_statement -> block .)
    KW_val          reduce using rule 142 (normal_statement -> block .)
    TOK_rcurly      reduce using rule 142 (normal_statement -> block .)
    KW_else         reduce using rule 142 (normal_statement -> block .)


state 56

    (139) statement -> if_then_else_statement .

    KW_if           reduce using rule 139 (statement -> if_then_else_statement .)
    KW_while        reduce using rule 139 (statement -> if_then_else_statement .)
    KW_for          reduce using rule 139 (statement -> if_then_else_statement .)
    KW_def          reduce using rule 139 (statement -> if_then_else_statement .)
    TOK_lcurly      reduce using rule 139 (statement -> if_then_else_statement .)
    TOK_semi        reduce using rule 139 (statement -> if_then_else_statement .)
    KW_return       reduce using rule 139 (statement -> if_then_else_statement .)
    KW_obj          reduce using rule 139 (statement -> if_then_else_statement .)
    KW_class        reduce using rule 139 (statement -> if_then_else_statement .)
    KW_protected    reduce using rule 139 (statement -> if_then_else_statement .)
    KW_private      reduce using rule 139 (statement -> if_then_else_statement .)
    TOK_identifier  reduce using rule 139 (statement -> if_then_else_statement .)
    KW_var          reduce using rule 139 (statement -> if_then_else_statement .)
    KW_val          reduce using rule 139 (statement -> if_then_else_statement .)
    TOK_rcurly      reduce using rule 139 (statement -> if_then_else_statement .)


state 57

    (168) class_param_clause_question -> class_param_clause .

    KW_extends      reduce using rule 168 (class_param_clause_question -> class_param_clause .)
    TOK_lcurly      reduce using rule 168 (class_param_clause_question -> class_param_clause .)


state 58

    (167) class_header -> KW_class name modifier_question class_param_clause_question . class_template_question
    (183) class_template_question -> . class_template
    (184) class_template_question -> . empty
    (185) class_template -> . KW_extends name TOK_paraleft variable_list TOK_pararight
    (200) empty -> .

    KW_extends      shift and go to state 136
    TOK_lcurly      reduce using rule 200 (empty -> .)

    class_template                 shift and go to state 135
    class_template_question        shift and go to state 137
    empty                          shift and go to state 138

state 59

    (170) class_param_clause -> TOK_paraleft . class_params_question TOK_pararight
    (171) class_params_question -> . class_params
    (172) class_params_question -> . empty
    (173) class_params -> . class_param
    (174) class_params -> . class_params TOK_comma class_param
    (200) empty -> .
    (175) class_param -> . class_declaration_keyword_question variable_declarator_id expr_question
    (179) class_declaration_keyword_question -> . override_question modifier_question declaration_keyword
    (180) class_declaration_keyword_question -> . empty
    (176) override_question -> . override
    (177) override_question -> . empty
    (178) override -> . KW_override

    TOK_pararight   reduce using rule 200 (empty -> .)
    TOK_identifier  reduce using rule 200 (empty -> .)
    KW_protected    reduce using rule 200 (empty -> .)
    KW_private      reduce using rule 200 (empty -> .)
    KW_var          reduce using rule 200 (empty -> .)
    KW_val          reduce using rule 200 (empty -> .)
    KW_override     shift and go to state 139

    class_declaration_keyword_question shift and go to state 140
    class_param                    shift and go to state 141
    class_params                   shift and go to state 142
    override_question              shift and go to state 143
    override                       shift and go to state 144
    class_params_question          shift and go to state 145
    empty                          shift and go to state 146

state 60

    (169) class_param_clause_question -> empty .

    KW_extends      reduce using rule 169 (class_param_clause_question -> empty .)
    TOK_lcurly      reduce using rule 169 (class_param_clause_question -> empty .)


state 61

    (8) block -> TOK_lcurly block_stats_star TOK_rcurly .

    KW_if           reduce using rule 8 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_while        reduce using rule 8 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_for          reduce using rule 8 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_def          reduce using rule 8 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    TOK_lcurly      reduce using rule 8 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    TOK_semi        reduce using rule 8 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_return       reduce using rule 8 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_obj          reduce using rule 8 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_class        reduce using rule 8 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_protected    reduce using rule 8 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_private      reduce using rule 8 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    TOK_identifier  reduce using rule 8 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_var          reduce using rule 8 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_val          reduce using rule 8 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    TOK_rcurly      reduce using rule 8 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    KW_else         reduce using rule 8 (block -> TOK_lcurly block_stats_star TOK_rcurly .)
    $end            reduce using rule 8 (block -> TOK_lcurly block_stats_star TOK_rcurly .)


state 62

    (36) assignment_operator -> TOK_divassign .

    KW_if           reduce using rule 36 (assignment_operator -> TOK_divassign .)
    TOK_identifier  reduce using rule 36 (assignment_operator -> TOK_divassign .)
    TOK_plus        reduce using rule 36 (assignment_operator -> TOK_divassign .)
    TOK_minus       reduce using rule 36 (assignment_operator -> TOK_divassign .)
    TOK_tilda       reduce using rule 36 (assignment_operator -> TOK_divassign .)
    TOK_not         reduce using rule 36 (assignment_operator -> TOK_divassign .)
    TOK_paraleft    reduce using rule 36 (assignment_operator -> TOK_divassign .)
    TOK_float       reduce using rule 36 (assignment_operator -> TOK_divassign .)
    TOK_int         reduce using rule 36 (assignment_operator -> TOK_divassign .)
    TOK_char        reduce using rule 36 (assignment_operator -> TOK_divassign .)
    TOK_string      reduce using rule 36 (assignment_operator -> TOK_divassign .)
    KW_true         reduce using rule 36 (assignment_operator -> TOK_divassign .)
    KW_false        reduce using rule 36 (assignment_operator -> TOK_divassign .)
    KW_null         reduce using rule 36 (assignment_operator -> TOK_divassign .)


state 63

    (37) assignment_operator -> TOK_modassign .

    KW_if           reduce using rule 37 (assignment_operator -> TOK_modassign .)
    TOK_identifier  reduce using rule 37 (assignment_operator -> TOK_modassign .)
    TOK_plus        reduce using rule 37 (assignment_operator -> TOK_modassign .)
    TOK_minus       reduce using rule 37 (assignment_operator -> TOK_modassign .)
    TOK_tilda       reduce using rule 37 (assignment_operator -> TOK_modassign .)
    TOK_not         reduce using rule 37 (assignment_operator -> TOK_modassign .)
    TOK_paraleft    reduce using rule 37 (assignment_operator -> TOK_modassign .)
    TOK_float       reduce using rule 37 (assignment_operator -> TOK_modassign .)
    TOK_int         reduce using rule 37 (assignment_operator -> TOK_modassign .)
    TOK_char        reduce using rule 37 (assignment_operator -> TOK_modassign .)
    TOK_string      reduce using rule 37 (assignment_operator -> TOK_modassign .)
    KW_true         reduce using rule 37 (assignment_operator -> TOK_modassign .)
    KW_false        reduce using rule 37 (assignment_operator -> TOK_modassign .)
    KW_null         reduce using rule 37 (assignment_operator -> TOK_modassign .)


state 64

    (39) assignment_operator -> TOK_subassign .

    KW_if           reduce using rule 39 (assignment_operator -> TOK_subassign .)
    TOK_identifier  reduce using rule 39 (assignment_operator -> TOK_subassign .)
    TOK_plus        reduce using rule 39 (assignment_operator -> TOK_subassign .)
    TOK_minus       reduce using rule 39 (assignment_operator -> TOK_subassign .)
    TOK_tilda       reduce using rule 39 (assignment_operator -> TOK_subassign .)
    TOK_not         reduce using rule 39 (assignment_operator -> TOK_subassign .)
    TOK_paraleft    reduce using rule 39 (assignment_operator -> TOK_subassign .)
    TOK_float       reduce using rule 39 (assignment_operator -> TOK_subassign .)
    TOK_int         reduce using rule 39 (assignment_operator -> TOK_subassign .)
    TOK_char        reduce using rule 39 (assignment_operator -> TOK_subassign .)
    TOK_string      reduce using rule 39 (assignment_operator -> TOK_subassign .)
    KW_true         reduce using rule 39 (assignment_operator -> TOK_subassign .)
    KW_false        reduce using rule 39 (assignment_operator -> TOK_subassign .)
    KW_null         reduce using rule 39 (assignment_operator -> TOK_subassign .)


state 65

    (38) assignment_operator -> TOK_addassign .

    KW_if           reduce using rule 38 (assignment_operator -> TOK_addassign .)
    TOK_identifier  reduce using rule 38 (assignment_operator -> TOK_addassign .)
    TOK_plus        reduce using rule 38 (assignment_operator -> TOK_addassign .)
    TOK_minus       reduce using rule 38 (assignment_operator -> TOK_addassign .)
    TOK_tilda       reduce using rule 38 (assignment_operator -> TOK_addassign .)
    TOK_not         reduce using rule 38 (assignment_operator -> TOK_addassign .)
    TOK_paraleft    reduce using rule 38 (assignment_operator -> TOK_addassign .)
    TOK_float       reduce using rule 38 (assignment_operator -> TOK_addassign .)
    TOK_int         reduce using rule 38 (assignment_operator -> TOK_addassign .)
    TOK_char        reduce using rule 38 (assignment_operator -> TOK_addassign .)
    TOK_string      reduce using rule 38 (assignment_operator -> TOK_addassign .)
    KW_true         reduce using rule 38 (assignment_operator -> TOK_addassign .)
    KW_false        reduce using rule 38 (assignment_operator -> TOK_addassign .)
    KW_null         reduce using rule 38 (assignment_operator -> TOK_addassign .)


state 66

    (24) assignment -> left_hand_side assignment_operator . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    and_expression                 shift and go to state 83
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 147
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127

state 67

    (34) assignment_operator -> TOK_assignment .

    KW_if           reduce using rule 34 (assignment_operator -> TOK_assignment .)
    TOK_identifier  reduce using rule 34 (assignment_operator -> TOK_assignment .)
    TOK_plus        reduce using rule 34 (assignment_operator -> TOK_assignment .)
    TOK_minus       reduce using rule 34 (assignment_operator -> TOK_assignment .)
    TOK_tilda       reduce using rule 34 (assignment_operator -> TOK_assignment .)
    TOK_not         reduce using rule 34 (assignment_operator -> TOK_assignment .)
    TOK_paraleft    reduce using rule 34 (assignment_operator -> TOK_assignment .)
    TOK_float       reduce using rule 34 (assignment_operator -> TOK_assignment .)
    TOK_int         reduce using rule 34 (assignment_operator -> TOK_assignment .)
    TOK_char        reduce using rule 34 (assignment_operator -> TOK_assignment .)
    TOK_string      reduce using rule 34 (assignment_operator -> TOK_assignment .)
    KW_true         reduce using rule 34 (assignment_operator -> TOK_assignment .)
    KW_false        reduce using rule 34 (assignment_operator -> TOK_assignment .)
    KW_null         reduce using rule 34 (assignment_operator -> TOK_assignment .)


state 68

    (35) assignment_operator -> TOK_mulassign .

    KW_if           reduce using rule 35 (assignment_operator -> TOK_mulassign .)
    TOK_identifier  reduce using rule 35 (assignment_operator -> TOK_mulassign .)
    TOK_plus        reduce using rule 35 (assignment_operator -> TOK_mulassign .)
    TOK_minus       reduce using rule 35 (assignment_operator -> TOK_mulassign .)
    TOK_tilda       reduce using rule 35 (assignment_operator -> TOK_mulassign .)
    TOK_not         reduce using rule 35 (assignment_operator -> TOK_mulassign .)
    TOK_paraleft    reduce using rule 35 (assignment_operator -> TOK_mulassign .)
    TOK_float       reduce using rule 35 (assignment_operator -> TOK_mulassign .)
    TOK_int         reduce using rule 35 (assignment_operator -> TOK_mulassign .)
    TOK_char        reduce using rule 35 (assignment_operator -> TOK_mulassign .)
    TOK_string      reduce using rule 35 (assignment_operator -> TOK_mulassign .)
    KW_true         reduce using rule 35 (assignment_operator -> TOK_mulassign .)
    KW_false        reduce using rule 35 (assignment_operator -> TOK_mulassign .)
    KW_null         reduce using rule 35 (assignment_operator -> TOK_mulassign .)


state 69

    (91) method_invocation -> id TOK_paraleft . argument_list_question TOK_pararight
    (94) argument_list_question -> . argument_list
    (95) argument_list_question -> . empty
    (92) argument_list -> . expression
    (93) argument_list -> . argument_list TOK_comma expression
    (200) empty -> .
    (19) expression -> . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_pararight   reduce using rule 200 (empty -> .)
    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    and_expression                 shift and go to state 83
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    empty                          shift and go to state 149
    argument_list                  shift and go to state 148
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    additive_expression            shift and go to state 97
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    argument_list_question         shift and go to state 150
    expression                     shift and go to state 151
    conditional_and_expression     shift and go to state 127

state 70

    (31) array_access -> id dimension .
    (32) dimension -> dimension . TOK_lsqb expression TOK_rsqb

    TOK_assignment  reduce using rule 31 (array_access -> id dimension .)
    TOK_mulassign   reduce using rule 31 (array_access -> id dimension .)
    TOK_divassign   reduce using rule 31 (array_access -> id dimension .)
    TOK_modassign   reduce using rule 31 (array_access -> id dimension .)
    TOK_addassign   reduce using rule 31 (array_access -> id dimension .)
    TOK_subassign   reduce using rule 31 (array_access -> id dimension .)
    TOK_times       reduce using rule 31 (array_access -> id dimension .)
    TOK_divide      reduce using rule 31 (array_access -> id dimension .)
    TOK_modulus     reduce using rule 31 (array_access -> id dimension .)
    TOK_plus        reduce using rule 31 (array_access -> id dimension .)
    TOK_minus       reduce using rule 31 (array_access -> id dimension .)
    TOK_lshift      reduce using rule 31 (array_access -> id dimension .)
    TOK_rshift      reduce using rule 31 (array_access -> id dimension .)
    TOK_greater     reduce using rule 31 (array_access -> id dimension .)
    TOK_lesser      reduce using rule 31 (array_access -> id dimension .)
    TOK_geq         reduce using rule 31 (array_access -> id dimension .)
    TOK_leq         reduce using rule 31 (array_access -> id dimension .)
    TOK_equal       reduce using rule 31 (array_access -> id dimension .)
    TOK_nequal      reduce using rule 31 (array_access -> id dimension .)
    TOK_and_bitwise reduce using rule 31 (array_access -> id dimension .)
    TOK_xor         reduce using rule 31 (array_access -> id dimension .)
    TOK_or_bitwise  reduce using rule 31 (array_access -> id dimension .)
    TOK_and         reduce using rule 31 (array_access -> id dimension .)
    TOK_or          reduce using rule 31 (array_access -> id dimension .)
    TOK_comma       reduce using rule 31 (array_access -> id dimension .)
    TOK_pararight   reduce using rule 31 (array_access -> id dimension .)
    KW_if           reduce using rule 31 (array_access -> id dimension .)
    KW_while        reduce using rule 31 (array_access -> id dimension .)
    KW_for          reduce using rule 31 (array_access -> id dimension .)
    KW_def          reduce using rule 31 (array_access -> id dimension .)
    TOK_lcurly      reduce using rule 31 (array_access -> id dimension .)
    TOK_semi        reduce using rule 31 (array_access -> id dimension .)
    KW_return       reduce using rule 31 (array_access -> id dimension .)
    KW_obj          reduce using rule 31 (array_access -> id dimension .)
    KW_class        reduce using rule 31 (array_access -> id dimension .)
    KW_protected    reduce using rule 31 (array_access -> id dimension .)
    KW_private      reduce using rule 31 (array_access -> id dimension .)
    TOK_identifier  reduce using rule 31 (array_access -> id dimension .)
    KW_var          reduce using rule 31 (array_access -> id dimension .)
    KW_val          reduce using rule 31 (array_access -> id dimension .)
    TOK_rcurly      reduce using rule 31 (array_access -> id dimension .)
    TOK_rsqb        reduce using rule 31 (array_access -> id dimension .)
    KW_until        reduce using rule 31 (array_access -> id dimension .)
    KW_to           reduce using rule 31 (array_access -> id dimension .)
    KW_else         reduce using rule 31 (array_access -> id dimension .)
    KW_by           reduce using rule 31 (array_access -> id dimension .)
    TOK_lsqb        shift and go to state 152


state 71

    (33) dimension -> TOK_lsqb . expression TOK_rsqb
    (19) expression -> . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    and_expression                 shift and go to state 83
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    expression                     shift and go to state 153

state 72

    (155) for_statement -> KW_for TOK_paraleft . for_logic TOK_pararight statement
    (156) for_logic -> . for_update
    (157) for_logic -> . for_update TOK_semi for_logic
    (158) for_update -> . for_loop for_step_opts
    (159) for_loop -> . TOK_identifier TOK_choose expression for_untilTo expression

    TOK_identifier  shift and go to state 157

    for_loop                       shift and go to state 154
    for_logic                      shift and go to state 155
    for_update                     shift and go to state 156

state 73

    (191) fun_sig -> name . fun_param_clause
    (192) fun_param_clause -> . TOK_paraleft fun_params_question TOK_pararight

    TOK_paraleft    shift and go to state 159

    fun_param_clause               shift and go to state 158

state 74

    (189) fun_def -> fun_sig . type_question TOK_assignment
    (190) fun_def -> fun_sig . type_question
    (181) type_question -> . TOK_colon type
    (182) type_question -> . empty
    (200) empty -> .

    TOK_colon       shift and go to state 161
    TOK_assignment  reduce using rule 200 (empty -> .)
    TOK_lcurly      reduce using rule 200 (empty -> .)
    KW_new          reduce using rule 200 (empty -> .)
    KW_array        reduce using rule 200 (empty -> .)
    KW_if           reduce using rule 200 (empty -> .)
    TOK_identifier  reduce using rule 200 (empty -> .)
    TOK_plus        reduce using rule 200 (empty -> .)
    TOK_minus       reduce using rule 200 (empty -> .)
    TOK_tilda       reduce using rule 200 (empty -> .)
    TOK_not         reduce using rule 200 (empty -> .)
    TOK_paraleft    reduce using rule 200 (empty -> .)
    TOK_float       reduce using rule 200 (empty -> .)
    TOK_int         reduce using rule 200 (empty -> .)
    TOK_char        reduce using rule 200 (empty -> .)
    TOK_string      reduce using rule 200 (empty -> .)
    KW_true         reduce using rule 200 (empty -> .)
    KW_false        reduce using rule 200 (empty -> .)
    KW_null         reduce using rule 200 (empty -> .)

    type_question                  shift and go to state 160
    empty                          shift and go to state 162

state 75

    (188) method_header -> KW_def fun_def .

    TOK_lcurly      reduce using rule 188 (method_header -> KW_def fun_def .)
    KW_new          reduce using rule 188 (method_header -> KW_def fun_def .)
    KW_array        reduce using rule 188 (method_header -> KW_def fun_def .)
    KW_if           reduce using rule 188 (method_header -> KW_def fun_def .)
    TOK_identifier  reduce using rule 188 (method_header -> KW_def fun_def .)
    TOK_plus        reduce using rule 188 (method_header -> KW_def fun_def .)
    TOK_minus       reduce using rule 188 (method_header -> KW_def fun_def .)
    TOK_tilda       reduce using rule 188 (method_header -> KW_def fun_def .)
    TOK_not         reduce using rule 188 (method_header -> KW_def fun_def .)
    TOK_paraleft    reduce using rule 188 (method_header -> KW_def fun_def .)
    TOK_float       reduce using rule 188 (method_header -> KW_def fun_def .)
    TOK_int         reduce using rule 188 (method_header -> KW_def fun_def .)
    TOK_char        reduce using rule 188 (method_header -> KW_def fun_def .)
    TOK_string      reduce using rule 188 (method_header -> KW_def fun_def .)
    KW_true         reduce using rule 188 (method_header -> KW_def fun_def .)
    KW_false        reduce using rule 188 (method_header -> KW_def fun_def .)
    KW_null         reduce using rule 188 (method_header -> KW_def fun_def .)


state 76

    (146) expression_statement -> statement_expression TOK_semi .

    KW_if           reduce using rule 146 (expression_statement -> statement_expression TOK_semi .)
    KW_while        reduce using rule 146 (expression_statement -> statement_expression TOK_semi .)
    KW_for          reduce using rule 146 (expression_statement -> statement_expression TOK_semi .)
    KW_def          reduce using rule 146 (expression_statement -> statement_expression TOK_semi .)
    TOK_lcurly      reduce using rule 146 (expression_statement -> statement_expression TOK_semi .)
    TOK_semi        reduce using rule 146 (expression_statement -> statement_expression TOK_semi .)
    KW_return       reduce using rule 146 (expression_statement -> statement_expression TOK_semi .)
    KW_obj          reduce using rule 146 (expression_statement -> statement_expression TOK_semi .)
    KW_class        reduce using rule 146 (expression_statement -> statement_expression TOK_semi .)
    KW_protected    reduce using rule 146 (expression_statement -> statement_expression TOK_semi .)
    KW_private      reduce using rule 146 (expression_statement -> statement_expression TOK_semi .)
    TOK_identifier  reduce using rule 146 (expression_statement -> statement_expression TOK_semi .)
    KW_var          reduce using rule 146 (expression_statement -> statement_expression TOK_semi .)
    KW_val          reduce using rule 146 (expression_statement -> statement_expression TOK_semi .)
    TOK_rcurly      reduce using rule 146 (expression_statement -> statement_expression TOK_semi .)
    KW_else         reduce using rule 146 (expression_statement -> statement_expression TOK_semi .)


state 77

    (149) if_then_statement -> KW_if TOK_paraleft . expression TOK_pararight statement
    (150) if_then_else_statement -> KW_if TOK_paraleft . expression TOK_pararight if_then_else_intermediate KW_else statement
    (19) expression -> . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    and_expression                 shift and go to state 83
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    unary_expression               shift and go to state 124
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    expression                     shift and go to state 163

state 78

    (100) declaration_keyword -> KW_var .

    TOK_identifier  reduce using rule 100 (declaration_keyword -> KW_var .)
    TOK_paraleft    reduce using rule 100 (declaration_keyword -> KW_var .)


state 79

    (103) local_variable_declaration -> modifier_question declaration_keyword . variable_declaration_body
    (109) variable_declaration_body -> . identifiers type_question TOK_assignment variable_declaration_initializer
    (110) variable_declaration_body -> . TOK_paraleft variable_list TOK_pararight TOK_assignment TOK_paraleft variable_argument_list TOK_pararight
    (111) identifiers -> . identifiers TOK_comma TOK_identifier
    (112) identifiers -> . TOK_identifier

    TOK_paraleft    shift and go to state 166
    TOK_identifier  shift and go to state 167

    variable_declaration_body      shift and go to state 164
    identifiers                    shift and go to state 165

state 80

    (101) declaration_keyword -> KW_val .

    TOK_identifier  reduce using rule 101 (declaration_keyword -> KW_val .)
    TOK_paraleft    reduce using rule 101 (declaration_keyword -> KW_val .)


state 81

    (29) qualified_id -> name TOK_dot . name
    (30) name -> . TOK_identifier

    TOK_identifier  shift and go to state 12

    name                           shift and go to state 168

state 82

    (199) method_body -> variable_declaration_initializer .

    KW_if           reduce using rule 199 (method_body -> variable_declaration_initializer .)
    KW_while        reduce using rule 199 (method_body -> variable_declaration_initializer .)
    KW_for          reduce using rule 199 (method_body -> variable_declaration_initializer .)
    KW_def          reduce using rule 199 (method_body -> variable_declaration_initializer .)
    TOK_lcurly      reduce using rule 199 (method_body -> variable_declaration_initializer .)
    TOK_semi        reduce using rule 199 (method_body -> variable_declaration_initializer .)
    KW_return       reduce using rule 199 (method_body -> variable_declaration_initializer .)
    KW_obj          reduce using rule 199 (method_body -> variable_declaration_initializer .)
    KW_class        reduce using rule 199 (method_body -> variable_declaration_initializer .)
    KW_protected    reduce using rule 199 (method_body -> variable_declaration_initializer .)
    KW_private      reduce using rule 199 (method_body -> variable_declaration_initializer .)
    TOK_identifier  reduce using rule 199 (method_body -> variable_declaration_initializer .)
    KW_var          reduce using rule 199 (method_body -> variable_declaration_initializer .)
    KW_val          reduce using rule 199 (method_body -> variable_declaration_initializer .)
    TOK_rcurly      reduce using rule 199 (method_body -> variable_declaration_initializer .)


state 83

    (46) exclusive_or_expression -> and_expression .
    (49) and_expression -> and_expression . TOK_and_bitwise equality_expression

    TOK_xor         reduce using rule 46 (exclusive_or_expression -> and_expression .)
    TOK_or_bitwise  reduce using rule 46 (exclusive_or_expression -> and_expression .)
    TOK_and         reduce using rule 46 (exclusive_or_expression -> and_expression .)
    TOK_or          reduce using rule 46 (exclusive_or_expression -> and_expression .)
    TOK_pararight   reduce using rule 46 (exclusive_or_expression -> and_expression .)
    TOK_comma       reduce using rule 46 (exclusive_or_expression -> and_expression .)
    TOK_semi        reduce using rule 46 (exclusive_or_expression -> and_expression .)
    TOK_rsqb        reduce using rule 46 (exclusive_or_expression -> and_expression .)
    KW_by           reduce using rule 46 (exclusive_or_expression -> and_expression .)
    KW_if           reduce using rule 46 (exclusive_or_expression -> and_expression .)
    KW_while        reduce using rule 46 (exclusive_or_expression -> and_expression .)
    KW_for          reduce using rule 46 (exclusive_or_expression -> and_expression .)
    KW_def          reduce using rule 46 (exclusive_or_expression -> and_expression .)
    TOK_lcurly      reduce using rule 46 (exclusive_or_expression -> and_expression .)
    KW_return       reduce using rule 46 (exclusive_or_expression -> and_expression .)
    KW_obj          reduce using rule 46 (exclusive_or_expression -> and_expression .)
    KW_class        reduce using rule 46 (exclusive_or_expression -> and_expression .)
    KW_protected    reduce using rule 46 (exclusive_or_expression -> and_expression .)
    KW_private      reduce using rule 46 (exclusive_or_expression -> and_expression .)
    TOK_identifier  reduce using rule 46 (exclusive_or_expression -> and_expression .)
    KW_var          reduce using rule 46 (exclusive_or_expression -> and_expression .)
    KW_val          reduce using rule 46 (exclusive_or_expression -> and_expression .)
    TOK_rcurly      reduce using rule 46 (exclusive_or_expression -> and_expression .)
    KW_until        reduce using rule 46 (exclusive_or_expression -> and_expression .)
    KW_to           reduce using rule 46 (exclusive_or_expression -> and_expression .)
    KW_else         reduce using rule 46 (exclusive_or_expression -> and_expression .)
    TOK_and_bitwise shift and go to state 169


state 84

    (44) inclusive_or_expression -> exclusive_or_expression .
    (47) exclusive_or_expression -> exclusive_or_expression . TOK_xor and_expression

    TOK_or_bitwise  reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    TOK_and         reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    TOK_or          reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    TOK_comma       reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    TOK_pararight   reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    TOK_rsqb        reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    TOK_semi        reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    KW_by           reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    KW_else         reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    KW_if           reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    KW_while        reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    KW_for          reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    KW_def          reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    TOK_lcurly      reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    KW_return       reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    KW_obj          reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    KW_class        reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    KW_protected    reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    KW_private      reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    TOK_identifier  reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    KW_var          reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    KW_val          reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    TOK_rcurly      reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    KW_until        reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    KW_to           reduce using rule 44 (inclusive_or_expression -> exclusive_or_expression .)
    TOK_xor         shift and go to state 170


state 85

    (78) variable_literal -> primary .

    TOK_times       reduce using rule 78 (variable_literal -> primary .)
    TOK_divide      reduce using rule 78 (variable_literal -> primary .)
    TOK_modulus     reduce using rule 78 (variable_literal -> primary .)
    TOK_plus        reduce using rule 78 (variable_literal -> primary .)
    TOK_minus       reduce using rule 78 (variable_literal -> primary .)
    TOK_lshift      reduce using rule 78 (variable_literal -> primary .)
    TOK_rshift      reduce using rule 78 (variable_literal -> primary .)
    TOK_greater     reduce using rule 78 (variable_literal -> primary .)
    TOK_lesser      reduce using rule 78 (variable_literal -> primary .)
    TOK_geq         reduce using rule 78 (variable_literal -> primary .)
    TOK_leq         reduce using rule 78 (variable_literal -> primary .)
    TOK_equal       reduce using rule 78 (variable_literal -> primary .)
    TOK_nequal      reduce using rule 78 (variable_literal -> primary .)
    TOK_and_bitwise reduce using rule 78 (variable_literal -> primary .)
    TOK_xor         reduce using rule 78 (variable_literal -> primary .)
    TOK_or_bitwise  reduce using rule 78 (variable_literal -> primary .)
    TOK_and         reduce using rule 78 (variable_literal -> primary .)
    TOK_or          reduce using rule 78 (variable_literal -> primary .)
    TOK_comma       reduce using rule 78 (variable_literal -> primary .)
    TOK_pararight   reduce using rule 78 (variable_literal -> primary .)
    TOK_rsqb        reduce using rule 78 (variable_literal -> primary .)
    KW_if           reduce using rule 78 (variable_literal -> primary .)
    KW_while        reduce using rule 78 (variable_literal -> primary .)
    KW_for          reduce using rule 78 (variable_literal -> primary .)
    KW_def          reduce using rule 78 (variable_literal -> primary .)
    TOK_lcurly      reduce using rule 78 (variable_literal -> primary .)
    TOK_semi        reduce using rule 78 (variable_literal -> primary .)
    KW_return       reduce using rule 78 (variable_literal -> primary .)
    KW_obj          reduce using rule 78 (variable_literal -> primary .)
    KW_class        reduce using rule 78 (variable_literal -> primary .)
    KW_protected    reduce using rule 78 (variable_literal -> primary .)
    KW_private      reduce using rule 78 (variable_literal -> primary .)
    TOK_identifier  reduce using rule 78 (variable_literal -> primary .)
    KW_var          reduce using rule 78 (variable_literal -> primary .)
    KW_val          reduce using rule 78 (variable_literal -> primary .)
    TOK_rcurly      reduce using rule 78 (variable_literal -> primary .)
    KW_until        reduce using rule 78 (variable_literal -> primary .)
    KW_to           reduce using rule 78 (variable_literal -> primary .)
    KW_else         reduce using rule 78 (variable_literal -> primary .)
    KW_by           reduce using rule 78 (variable_literal -> primary .)


state 86

    (70) unary_expression -> unary_expression_not_plus_minus .

    TOK_times       reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_divide      reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_modulus     reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_plus        reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_minus       reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_lshift      reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_rshift      reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_greater     reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_lesser      reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_geq         reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_leq         reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_equal       reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_nequal      reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_and_bitwise reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_xor         reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_or_bitwise  reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_and         reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_or          reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    KW_if           reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    KW_while        reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    KW_for          reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    KW_def          reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_lcurly      reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_semi        reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    KW_return       reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    KW_obj          reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    KW_class        reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    KW_protected    reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    KW_private      reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_identifier  reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    KW_var          reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    KW_val          reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_rcurly      reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_comma       reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_pararight   reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    TOK_rsqb        reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    KW_until        reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    KW_to           reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    KW_else         reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)
    KW_by           reduce using rule 70 (unary_expression -> unary_expression_not_plus_minus .)


state 87

    (86) c_literal -> KW_true .

    TOK_times       reduce using rule 86 (c_literal -> KW_true .)
    TOK_divide      reduce using rule 86 (c_literal -> KW_true .)
    TOK_modulus     reduce using rule 86 (c_literal -> KW_true .)
    TOK_plus        reduce using rule 86 (c_literal -> KW_true .)
    TOK_minus       reduce using rule 86 (c_literal -> KW_true .)
    TOK_lshift      reduce using rule 86 (c_literal -> KW_true .)
    TOK_rshift      reduce using rule 86 (c_literal -> KW_true .)
    TOK_greater     reduce using rule 86 (c_literal -> KW_true .)
    TOK_lesser      reduce using rule 86 (c_literal -> KW_true .)
    TOK_geq         reduce using rule 86 (c_literal -> KW_true .)
    TOK_leq         reduce using rule 86 (c_literal -> KW_true .)
    TOK_equal       reduce using rule 86 (c_literal -> KW_true .)
    TOK_nequal      reduce using rule 86 (c_literal -> KW_true .)
    TOK_and_bitwise reduce using rule 86 (c_literal -> KW_true .)
    TOK_xor         reduce using rule 86 (c_literal -> KW_true .)
    TOK_or_bitwise  reduce using rule 86 (c_literal -> KW_true .)
    TOK_and         reduce using rule 86 (c_literal -> KW_true .)
    TOK_or          reduce using rule 86 (c_literal -> KW_true .)
    KW_if           reduce using rule 86 (c_literal -> KW_true .)
    KW_while        reduce using rule 86 (c_literal -> KW_true .)
    KW_for          reduce using rule 86 (c_literal -> KW_true .)
    KW_def          reduce using rule 86 (c_literal -> KW_true .)
    TOK_lcurly      reduce using rule 86 (c_literal -> KW_true .)
    TOK_semi        reduce using rule 86 (c_literal -> KW_true .)
    KW_return       reduce using rule 86 (c_literal -> KW_true .)
    KW_obj          reduce using rule 86 (c_literal -> KW_true .)
    KW_class        reduce using rule 86 (c_literal -> KW_true .)
    KW_protected    reduce using rule 86 (c_literal -> KW_true .)
    KW_private      reduce using rule 86 (c_literal -> KW_true .)
    TOK_identifier  reduce using rule 86 (c_literal -> KW_true .)
    KW_var          reduce using rule 86 (c_literal -> KW_true .)
    KW_val          reduce using rule 86 (c_literal -> KW_true .)
    TOK_rcurly      reduce using rule 86 (c_literal -> KW_true .)
    TOK_comma       reduce using rule 86 (c_literal -> KW_true .)
    TOK_pararight   reduce using rule 86 (c_literal -> KW_true .)
    TOK_rsqb        reduce using rule 86 (c_literal -> KW_true .)
    KW_until        reduce using rule 86 (c_literal -> KW_true .)
    KW_to           reduce using rule 86 (c_literal -> KW_true .)
    KW_else         reduce using rule 86 (c_literal -> KW_true .)
    KW_by           reduce using rule 86 (c_literal -> KW_true .)


state 88

    (24) assignment -> left_hand_side . assignment_operator assignment_expression
    (77) variable_literal -> left_hand_side .
    (34) assignment_operator -> . TOK_assignment
    (35) assignment_operator -> . TOK_mulassign
    (36) assignment_operator -> . TOK_divassign
    (37) assignment_operator -> . TOK_modassign
    (38) assignment_operator -> . TOK_addassign
    (39) assignment_operator -> . TOK_subassign

    TOK_times       reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_divide      reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_modulus     reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_plus        reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_minus       reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_lshift      reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_rshift      reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_greater     reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_lesser      reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_geq         reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_leq         reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_equal       reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_nequal      reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_and_bitwise reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_xor         reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_or_bitwise  reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_and         reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_or          reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_comma       reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_pararight   reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_rsqb        reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_by           reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_semi        reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_else         reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_if           reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_while        reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_for          reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_def          reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_lcurly      reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_return       reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_obj          reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_class        reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_protected    reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_private      reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_identifier  reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_var          reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_val          reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_rcurly      reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_until        reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_to           reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_assignment  shift and go to state 67
    TOK_mulassign   shift and go to state 68
    TOK_divassign   shift and go to state 62
    TOK_modassign   shift and go to state 63
    TOK_addassign   shift and go to state 65
    TOK_subassign   shift and go to state 64

    assignment_operator            shift and go to state 66

state 89

    (25) left_hand_side -> id .
    (31) array_access -> id . dimension
    (91) method_invocation -> id . TOK_paraleft argument_list_question TOK_pararight
    (32) dimension -> . dimension TOK_lsqb expression TOK_rsqb
    (33) dimension -> . TOK_lsqb expression TOK_rsqb

    TOK_times       reduce using rule 25 (left_hand_side -> id .)
    TOK_divide      reduce using rule 25 (left_hand_side -> id .)
    TOK_modulus     reduce using rule 25 (left_hand_side -> id .)
    TOK_plus        reduce using rule 25 (left_hand_side -> id .)
    TOK_minus       reduce using rule 25 (left_hand_side -> id .)
    TOK_lshift      reduce using rule 25 (left_hand_side -> id .)
    TOK_rshift      reduce using rule 25 (left_hand_side -> id .)
    TOK_greater     reduce using rule 25 (left_hand_side -> id .)
    TOK_lesser      reduce using rule 25 (left_hand_side -> id .)
    TOK_geq         reduce using rule 25 (left_hand_side -> id .)
    TOK_leq         reduce using rule 25 (left_hand_side -> id .)
    TOK_equal       reduce using rule 25 (left_hand_side -> id .)
    TOK_nequal      reduce using rule 25 (left_hand_side -> id .)
    TOK_and_bitwise reduce using rule 25 (left_hand_side -> id .)
    TOK_xor         reduce using rule 25 (left_hand_side -> id .)
    TOK_or_bitwise  reduce using rule 25 (left_hand_side -> id .)
    TOK_and         reduce using rule 25 (left_hand_side -> id .)
    TOK_or          reduce using rule 25 (left_hand_side -> id .)
    KW_if           reduce using rule 25 (left_hand_side -> id .)
    KW_while        reduce using rule 25 (left_hand_side -> id .)
    KW_for          reduce using rule 25 (left_hand_side -> id .)
    KW_def          reduce using rule 25 (left_hand_side -> id .)
    TOK_lcurly      reduce using rule 25 (left_hand_side -> id .)
    TOK_semi        reduce using rule 25 (left_hand_side -> id .)
    KW_return       reduce using rule 25 (left_hand_side -> id .)
    KW_obj          reduce using rule 25 (left_hand_side -> id .)
    KW_class        reduce using rule 25 (left_hand_side -> id .)
    KW_protected    reduce using rule 25 (left_hand_side -> id .)
    KW_private      reduce using rule 25 (left_hand_side -> id .)
    TOK_identifier  reduce using rule 25 (left_hand_side -> id .)
    KW_var          reduce using rule 25 (left_hand_side -> id .)
    KW_val          reduce using rule 25 (left_hand_side -> id .)
    TOK_rcurly      reduce using rule 25 (left_hand_side -> id .)
    TOK_comma       reduce using rule 25 (left_hand_side -> id .)
    TOK_pararight   reduce using rule 25 (left_hand_side -> id .)
    TOK_rsqb        reduce using rule 25 (left_hand_side -> id .)
    KW_until        reduce using rule 25 (left_hand_side -> id .)
    KW_to           reduce using rule 25 (left_hand_side -> id .)
    KW_else         reduce using rule 25 (left_hand_side -> id .)
    KW_by           reduce using rule 25 (left_hand_side -> id .)
    TOK_assignment  reduce using rule 25 (left_hand_side -> id .)
    TOK_mulassign   reduce using rule 25 (left_hand_side -> id .)
    TOK_divassign   reduce using rule 25 (left_hand_side -> id .)
    TOK_modassign   reduce using rule 25 (left_hand_side -> id .)
    TOK_addassign   reduce using rule 25 (left_hand_side -> id .)
    TOK_subassign   reduce using rule 25 (left_hand_side -> id .)
    TOK_paraleft    shift and go to state 69
    TOK_lsqb        shift and go to state 71

    dimension                      shift and go to state 70

state 90

    (74) unary_expression_not_plus_minus -> cast_expression .

    TOK_times       reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_divide      reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_modulus     reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_plus        reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_minus       reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_lshift      reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_rshift      reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_greater     reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_lesser      reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_geq         reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_leq         reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_equal       reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_nequal      reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_and_bitwise reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_xor         reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_or_bitwise  reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_and         reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_or          reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    KW_if           reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    KW_while        reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    KW_for          reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    KW_def          reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_lcurly      reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_semi        reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    KW_return       reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    KW_obj          reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    KW_class        reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    KW_protected    reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    KW_private      reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_identifier  reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    KW_var          reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    KW_val          reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_rcurly      reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_comma       reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_pararight   reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    TOK_rsqb        reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    KW_until        reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    KW_to           reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    KW_else         reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)
    KW_by           reduce using rule 74 (unary_expression_not_plus_minus -> cast_expression .)


state 91

    (83) literal -> c_literal .

    TOK_times       reduce using rule 83 (literal -> c_literal .)
    TOK_divide      reduce using rule 83 (literal -> c_literal .)
    TOK_modulus     reduce using rule 83 (literal -> c_literal .)
    TOK_plus        reduce using rule 83 (literal -> c_literal .)
    TOK_minus       reduce using rule 83 (literal -> c_literal .)
    TOK_lshift      reduce using rule 83 (literal -> c_literal .)
    TOK_rshift      reduce using rule 83 (literal -> c_literal .)
    TOK_greater     reduce using rule 83 (literal -> c_literal .)
    TOK_lesser      reduce using rule 83 (literal -> c_literal .)
    TOK_geq         reduce using rule 83 (literal -> c_literal .)
    TOK_leq         reduce using rule 83 (literal -> c_literal .)
    TOK_equal       reduce using rule 83 (literal -> c_literal .)
    TOK_nequal      reduce using rule 83 (literal -> c_literal .)
    TOK_and_bitwise reduce using rule 83 (literal -> c_literal .)
    TOK_xor         reduce using rule 83 (literal -> c_literal .)
    TOK_or_bitwise  reduce using rule 83 (literal -> c_literal .)
    TOK_and         reduce using rule 83 (literal -> c_literal .)
    TOK_or          reduce using rule 83 (literal -> c_literal .)
    TOK_pararight   reduce using rule 83 (literal -> c_literal .)
    TOK_comma       reduce using rule 83 (literal -> c_literal .)
    TOK_semi        reduce using rule 83 (literal -> c_literal .)
    KW_if           reduce using rule 83 (literal -> c_literal .)
    KW_while        reduce using rule 83 (literal -> c_literal .)
    KW_for          reduce using rule 83 (literal -> c_literal .)
    KW_def          reduce using rule 83 (literal -> c_literal .)
    TOK_lcurly      reduce using rule 83 (literal -> c_literal .)
    KW_return       reduce using rule 83 (literal -> c_literal .)
    KW_obj          reduce using rule 83 (literal -> c_literal .)
    KW_class        reduce using rule 83 (literal -> c_literal .)
    KW_protected    reduce using rule 83 (literal -> c_literal .)
    KW_private      reduce using rule 83 (literal -> c_literal .)
    TOK_identifier  reduce using rule 83 (literal -> c_literal .)
    KW_var          reduce using rule 83 (literal -> c_literal .)
    KW_val          reduce using rule 83 (literal -> c_literal .)
    TOK_rcurly      reduce using rule 83 (literal -> c_literal .)
    TOK_rsqb        reduce using rule 83 (literal -> c_literal .)
    KW_until        reduce using rule 83 (literal -> c_literal .)
    KW_to           reduce using rule 83 (literal -> c_literal .)
    KW_else         reduce using rule 83 (literal -> c_literal .)
    KW_by           reduce using rule 83 (literal -> c_literal .)


state 92

    (72) unary_expression_not_plus_minus -> TOK_tilda . unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    int_float                      shift and go to state 120
    c_literal                      shift and go to state 91
    qualified_id                   shift and go to state 47
    variable_literal               shift and go to state 115
    unary_expression               shift and go to state 171
    base_variable_set              shift and go to state 93
    array_access                   shift and go to state 29
    method_invocation              shift and go to state 110
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    literal                        shift and go to state 99
    left_hand_side                 shift and go to state 172
    cast_expression                shift and go to state 90
    id                             shift and go to state 89
    name                           shift and go to state 46

state 93

    (71) unary_expression_not_plus_minus -> base_variable_set .

    TOK_times       reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_divide      reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_modulus     reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_plus        reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_minus       reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_lshift      reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_rshift      reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_greater     reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_lesser      reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_geq         reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_leq         reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_equal       reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_nequal      reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_and_bitwise reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_xor         reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_or_bitwise  reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_and         reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_or          reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_if           reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_while        reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_for          reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_def          reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_lcurly      reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_semi        reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_return       reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_obj          reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_class        reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_protected    reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_private      reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_identifier  reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_var          reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_val          reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_rcurly      reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_comma       reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_pararight   reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    TOK_rsqb        reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_until        reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_to           reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_else         reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)
    KW_by           reduce using rule 71 (unary_expression_not_plus_minus -> base_variable_set .)


state 94

    (42) conditional_and_expression -> inclusive_or_expression .
    (45) inclusive_or_expression -> inclusive_or_expression . TOK_or_bitwise exclusive_or_expression

    TOK_and         reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    TOK_or          reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    TOK_pararight   reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    TOK_comma       reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    KW_until        reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    KW_to           reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    TOK_semi        reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    KW_if           reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    KW_while        reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    KW_for          reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    KW_def          reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    TOK_lcurly      reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    KW_return       reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    KW_obj          reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    KW_class        reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    KW_protected    reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    KW_private      reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    TOK_identifier  reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    KW_var          reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    KW_val          reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    TOK_rcurly      reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    TOK_rsqb        reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    KW_else         reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    KW_by           reduce using rule 42 (conditional_and_expression -> inclusive_or_expression .)
    TOK_or_bitwise  shift and go to state 173


state 95

    (88) c_literal -> KW_null .

    TOK_times       reduce using rule 88 (c_literal -> KW_null .)
    TOK_divide      reduce using rule 88 (c_literal -> KW_null .)
    TOK_modulus     reduce using rule 88 (c_literal -> KW_null .)
    TOK_plus        reduce using rule 88 (c_literal -> KW_null .)
    TOK_minus       reduce using rule 88 (c_literal -> KW_null .)
    TOK_lshift      reduce using rule 88 (c_literal -> KW_null .)
    TOK_rshift      reduce using rule 88 (c_literal -> KW_null .)
    TOK_greater     reduce using rule 88 (c_literal -> KW_null .)
    TOK_lesser      reduce using rule 88 (c_literal -> KW_null .)
    TOK_geq         reduce using rule 88 (c_literal -> KW_null .)
    TOK_leq         reduce using rule 88 (c_literal -> KW_null .)
    TOK_equal       reduce using rule 88 (c_literal -> KW_null .)
    TOK_nequal      reduce using rule 88 (c_literal -> KW_null .)
    TOK_and_bitwise reduce using rule 88 (c_literal -> KW_null .)
    TOK_xor         reduce using rule 88 (c_literal -> KW_null .)
    TOK_or_bitwise  reduce using rule 88 (c_literal -> KW_null .)
    TOK_and         reduce using rule 88 (c_literal -> KW_null .)
    TOK_or          reduce using rule 88 (c_literal -> KW_null .)
    KW_if           reduce using rule 88 (c_literal -> KW_null .)
    KW_while        reduce using rule 88 (c_literal -> KW_null .)
    KW_for          reduce using rule 88 (c_literal -> KW_null .)
    KW_def          reduce using rule 88 (c_literal -> KW_null .)
    TOK_lcurly      reduce using rule 88 (c_literal -> KW_null .)
    TOK_semi        reduce using rule 88 (c_literal -> KW_null .)
    KW_return       reduce using rule 88 (c_literal -> KW_null .)
    KW_obj          reduce using rule 88 (c_literal -> KW_null .)
    KW_class        reduce using rule 88 (c_literal -> KW_null .)
    KW_protected    reduce using rule 88 (c_literal -> KW_null .)
    KW_private      reduce using rule 88 (c_literal -> KW_null .)
    TOK_identifier  reduce using rule 88 (c_literal -> KW_null .)
    KW_var          reduce using rule 88 (c_literal -> KW_null .)
    KW_val          reduce using rule 88 (c_literal -> KW_null .)
    TOK_rcurly      reduce using rule 88 (c_literal -> KW_null .)
    TOK_comma       reduce using rule 88 (c_literal -> KW_null .)
    TOK_pararight   reduce using rule 88 (c_literal -> KW_null .)
    TOK_rsqb        reduce using rule 88 (c_literal -> KW_null .)
    KW_until        reduce using rule 88 (c_literal -> KW_null .)
    KW_to           reduce using rule 88 (c_literal -> KW_null .)
    KW_else         reduce using rule 88 (c_literal -> KW_null .)
    KW_by           reduce using rule 88 (c_literal -> KW_null .)


state 96

    (134) array_initializer -> multidimensional_array_initializer .

    TOK_pararight   reduce using rule 134 (array_initializer -> multidimensional_array_initializer .)
    TOK_comma       reduce using rule 134 (array_initializer -> multidimensional_array_initializer .)
    TOK_semi        reduce using rule 134 (array_initializer -> multidimensional_array_initializer .)
    KW_if           reduce using rule 134 (array_initializer -> multidimensional_array_initializer .)
    KW_while        reduce using rule 134 (array_initializer -> multidimensional_array_initializer .)
    KW_for          reduce using rule 134 (array_initializer -> multidimensional_array_initializer .)
    KW_def          reduce using rule 134 (array_initializer -> multidimensional_array_initializer .)
    TOK_lcurly      reduce using rule 134 (array_initializer -> multidimensional_array_initializer .)
    KW_return       reduce using rule 134 (array_initializer -> multidimensional_array_initializer .)
    KW_obj          reduce using rule 134 (array_initializer -> multidimensional_array_initializer .)
    KW_class        reduce using rule 134 (array_initializer -> multidimensional_array_initializer .)
    KW_protected    reduce using rule 134 (array_initializer -> multidimensional_array_initializer .)
    KW_private      reduce using rule 134 (array_initializer -> multidimensional_array_initializer .)
    TOK_identifier  reduce using rule 134 (array_initializer -> multidimensional_array_initializer .)
    KW_var          reduce using rule 134 (array_initializer -> multidimensional_array_initializer .)
    KW_val          reduce using rule 134 (array_initializer -> multidimensional_array_initializer .)
    TOK_rcurly      reduce using rule 134 (array_initializer -> multidimensional_array_initializer .)


state 97

    (58) shift_expression -> additive_expression .
    (62) additive_expression -> additive_expression . TOK_plus multiplicative_expression
    (63) additive_expression -> additive_expression . TOK_minus multiplicative_expression

    TOK_lshift      reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_rshift      reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_greater     reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_lesser      reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_geq         reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_leq         reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_equal       reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_nequal      reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_and_bitwise reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_xor         reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_or_bitwise  reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_and         reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_or          reduce using rule 58 (shift_expression -> additive_expression .)
    KW_if           reduce using rule 58 (shift_expression -> additive_expression .)
    KW_while        reduce using rule 58 (shift_expression -> additive_expression .)
    KW_for          reduce using rule 58 (shift_expression -> additive_expression .)
    KW_def          reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_lcurly      reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_semi        reduce using rule 58 (shift_expression -> additive_expression .)
    KW_return       reduce using rule 58 (shift_expression -> additive_expression .)
    KW_obj          reduce using rule 58 (shift_expression -> additive_expression .)
    KW_class        reduce using rule 58 (shift_expression -> additive_expression .)
    KW_protected    reduce using rule 58 (shift_expression -> additive_expression .)
    KW_private      reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_identifier  reduce using rule 58 (shift_expression -> additive_expression .)
    KW_var          reduce using rule 58 (shift_expression -> additive_expression .)
    KW_val          reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_rcurly      reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_comma       reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_pararight   reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_rsqb        reduce using rule 58 (shift_expression -> additive_expression .)
    KW_until        reduce using rule 58 (shift_expression -> additive_expression .)
    KW_to           reduce using rule 58 (shift_expression -> additive_expression .)
    KW_else         reduce using rule 58 (shift_expression -> additive_expression .)
    KW_by           reduce using rule 58 (shift_expression -> additive_expression .)
    TOK_plus        shift and go to state 175
    TOK_minus       shift and go to state 174


state 98

    (53) relational_expression -> shift_expression .
    (59) shift_expression -> shift_expression . TOK_lshift additive_expression
    (60) shift_expression -> shift_expression . TOK_rshift additive_expression

    TOK_greater     reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_lesser      reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_geq         reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_leq         reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_equal       reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_nequal      reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_and_bitwise reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_xor         reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_or_bitwise  reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_and         reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_or          reduce using rule 53 (relational_expression -> shift_expression .)
    KW_if           reduce using rule 53 (relational_expression -> shift_expression .)
    KW_while        reduce using rule 53 (relational_expression -> shift_expression .)
    KW_for          reduce using rule 53 (relational_expression -> shift_expression .)
    KW_def          reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_lcurly      reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_semi        reduce using rule 53 (relational_expression -> shift_expression .)
    KW_return       reduce using rule 53 (relational_expression -> shift_expression .)
    KW_obj          reduce using rule 53 (relational_expression -> shift_expression .)
    KW_class        reduce using rule 53 (relational_expression -> shift_expression .)
    KW_protected    reduce using rule 53 (relational_expression -> shift_expression .)
    KW_private      reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_identifier  reduce using rule 53 (relational_expression -> shift_expression .)
    KW_var          reduce using rule 53 (relational_expression -> shift_expression .)
    KW_val          reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_rcurly      reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_comma       reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_pararight   reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_rsqb        reduce using rule 53 (relational_expression -> shift_expression .)
    KW_until        reduce using rule 53 (relational_expression -> shift_expression .)
    KW_to           reduce using rule 53 (relational_expression -> shift_expression .)
    KW_else         reduce using rule 53 (relational_expression -> shift_expression .)
    KW_by           reduce using rule 53 (relational_expression -> shift_expression .)
    TOK_lshift      shift and go to state 177
    TOK_rshift      shift and go to state 176


state 99

    (80) primary -> literal .

    TOK_times       reduce using rule 80 (primary -> literal .)
    TOK_divide      reduce using rule 80 (primary -> literal .)
    TOK_modulus     reduce using rule 80 (primary -> literal .)
    TOK_plus        reduce using rule 80 (primary -> literal .)
    TOK_minus       reduce using rule 80 (primary -> literal .)
    TOK_lshift      reduce using rule 80 (primary -> literal .)
    TOK_rshift      reduce using rule 80 (primary -> literal .)
    TOK_greater     reduce using rule 80 (primary -> literal .)
    TOK_lesser      reduce using rule 80 (primary -> literal .)
    TOK_geq         reduce using rule 80 (primary -> literal .)
    TOK_leq         reduce using rule 80 (primary -> literal .)
    TOK_equal       reduce using rule 80 (primary -> literal .)
    TOK_nequal      reduce using rule 80 (primary -> literal .)
    TOK_and_bitwise reduce using rule 80 (primary -> literal .)
    TOK_xor         reduce using rule 80 (primary -> literal .)
    TOK_or_bitwise  reduce using rule 80 (primary -> literal .)
    TOK_and         reduce using rule 80 (primary -> literal .)
    TOK_or          reduce using rule 80 (primary -> literal .)
    KW_if           reduce using rule 80 (primary -> literal .)
    KW_while        reduce using rule 80 (primary -> literal .)
    KW_for          reduce using rule 80 (primary -> literal .)
    KW_def          reduce using rule 80 (primary -> literal .)
    TOK_lcurly      reduce using rule 80 (primary -> literal .)
    TOK_semi        reduce using rule 80 (primary -> literal .)
    KW_return       reduce using rule 80 (primary -> literal .)
    KW_obj          reduce using rule 80 (primary -> literal .)
    KW_class        reduce using rule 80 (primary -> literal .)
    KW_protected    reduce using rule 80 (primary -> literal .)
    KW_private      reduce using rule 80 (primary -> literal .)
    TOK_identifier  reduce using rule 80 (primary -> literal .)
    KW_var          reduce using rule 80 (primary -> literal .)
    KW_val          reduce using rule 80 (primary -> literal .)
    TOK_rcurly      reduce using rule 80 (primary -> literal .)
    TOK_comma       reduce using rule 80 (primary -> literal .)
    TOK_pararight   reduce using rule 80 (primary -> literal .)
    TOK_rsqb        reduce using rule 80 (primary -> literal .)
    KW_until        reduce using rule 80 (primary -> literal .)
    KW_to           reduce using rule 80 (primary -> literal .)
    KW_else         reduce using rule 80 (primary -> literal .)
    KW_by           reduce using rule 80 (primary -> literal .)


state 100

    (23) if_else_expression -> KW_if . TOK_paraleft expression TOK_pararight expression KW_else expression

    TOK_paraleft    shift and go to state 178


state 101

    (131) array_initializer -> KW_new . KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight
    (136) class_initializer -> KW_new . name TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier

    KW_array        shift and go to state 179
    TOK_identifier  shift and go to state 12

    name                           shift and go to state 180

state 102

    (21) assignment_expression -> conditional_or_expression .
    (41) conditional_or_expression -> conditional_or_expression . TOK_or conditional_and_expression

    TOK_comma       reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    TOK_pararight   reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    KW_by           reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    TOK_semi        reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    TOK_rsqb        reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    KW_until        reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    KW_to           reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    KW_if           reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    KW_while        reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    KW_for          reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    KW_def          reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    TOK_lcurly      reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    KW_return       reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    KW_obj          reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    KW_class        reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    KW_protected    reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    KW_private      reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    TOK_identifier  reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    KW_var          reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    KW_val          reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    TOK_rcurly      reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    KW_else         reduce using rule 21 (assignment_expression -> conditional_or_expression .)
    TOK_or          shift and go to state 181


state 103

    (50) equality_expression -> relational_expression .
    (54) relational_expression -> relational_expression . TOK_greater shift_expression
    (55) relational_expression -> relational_expression . TOK_lesser shift_expression
    (56) relational_expression -> relational_expression . TOK_geq shift_expression
    (57) relational_expression -> relational_expression . TOK_leq shift_expression

    TOK_equal       reduce using rule 50 (equality_expression -> relational_expression .)
    TOK_nequal      reduce using rule 50 (equality_expression -> relational_expression .)
    TOK_and_bitwise reduce using rule 50 (equality_expression -> relational_expression .)
    TOK_xor         reduce using rule 50 (equality_expression -> relational_expression .)
    TOK_or_bitwise  reduce using rule 50 (equality_expression -> relational_expression .)
    TOK_and         reduce using rule 50 (equality_expression -> relational_expression .)
    TOK_or          reduce using rule 50 (equality_expression -> relational_expression .)
    TOK_pararight   reduce using rule 50 (equality_expression -> relational_expression .)
    KW_if           reduce using rule 50 (equality_expression -> relational_expression .)
    KW_while        reduce using rule 50 (equality_expression -> relational_expression .)
    KW_for          reduce using rule 50 (equality_expression -> relational_expression .)
    KW_def          reduce using rule 50 (equality_expression -> relational_expression .)
    TOK_lcurly      reduce using rule 50 (equality_expression -> relational_expression .)
    TOK_semi        reduce using rule 50 (equality_expression -> relational_expression .)
    KW_return       reduce using rule 50 (equality_expression -> relational_expression .)
    KW_obj          reduce using rule 50 (equality_expression -> relational_expression .)
    KW_class        reduce using rule 50 (equality_expression -> relational_expression .)
    KW_protected    reduce using rule 50 (equality_expression -> relational_expression .)
    KW_private      reduce using rule 50 (equality_expression -> relational_expression .)
    TOK_identifier  reduce using rule 50 (equality_expression -> relational_expression .)
    KW_var          reduce using rule 50 (equality_expression -> relational_expression .)
    KW_val          reduce using rule 50 (equality_expression -> relational_expression .)
    TOK_rcurly      reduce using rule 50 (equality_expression -> relational_expression .)
    TOK_comma       reduce using rule 50 (equality_expression -> relational_expression .)
    KW_until        reduce using rule 50 (equality_expression -> relational_expression .)
    KW_to           reduce using rule 50 (equality_expression -> relational_expression .)
    TOK_rsqb        reduce using rule 50 (equality_expression -> relational_expression .)
    KW_else         reduce using rule 50 (equality_expression -> relational_expression .)
    KW_by           reduce using rule 50 (equality_expression -> relational_expression .)
    TOK_greater     shift and go to state 185
    TOK_lesser      shift and go to state 183
    TOK_geq         shift and go to state 182
    TOK_leq         shift and go to state 184


state 104

    (85) c_literal -> TOK_string .

    TOK_times       reduce using rule 85 (c_literal -> TOK_string .)
    TOK_divide      reduce using rule 85 (c_literal -> TOK_string .)
    TOK_modulus     reduce using rule 85 (c_literal -> TOK_string .)
    TOK_plus        reduce using rule 85 (c_literal -> TOK_string .)
    TOK_minus       reduce using rule 85 (c_literal -> TOK_string .)
    TOK_lshift      reduce using rule 85 (c_literal -> TOK_string .)
    TOK_rshift      reduce using rule 85 (c_literal -> TOK_string .)
    TOK_greater     reduce using rule 85 (c_literal -> TOK_string .)
    TOK_lesser      reduce using rule 85 (c_literal -> TOK_string .)
    TOK_geq         reduce using rule 85 (c_literal -> TOK_string .)
    TOK_leq         reduce using rule 85 (c_literal -> TOK_string .)
    TOK_equal       reduce using rule 85 (c_literal -> TOK_string .)
    TOK_nequal      reduce using rule 85 (c_literal -> TOK_string .)
    TOK_and_bitwise reduce using rule 85 (c_literal -> TOK_string .)
    TOK_xor         reduce using rule 85 (c_literal -> TOK_string .)
    TOK_or_bitwise  reduce using rule 85 (c_literal -> TOK_string .)
    TOK_and         reduce using rule 85 (c_literal -> TOK_string .)
    TOK_or          reduce using rule 85 (c_literal -> TOK_string .)
    KW_if           reduce using rule 85 (c_literal -> TOK_string .)
    KW_while        reduce using rule 85 (c_literal -> TOK_string .)
    KW_for          reduce using rule 85 (c_literal -> TOK_string .)
    KW_def          reduce using rule 85 (c_literal -> TOK_string .)
    TOK_lcurly      reduce using rule 85 (c_literal -> TOK_string .)
    TOK_semi        reduce using rule 85 (c_literal -> TOK_string .)
    KW_return       reduce using rule 85 (c_literal -> TOK_string .)
    KW_obj          reduce using rule 85 (c_literal -> TOK_string .)
    KW_class        reduce using rule 85 (c_literal -> TOK_string .)
    KW_protected    reduce using rule 85 (c_literal -> TOK_string .)
    KW_private      reduce using rule 85 (c_literal -> TOK_string .)
    TOK_identifier  reduce using rule 85 (c_literal -> TOK_string .)
    KW_var          reduce using rule 85 (c_literal -> TOK_string .)
    KW_val          reduce using rule 85 (c_literal -> TOK_string .)
    TOK_rcurly      reduce using rule 85 (c_literal -> TOK_string .)
    TOK_comma       reduce using rule 85 (c_literal -> TOK_string .)
    TOK_pararight   reduce using rule 85 (c_literal -> TOK_string .)
    TOK_rsqb        reduce using rule 85 (c_literal -> TOK_string .)
    KW_until        reduce using rule 85 (c_literal -> TOK_string .)
    KW_to           reduce using rule 85 (c_literal -> TOK_string .)
    KW_else         reduce using rule 85 (c_literal -> TOK_string .)
    KW_by           reduce using rule 85 (c_literal -> TOK_string .)


state 105

    (22) assignment_expression -> if_else_expression .

    TOK_comma       reduce using rule 22 (assignment_expression -> if_else_expression .)
    TOK_pararight   reduce using rule 22 (assignment_expression -> if_else_expression .)
    KW_by           reduce using rule 22 (assignment_expression -> if_else_expression .)
    TOK_semi        reduce using rule 22 (assignment_expression -> if_else_expression .)
    TOK_rsqb        reduce using rule 22 (assignment_expression -> if_else_expression .)
    KW_until        reduce using rule 22 (assignment_expression -> if_else_expression .)
    KW_to           reduce using rule 22 (assignment_expression -> if_else_expression .)
    KW_if           reduce using rule 22 (assignment_expression -> if_else_expression .)
    KW_while        reduce using rule 22 (assignment_expression -> if_else_expression .)
    KW_for          reduce using rule 22 (assignment_expression -> if_else_expression .)
    KW_def          reduce using rule 22 (assignment_expression -> if_else_expression .)
    TOK_lcurly      reduce using rule 22 (assignment_expression -> if_else_expression .)
    KW_return       reduce using rule 22 (assignment_expression -> if_else_expression .)
    KW_obj          reduce using rule 22 (assignment_expression -> if_else_expression .)
    KW_class        reduce using rule 22 (assignment_expression -> if_else_expression .)
    KW_protected    reduce using rule 22 (assignment_expression -> if_else_expression .)
    KW_private      reduce using rule 22 (assignment_expression -> if_else_expression .)
    TOK_identifier  reduce using rule 22 (assignment_expression -> if_else_expression .)
    KW_var          reduce using rule 22 (assignment_expression -> if_else_expression .)
    KW_val          reduce using rule 22 (assignment_expression -> if_else_expression .)
    TOK_rcurly      reduce using rule 22 (assignment_expression -> if_else_expression .)
    KW_else         reduce using rule 22 (assignment_expression -> if_else_expression .)


state 106

    (73) unary_expression_not_plus_minus -> TOK_not . unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    int_float                      shift and go to state 120
    c_literal                      shift and go to state 91
    qualified_id                   shift and go to state 47
    variable_literal               shift and go to state 115
    unary_expression               shift and go to state 186
    base_variable_set              shift and go to state 93
    array_access                   shift and go to state 29
    method_invocation              shift and go to state 110
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    literal                        shift and go to state 99
    left_hand_side                 shift and go to state 172
    cast_expression                shift and go to state 90
    id                             shift and go to state 89
    name                           shift and go to state 46

state 107

    (19) expression -> assignment_expression .

    TOK_comma       reduce using rule 19 (expression -> assignment_expression .)
    TOK_pararight   reduce using rule 19 (expression -> assignment_expression .)
    TOK_semi        reduce using rule 19 (expression -> assignment_expression .)
    KW_if           reduce using rule 19 (expression -> assignment_expression .)
    KW_while        reduce using rule 19 (expression -> assignment_expression .)
    KW_for          reduce using rule 19 (expression -> assignment_expression .)
    KW_def          reduce using rule 19 (expression -> assignment_expression .)
    TOK_lcurly      reduce using rule 19 (expression -> assignment_expression .)
    KW_return       reduce using rule 19 (expression -> assignment_expression .)
    KW_obj          reduce using rule 19 (expression -> assignment_expression .)
    KW_class        reduce using rule 19 (expression -> assignment_expression .)
    KW_protected    reduce using rule 19 (expression -> assignment_expression .)
    KW_private      reduce using rule 19 (expression -> assignment_expression .)
    TOK_identifier  reduce using rule 19 (expression -> assignment_expression .)
    KW_var          reduce using rule 19 (expression -> assignment_expression .)
    KW_val          reduce using rule 19 (expression -> assignment_expression .)
    TOK_rcurly      reduce using rule 19 (expression -> assignment_expression .)
    TOK_rsqb        reduce using rule 19 (expression -> assignment_expression .)
    KW_until        reduce using rule 19 (expression -> assignment_expression .)
    KW_to           reduce using rule 19 (expression -> assignment_expression .)
    KW_else         reduce using rule 19 (expression -> assignment_expression .)
    KW_by           reduce using rule 19 (expression -> assignment_expression .)


state 108

    (20) assignment_expression -> assignment .

    TOK_comma       reduce using rule 20 (assignment_expression -> assignment .)
    TOK_pararight   reduce using rule 20 (assignment_expression -> assignment .)
    KW_by           reduce using rule 20 (assignment_expression -> assignment .)
    TOK_semi        reduce using rule 20 (assignment_expression -> assignment .)
    TOK_rsqb        reduce using rule 20 (assignment_expression -> assignment .)
    KW_until        reduce using rule 20 (assignment_expression -> assignment .)
    KW_to           reduce using rule 20 (assignment_expression -> assignment .)
    KW_if           reduce using rule 20 (assignment_expression -> assignment .)
    KW_while        reduce using rule 20 (assignment_expression -> assignment .)
    KW_for          reduce using rule 20 (assignment_expression -> assignment .)
    KW_def          reduce using rule 20 (assignment_expression -> assignment .)
    TOK_lcurly      reduce using rule 20 (assignment_expression -> assignment .)
    KW_return       reduce using rule 20 (assignment_expression -> assignment .)
    KW_obj          reduce using rule 20 (assignment_expression -> assignment .)
    KW_class        reduce using rule 20 (assignment_expression -> assignment .)
    KW_protected    reduce using rule 20 (assignment_expression -> assignment .)
    KW_private      reduce using rule 20 (assignment_expression -> assignment .)
    TOK_identifier  reduce using rule 20 (assignment_expression -> assignment .)
    KW_var          reduce using rule 20 (assignment_expression -> assignment .)
    KW_val          reduce using rule 20 (assignment_expression -> assignment .)
    TOK_rcurly      reduce using rule 20 (assignment_expression -> assignment .)
    KW_else         reduce using rule 20 (assignment_expression -> assignment .)


state 109

    (61) additive_expression -> multiplicative_expression .
    (65) multiplicative_expression -> multiplicative_expression . TOK_times unary_expression
    (66) multiplicative_expression -> multiplicative_expression . TOK_divide unary_expression
    (67) multiplicative_expression -> multiplicative_expression . TOK_modulus unary_expression

    TOK_plus        reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_minus       reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_lshift      reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_rshift      reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_greater     reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_lesser      reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_geq         reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_leq         reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_equal       reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_nequal      reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_and_bitwise reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_xor         reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_or_bitwise  reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_and         reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_or          reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_pararight   reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_comma       reduce using rule 61 (additive_expression -> multiplicative_expression .)
    KW_if           reduce using rule 61 (additive_expression -> multiplicative_expression .)
    KW_while        reduce using rule 61 (additive_expression -> multiplicative_expression .)
    KW_for          reduce using rule 61 (additive_expression -> multiplicative_expression .)
    KW_def          reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_lcurly      reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_semi        reduce using rule 61 (additive_expression -> multiplicative_expression .)
    KW_return       reduce using rule 61 (additive_expression -> multiplicative_expression .)
    KW_obj          reduce using rule 61 (additive_expression -> multiplicative_expression .)
    KW_class        reduce using rule 61 (additive_expression -> multiplicative_expression .)
    KW_protected    reduce using rule 61 (additive_expression -> multiplicative_expression .)
    KW_private      reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_identifier  reduce using rule 61 (additive_expression -> multiplicative_expression .)
    KW_var          reduce using rule 61 (additive_expression -> multiplicative_expression .)
    KW_val          reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_rcurly      reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_rsqb        reduce using rule 61 (additive_expression -> multiplicative_expression .)
    KW_until        reduce using rule 61 (additive_expression -> multiplicative_expression .)
    KW_to           reduce using rule 61 (additive_expression -> multiplicative_expression .)
    KW_else         reduce using rule 61 (additive_expression -> multiplicative_expression .)
    KW_by           reduce using rule 61 (additive_expression -> multiplicative_expression .)
    TOK_times       shift and go to state 187
    TOK_divide      shift and go to state 188
    TOK_modulus     shift and go to state 189


state 110

    (81) primary -> method_invocation .

    TOK_times       reduce using rule 81 (primary -> method_invocation .)
    TOK_divide      reduce using rule 81 (primary -> method_invocation .)
    TOK_modulus     reduce using rule 81 (primary -> method_invocation .)
    TOK_plus        reduce using rule 81 (primary -> method_invocation .)
    TOK_minus       reduce using rule 81 (primary -> method_invocation .)
    TOK_lshift      reduce using rule 81 (primary -> method_invocation .)
    TOK_rshift      reduce using rule 81 (primary -> method_invocation .)
    TOK_greater     reduce using rule 81 (primary -> method_invocation .)
    TOK_lesser      reduce using rule 81 (primary -> method_invocation .)
    TOK_geq         reduce using rule 81 (primary -> method_invocation .)
    TOK_leq         reduce using rule 81 (primary -> method_invocation .)
    TOK_equal       reduce using rule 81 (primary -> method_invocation .)
    TOK_nequal      reduce using rule 81 (primary -> method_invocation .)
    TOK_and_bitwise reduce using rule 81 (primary -> method_invocation .)
    TOK_xor         reduce using rule 81 (primary -> method_invocation .)
    TOK_or_bitwise  reduce using rule 81 (primary -> method_invocation .)
    TOK_and         reduce using rule 81 (primary -> method_invocation .)
    TOK_or          reduce using rule 81 (primary -> method_invocation .)
    KW_if           reduce using rule 81 (primary -> method_invocation .)
    KW_while        reduce using rule 81 (primary -> method_invocation .)
    KW_for          reduce using rule 81 (primary -> method_invocation .)
    KW_def          reduce using rule 81 (primary -> method_invocation .)
    TOK_lcurly      reduce using rule 81 (primary -> method_invocation .)
    TOK_semi        reduce using rule 81 (primary -> method_invocation .)
    KW_return       reduce using rule 81 (primary -> method_invocation .)
    KW_obj          reduce using rule 81 (primary -> method_invocation .)
    KW_class        reduce using rule 81 (primary -> method_invocation .)
    KW_protected    reduce using rule 81 (primary -> method_invocation .)
    KW_private      reduce using rule 81 (primary -> method_invocation .)
    TOK_identifier  reduce using rule 81 (primary -> method_invocation .)
    KW_var          reduce using rule 81 (primary -> method_invocation .)
    KW_val          reduce using rule 81 (primary -> method_invocation .)
    TOK_rcurly      reduce using rule 81 (primary -> method_invocation .)
    TOK_comma       reduce using rule 81 (primary -> method_invocation .)
    TOK_pararight   reduce using rule 81 (primary -> method_invocation .)
    TOK_rsqb        reduce using rule 81 (primary -> method_invocation .)
    KW_until        reduce using rule 81 (primary -> method_invocation .)
    KW_to           reduce using rule 81 (primary -> method_invocation .)
    KW_else         reduce using rule 81 (primary -> method_invocation .)
    KW_by           reduce using rule 81 (primary -> method_invocation .)


state 111

    (84) c_literal -> TOK_char .

    TOK_times       reduce using rule 84 (c_literal -> TOK_char .)
    TOK_divide      reduce using rule 84 (c_literal -> TOK_char .)
    TOK_modulus     reduce using rule 84 (c_literal -> TOK_char .)
    TOK_plus        reduce using rule 84 (c_literal -> TOK_char .)
    TOK_minus       reduce using rule 84 (c_literal -> TOK_char .)
    TOK_lshift      reduce using rule 84 (c_literal -> TOK_char .)
    TOK_rshift      reduce using rule 84 (c_literal -> TOK_char .)
    TOK_greater     reduce using rule 84 (c_literal -> TOK_char .)
    TOK_lesser      reduce using rule 84 (c_literal -> TOK_char .)
    TOK_geq         reduce using rule 84 (c_literal -> TOK_char .)
    TOK_leq         reduce using rule 84 (c_literal -> TOK_char .)
    TOK_equal       reduce using rule 84 (c_literal -> TOK_char .)
    TOK_nequal      reduce using rule 84 (c_literal -> TOK_char .)
    TOK_and_bitwise reduce using rule 84 (c_literal -> TOK_char .)
    TOK_xor         reduce using rule 84 (c_literal -> TOK_char .)
    TOK_or_bitwise  reduce using rule 84 (c_literal -> TOK_char .)
    TOK_and         reduce using rule 84 (c_literal -> TOK_char .)
    TOK_or          reduce using rule 84 (c_literal -> TOK_char .)
    KW_if           reduce using rule 84 (c_literal -> TOK_char .)
    KW_while        reduce using rule 84 (c_literal -> TOK_char .)
    KW_for          reduce using rule 84 (c_literal -> TOK_char .)
    KW_def          reduce using rule 84 (c_literal -> TOK_char .)
    TOK_lcurly      reduce using rule 84 (c_literal -> TOK_char .)
    TOK_semi        reduce using rule 84 (c_literal -> TOK_char .)
    KW_return       reduce using rule 84 (c_literal -> TOK_char .)
    KW_obj          reduce using rule 84 (c_literal -> TOK_char .)
    KW_class        reduce using rule 84 (c_literal -> TOK_char .)
    KW_protected    reduce using rule 84 (c_literal -> TOK_char .)
    KW_private      reduce using rule 84 (c_literal -> TOK_char .)
    TOK_identifier  reduce using rule 84 (c_literal -> TOK_char .)
    KW_var          reduce using rule 84 (c_literal -> TOK_char .)
    KW_val          reduce using rule 84 (c_literal -> TOK_char .)
    TOK_rcurly      reduce using rule 84 (c_literal -> TOK_char .)
    TOK_comma       reduce using rule 84 (c_literal -> TOK_char .)
    TOK_pararight   reduce using rule 84 (c_literal -> TOK_char .)
    TOK_rsqb        reduce using rule 84 (c_literal -> TOK_char .)
    KW_until        reduce using rule 84 (c_literal -> TOK_char .)
    KW_to           reduce using rule 84 (c_literal -> TOK_char .)
    KW_else         reduce using rule 84 (c_literal -> TOK_char .)
    KW_by           reduce using rule 84 (c_literal -> TOK_char .)


state 112

    (68) unary_expression -> TOK_plus . unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    int_float                      shift and go to state 120
    c_literal                      shift and go to state 91
    qualified_id                   shift and go to state 47
    variable_literal               shift and go to state 115
    unary_expression               shift and go to state 190
    base_variable_set              shift and go to state 93
    array_access                   shift and go to state 29
    method_invocation              shift and go to state 110
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    literal                        shift and go to state 99
    left_hand_side                 shift and go to state 172
    cast_expression                shift and go to state 90
    id                             shift and go to state 89
    name                           shift and go to state 46

state 113

    (187) method_declaration -> method_header method_body .

    KW_if           reduce using rule 187 (method_declaration -> method_header method_body .)
    KW_while        reduce using rule 187 (method_declaration -> method_header method_body .)
    KW_for          reduce using rule 187 (method_declaration -> method_header method_body .)
    KW_def          reduce using rule 187 (method_declaration -> method_header method_body .)
    TOK_lcurly      reduce using rule 187 (method_declaration -> method_header method_body .)
    TOK_semi        reduce using rule 187 (method_declaration -> method_header method_body .)
    KW_return       reduce using rule 187 (method_declaration -> method_header method_body .)
    KW_obj          reduce using rule 187 (method_declaration -> method_header method_body .)
    KW_class        reduce using rule 187 (method_declaration -> method_header method_body .)
    KW_protected    reduce using rule 187 (method_declaration -> method_header method_body .)
    KW_private      reduce using rule 187 (method_declaration -> method_header method_body .)
    TOK_identifier  reduce using rule 187 (method_declaration -> method_header method_body .)
    KW_var          reduce using rule 187 (method_declaration -> method_header method_body .)
    KW_val          reduce using rule 187 (method_declaration -> method_header method_body .)
    TOK_rcurly      reduce using rule 187 (method_declaration -> method_header method_body .)


state 114

    (106) variable_declaration_initializer -> class_initializer .

    TOK_comma       reduce using rule 106 (variable_declaration_initializer -> class_initializer .)
    TOK_pararight   reduce using rule 106 (variable_declaration_initializer -> class_initializer .)
    TOK_semi        reduce using rule 106 (variable_declaration_initializer -> class_initializer .)
    KW_if           reduce using rule 106 (variable_declaration_initializer -> class_initializer .)
    KW_while        reduce using rule 106 (variable_declaration_initializer -> class_initializer .)
    KW_for          reduce using rule 106 (variable_declaration_initializer -> class_initializer .)
    KW_def          reduce using rule 106 (variable_declaration_initializer -> class_initializer .)
    TOK_lcurly      reduce using rule 106 (variable_declaration_initializer -> class_initializer .)
    KW_return       reduce using rule 106 (variable_declaration_initializer -> class_initializer .)
    KW_obj          reduce using rule 106 (variable_declaration_initializer -> class_initializer .)
    KW_class        reduce using rule 106 (variable_declaration_initializer -> class_initializer .)
    KW_protected    reduce using rule 106 (variable_declaration_initializer -> class_initializer .)
    KW_private      reduce using rule 106 (variable_declaration_initializer -> class_initializer .)
    TOK_identifier  reduce using rule 106 (variable_declaration_initializer -> class_initializer .)
    KW_var          reduce using rule 106 (variable_declaration_initializer -> class_initializer .)
    KW_val          reduce using rule 106 (variable_declaration_initializer -> class_initializer .)
    TOK_rcurly      reduce using rule 106 (variable_declaration_initializer -> class_initializer .)


state 115

    (75) base_variable_set -> variable_literal .

    TOK_times       reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_divide      reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_modulus     reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_plus        reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_minus       reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_lshift      reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_rshift      reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_greater     reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_lesser      reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_geq         reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_leq         reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_equal       reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_nequal      reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_and_bitwise reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_xor         reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_or_bitwise  reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_and         reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_or          reduce using rule 75 (base_variable_set -> variable_literal .)
    KW_if           reduce using rule 75 (base_variable_set -> variable_literal .)
    KW_while        reduce using rule 75 (base_variable_set -> variable_literal .)
    KW_for          reduce using rule 75 (base_variable_set -> variable_literal .)
    KW_def          reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_lcurly      reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_semi        reduce using rule 75 (base_variable_set -> variable_literal .)
    KW_return       reduce using rule 75 (base_variable_set -> variable_literal .)
    KW_obj          reduce using rule 75 (base_variable_set -> variable_literal .)
    KW_class        reduce using rule 75 (base_variable_set -> variable_literal .)
    KW_protected    reduce using rule 75 (base_variable_set -> variable_literal .)
    KW_private      reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_identifier  reduce using rule 75 (base_variable_set -> variable_literal .)
    KW_var          reduce using rule 75 (base_variable_set -> variable_literal .)
    KW_val          reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_rcurly      reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_comma       reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_pararight   reduce using rule 75 (base_variable_set -> variable_literal .)
    TOK_rsqb        reduce using rule 75 (base_variable_set -> variable_literal .)
    KW_until        reduce using rule 75 (base_variable_set -> variable_literal .)
    KW_to           reduce using rule 75 (base_variable_set -> variable_literal .)
    KW_else         reduce using rule 75 (base_variable_set -> variable_literal .)
    KW_by           reduce using rule 75 (base_variable_set -> variable_literal .)


state 116

    (87) c_literal -> KW_false .

    TOK_times       reduce using rule 87 (c_literal -> KW_false .)
    TOK_divide      reduce using rule 87 (c_literal -> KW_false .)
    TOK_modulus     reduce using rule 87 (c_literal -> KW_false .)
    TOK_plus        reduce using rule 87 (c_literal -> KW_false .)
    TOK_minus       reduce using rule 87 (c_literal -> KW_false .)
    TOK_lshift      reduce using rule 87 (c_literal -> KW_false .)
    TOK_rshift      reduce using rule 87 (c_literal -> KW_false .)
    TOK_greater     reduce using rule 87 (c_literal -> KW_false .)
    TOK_lesser      reduce using rule 87 (c_literal -> KW_false .)
    TOK_geq         reduce using rule 87 (c_literal -> KW_false .)
    TOK_leq         reduce using rule 87 (c_literal -> KW_false .)
    TOK_equal       reduce using rule 87 (c_literal -> KW_false .)
    TOK_nequal      reduce using rule 87 (c_literal -> KW_false .)
    TOK_and_bitwise reduce using rule 87 (c_literal -> KW_false .)
    TOK_xor         reduce using rule 87 (c_literal -> KW_false .)
    TOK_or_bitwise  reduce using rule 87 (c_literal -> KW_false .)
    TOK_and         reduce using rule 87 (c_literal -> KW_false .)
    TOK_or          reduce using rule 87 (c_literal -> KW_false .)
    KW_if           reduce using rule 87 (c_literal -> KW_false .)
    KW_while        reduce using rule 87 (c_literal -> KW_false .)
    KW_for          reduce using rule 87 (c_literal -> KW_false .)
    KW_def          reduce using rule 87 (c_literal -> KW_false .)
    TOK_lcurly      reduce using rule 87 (c_literal -> KW_false .)
    TOK_semi        reduce using rule 87 (c_literal -> KW_false .)
    KW_return       reduce using rule 87 (c_literal -> KW_false .)
    KW_obj          reduce using rule 87 (c_literal -> KW_false .)
    KW_class        reduce using rule 87 (c_literal -> KW_false .)
    KW_protected    reduce using rule 87 (c_literal -> KW_false .)
    KW_private      reduce using rule 87 (c_literal -> KW_false .)
    TOK_identifier  reduce using rule 87 (c_literal -> KW_false .)
    KW_var          reduce using rule 87 (c_literal -> KW_false .)
    KW_val          reduce using rule 87 (c_literal -> KW_false .)
    TOK_rcurly      reduce using rule 87 (c_literal -> KW_false .)
    TOK_comma       reduce using rule 87 (c_literal -> KW_false .)
    TOK_pararight   reduce using rule 87 (c_literal -> KW_false .)
    TOK_rsqb        reduce using rule 87 (c_literal -> KW_false .)
    KW_until        reduce using rule 87 (c_literal -> KW_false .)
    KW_to           reduce using rule 87 (c_literal -> KW_false .)
    KW_else         reduce using rule 87 (c_literal -> KW_false .)
    KW_by           reduce using rule 87 (c_literal -> KW_false .)


state 117

    (48) and_expression -> equality_expression .
    (51) equality_expression -> equality_expression . TOK_equal relational_expression
    (52) equality_expression -> equality_expression . TOK_nequal relational_expression

    TOK_and_bitwise reduce using rule 48 (and_expression -> equality_expression .)
    TOK_xor         reduce using rule 48 (and_expression -> equality_expression .)
    TOK_or_bitwise  reduce using rule 48 (and_expression -> equality_expression .)
    TOK_and         reduce using rule 48 (and_expression -> equality_expression .)
    TOK_or          reduce using rule 48 (and_expression -> equality_expression .)
    TOK_pararight   reduce using rule 48 (and_expression -> equality_expression .)
    TOK_rsqb        reduce using rule 48 (and_expression -> equality_expression .)
    KW_if           reduce using rule 48 (and_expression -> equality_expression .)
    KW_while        reduce using rule 48 (and_expression -> equality_expression .)
    KW_for          reduce using rule 48 (and_expression -> equality_expression .)
    KW_def          reduce using rule 48 (and_expression -> equality_expression .)
    TOK_lcurly      reduce using rule 48 (and_expression -> equality_expression .)
    TOK_semi        reduce using rule 48 (and_expression -> equality_expression .)
    KW_return       reduce using rule 48 (and_expression -> equality_expression .)
    KW_obj          reduce using rule 48 (and_expression -> equality_expression .)
    KW_class        reduce using rule 48 (and_expression -> equality_expression .)
    KW_protected    reduce using rule 48 (and_expression -> equality_expression .)
    KW_private      reduce using rule 48 (and_expression -> equality_expression .)
    TOK_identifier  reduce using rule 48 (and_expression -> equality_expression .)
    KW_var          reduce using rule 48 (and_expression -> equality_expression .)
    KW_val          reduce using rule 48 (and_expression -> equality_expression .)
    TOK_rcurly      reduce using rule 48 (and_expression -> equality_expression .)
    TOK_comma       reduce using rule 48 (and_expression -> equality_expression .)
    KW_until        reduce using rule 48 (and_expression -> equality_expression .)
    KW_to           reduce using rule 48 (and_expression -> equality_expression .)
    KW_else         reduce using rule 48 (and_expression -> equality_expression .)
    KW_by           reduce using rule 48 (and_expression -> equality_expression .)
    TOK_equal       shift and go to state 191
    TOK_nequal      shift and go to state 192


state 118

    (105) variable_declaration_initializer -> array_initializer .

    TOK_comma       reduce using rule 105 (variable_declaration_initializer -> array_initializer .)
    TOK_pararight   reduce using rule 105 (variable_declaration_initializer -> array_initializer .)
    TOK_semi        reduce using rule 105 (variable_declaration_initializer -> array_initializer .)
    KW_if           reduce using rule 105 (variable_declaration_initializer -> array_initializer .)
    KW_while        reduce using rule 105 (variable_declaration_initializer -> array_initializer .)
    KW_for          reduce using rule 105 (variable_declaration_initializer -> array_initializer .)
    KW_def          reduce using rule 105 (variable_declaration_initializer -> array_initializer .)
    TOK_lcurly      reduce using rule 105 (variable_declaration_initializer -> array_initializer .)
    KW_return       reduce using rule 105 (variable_declaration_initializer -> array_initializer .)
    KW_obj          reduce using rule 105 (variable_declaration_initializer -> array_initializer .)
    KW_class        reduce using rule 105 (variable_declaration_initializer -> array_initializer .)
    KW_protected    reduce using rule 105 (variable_declaration_initializer -> array_initializer .)
    KW_private      reduce using rule 105 (variable_declaration_initializer -> array_initializer .)
    TOK_identifier  reduce using rule 105 (variable_declaration_initializer -> array_initializer .)
    KW_var          reduce using rule 105 (variable_declaration_initializer -> array_initializer .)
    KW_val          reduce using rule 105 (variable_declaration_initializer -> array_initializer .)
    TOK_rcurly      reduce using rule 105 (variable_declaration_initializer -> array_initializer .)


state 119

    (89) int_float -> TOK_float .

    TOK_times       reduce using rule 89 (int_float -> TOK_float .)
    TOK_divide      reduce using rule 89 (int_float -> TOK_float .)
    TOK_modulus     reduce using rule 89 (int_float -> TOK_float .)
    TOK_plus        reduce using rule 89 (int_float -> TOK_float .)
    TOK_minus       reduce using rule 89 (int_float -> TOK_float .)
    TOK_lshift      reduce using rule 89 (int_float -> TOK_float .)
    TOK_rshift      reduce using rule 89 (int_float -> TOK_float .)
    TOK_greater     reduce using rule 89 (int_float -> TOK_float .)
    TOK_lesser      reduce using rule 89 (int_float -> TOK_float .)
    TOK_geq         reduce using rule 89 (int_float -> TOK_float .)
    TOK_leq         reduce using rule 89 (int_float -> TOK_float .)
    TOK_equal       reduce using rule 89 (int_float -> TOK_float .)
    TOK_nequal      reduce using rule 89 (int_float -> TOK_float .)
    TOK_and_bitwise reduce using rule 89 (int_float -> TOK_float .)
    TOK_xor         reduce using rule 89 (int_float -> TOK_float .)
    TOK_or_bitwise  reduce using rule 89 (int_float -> TOK_float .)
    TOK_and         reduce using rule 89 (int_float -> TOK_float .)
    TOK_or          reduce using rule 89 (int_float -> TOK_float .)
    KW_if           reduce using rule 89 (int_float -> TOK_float .)
    KW_while        reduce using rule 89 (int_float -> TOK_float .)
    KW_for          reduce using rule 89 (int_float -> TOK_float .)
    KW_def          reduce using rule 89 (int_float -> TOK_float .)
    TOK_lcurly      reduce using rule 89 (int_float -> TOK_float .)
    TOK_semi        reduce using rule 89 (int_float -> TOK_float .)
    KW_return       reduce using rule 89 (int_float -> TOK_float .)
    KW_obj          reduce using rule 89 (int_float -> TOK_float .)
    KW_class        reduce using rule 89 (int_float -> TOK_float .)
    KW_protected    reduce using rule 89 (int_float -> TOK_float .)
    KW_private      reduce using rule 89 (int_float -> TOK_float .)
    TOK_identifier  reduce using rule 89 (int_float -> TOK_float .)
    KW_var          reduce using rule 89 (int_float -> TOK_float .)
    KW_val          reduce using rule 89 (int_float -> TOK_float .)
    TOK_rcurly      reduce using rule 89 (int_float -> TOK_float .)
    TOK_comma       reduce using rule 89 (int_float -> TOK_float .)
    TOK_pararight   reduce using rule 89 (int_float -> TOK_float .)
    TOK_rsqb        reduce using rule 89 (int_float -> TOK_float .)
    KW_until        reduce using rule 89 (int_float -> TOK_float .)
    KW_to           reduce using rule 89 (int_float -> TOK_float .)
    KW_else         reduce using rule 89 (int_float -> TOK_float .)
    KW_by           reduce using rule 89 (int_float -> TOK_float .)


state 120

    (82) literal -> int_float .

    TOK_times       reduce using rule 82 (literal -> int_float .)
    TOK_divide      reduce using rule 82 (literal -> int_float .)
    TOK_modulus     reduce using rule 82 (literal -> int_float .)
    TOK_plus        reduce using rule 82 (literal -> int_float .)
    TOK_minus       reduce using rule 82 (literal -> int_float .)
    TOK_lshift      reduce using rule 82 (literal -> int_float .)
    TOK_rshift      reduce using rule 82 (literal -> int_float .)
    TOK_greater     reduce using rule 82 (literal -> int_float .)
    TOK_lesser      reduce using rule 82 (literal -> int_float .)
    TOK_geq         reduce using rule 82 (literal -> int_float .)
    TOK_leq         reduce using rule 82 (literal -> int_float .)
    TOK_equal       reduce using rule 82 (literal -> int_float .)
    TOK_nequal      reduce using rule 82 (literal -> int_float .)
    TOK_and_bitwise reduce using rule 82 (literal -> int_float .)
    TOK_xor         reduce using rule 82 (literal -> int_float .)
    TOK_or_bitwise  reduce using rule 82 (literal -> int_float .)
    TOK_and         reduce using rule 82 (literal -> int_float .)
    TOK_or          reduce using rule 82 (literal -> int_float .)
    TOK_pararight   reduce using rule 82 (literal -> int_float .)
    TOK_comma       reduce using rule 82 (literal -> int_float .)
    TOK_semi        reduce using rule 82 (literal -> int_float .)
    KW_if           reduce using rule 82 (literal -> int_float .)
    KW_while        reduce using rule 82 (literal -> int_float .)
    KW_for          reduce using rule 82 (literal -> int_float .)
    KW_def          reduce using rule 82 (literal -> int_float .)
    TOK_lcurly      reduce using rule 82 (literal -> int_float .)
    KW_return       reduce using rule 82 (literal -> int_float .)
    KW_obj          reduce using rule 82 (literal -> int_float .)
    KW_class        reduce using rule 82 (literal -> int_float .)
    KW_protected    reduce using rule 82 (literal -> int_float .)
    KW_private      reduce using rule 82 (literal -> int_float .)
    TOK_identifier  reduce using rule 82 (literal -> int_float .)
    KW_var          reduce using rule 82 (literal -> int_float .)
    KW_val          reduce using rule 82 (literal -> int_float .)
    TOK_rcurly      reduce using rule 82 (literal -> int_float .)
    TOK_rsqb        reduce using rule 82 (literal -> int_float .)
    KW_until        reduce using rule 82 (literal -> int_float .)
    KW_to           reduce using rule 82 (literal -> int_float .)
    KW_else         reduce using rule 82 (literal -> int_float .)
    KW_by           reduce using rule 82 (literal -> int_float .)


state 121

    (132) array_initializer -> KW_array . TOK_paraleft argument_list_question TOK_pararight
    (133) array_initializer -> KW_array . TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight
    (135) multidimensional_array_initializer -> KW_array . TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight

    TOK_paraleft    shift and go to state 194
    TOK_lsqb        shift and go to state 195
    TOK_dot         shift and go to state 193


state 122

    (76) base_variable_set -> TOK_paraleft . expression TOK_pararight
    (79) cast_expression -> TOK_paraleft . primitive_type TOK_pararight unary_expression
    (19) expression -> . assignment_expression
    (121) primitive_type -> . KW_int
    (122) primitive_type -> . KW_double
    (123) primitive_type -> . KW_char
    (124) primitive_type -> . KW_string
    (125) primitive_type -> . KW_boolean
    (126) primitive_type -> . KW_void
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_int          shift and go to state 202
    KW_double       shift and go to state 196
    KW_char         shift and go to state 199
    KW_string       shift and go to state 198
    KW_boolean      shift and go to state 201
    KW_void         shift and go to state 200
    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    primitive_type                 shift and go to state 197
    and_expression                 shift and go to state 83
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    expression                     shift and go to state 203

state 123

    (69) unary_expression -> TOK_minus . unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    int_float                      shift and go to state 120
    c_literal                      shift and go to state 91
    qualified_id                   shift and go to state 47
    variable_literal               shift and go to state 115
    unary_expression               shift and go to state 204
    base_variable_set              shift and go to state 93
    array_access                   shift and go to state 29
    method_invocation              shift and go to state 110
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    literal                        shift and go to state 99
    left_hand_side                 shift and go to state 172
    cast_expression                shift and go to state 90
    id                             shift and go to state 89
    name                           shift and go to state 46

state 124

    (64) multiplicative_expression -> unary_expression .

    TOK_times       reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_divide      reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_modulus     reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_plus        reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_minus       reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_lshift      reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_rshift      reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_greater     reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_lesser      reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_geq         reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_leq         reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_equal       reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_nequal      reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_and_bitwise reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_xor         reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_or_bitwise  reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_and         reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_or          reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_pararight   reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_comma       reduce using rule 64 (multiplicative_expression -> unary_expression .)
    KW_if           reduce using rule 64 (multiplicative_expression -> unary_expression .)
    KW_while        reduce using rule 64 (multiplicative_expression -> unary_expression .)
    KW_for          reduce using rule 64 (multiplicative_expression -> unary_expression .)
    KW_def          reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_lcurly      reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_semi        reduce using rule 64 (multiplicative_expression -> unary_expression .)
    KW_return       reduce using rule 64 (multiplicative_expression -> unary_expression .)
    KW_obj          reduce using rule 64 (multiplicative_expression -> unary_expression .)
    KW_class        reduce using rule 64 (multiplicative_expression -> unary_expression .)
    KW_protected    reduce using rule 64 (multiplicative_expression -> unary_expression .)
    KW_private      reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_identifier  reduce using rule 64 (multiplicative_expression -> unary_expression .)
    KW_var          reduce using rule 64 (multiplicative_expression -> unary_expression .)
    KW_val          reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_rcurly      reduce using rule 64 (multiplicative_expression -> unary_expression .)
    TOK_rsqb        reduce using rule 64 (multiplicative_expression -> unary_expression .)
    KW_until        reduce using rule 64 (multiplicative_expression -> unary_expression .)
    KW_to           reduce using rule 64 (multiplicative_expression -> unary_expression .)
    KW_else         reduce using rule 64 (multiplicative_expression -> unary_expression .)
    KW_by           reduce using rule 64 (multiplicative_expression -> unary_expression .)


state 125

    (90) int_float -> TOK_int .

    TOK_times       reduce using rule 90 (int_float -> TOK_int .)
    TOK_divide      reduce using rule 90 (int_float -> TOK_int .)
    TOK_modulus     reduce using rule 90 (int_float -> TOK_int .)
    TOK_plus        reduce using rule 90 (int_float -> TOK_int .)
    TOK_minus       reduce using rule 90 (int_float -> TOK_int .)
    TOK_lshift      reduce using rule 90 (int_float -> TOK_int .)
    TOK_rshift      reduce using rule 90 (int_float -> TOK_int .)
    TOK_greater     reduce using rule 90 (int_float -> TOK_int .)
    TOK_lesser      reduce using rule 90 (int_float -> TOK_int .)
    TOK_geq         reduce using rule 90 (int_float -> TOK_int .)
    TOK_leq         reduce using rule 90 (int_float -> TOK_int .)
    TOK_equal       reduce using rule 90 (int_float -> TOK_int .)
    TOK_nequal      reduce using rule 90 (int_float -> TOK_int .)
    TOK_and_bitwise reduce using rule 90 (int_float -> TOK_int .)
    TOK_xor         reduce using rule 90 (int_float -> TOK_int .)
    TOK_or_bitwise  reduce using rule 90 (int_float -> TOK_int .)
    TOK_and         reduce using rule 90 (int_float -> TOK_int .)
    TOK_or          reduce using rule 90 (int_float -> TOK_int .)
    KW_if           reduce using rule 90 (int_float -> TOK_int .)
    KW_while        reduce using rule 90 (int_float -> TOK_int .)
    KW_for          reduce using rule 90 (int_float -> TOK_int .)
    KW_def          reduce using rule 90 (int_float -> TOK_int .)
    TOK_lcurly      reduce using rule 90 (int_float -> TOK_int .)
    TOK_semi        reduce using rule 90 (int_float -> TOK_int .)
    KW_return       reduce using rule 90 (int_float -> TOK_int .)
    KW_obj          reduce using rule 90 (int_float -> TOK_int .)
    KW_class        reduce using rule 90 (int_float -> TOK_int .)
    KW_protected    reduce using rule 90 (int_float -> TOK_int .)
    KW_private      reduce using rule 90 (int_float -> TOK_int .)
    TOK_identifier  reduce using rule 90 (int_float -> TOK_int .)
    KW_var          reduce using rule 90 (int_float -> TOK_int .)
    KW_val          reduce using rule 90 (int_float -> TOK_int .)
    TOK_rcurly      reduce using rule 90 (int_float -> TOK_int .)
    TOK_comma       reduce using rule 90 (int_float -> TOK_int .)
    TOK_pararight   reduce using rule 90 (int_float -> TOK_int .)
    TOK_rsqb        reduce using rule 90 (int_float -> TOK_int .)
    KW_until        reduce using rule 90 (int_float -> TOK_int .)
    KW_to           reduce using rule 90 (int_float -> TOK_int .)
    KW_else         reduce using rule 90 (int_float -> TOK_int .)
    KW_by           reduce using rule 90 (int_float -> TOK_int .)


state 126

    (104) variable_declaration_initializer -> expression .

    TOK_comma       reduce using rule 104 (variable_declaration_initializer -> expression .)
    TOK_pararight   reduce using rule 104 (variable_declaration_initializer -> expression .)
    TOK_semi        reduce using rule 104 (variable_declaration_initializer -> expression .)
    KW_if           reduce using rule 104 (variable_declaration_initializer -> expression .)
    KW_while        reduce using rule 104 (variable_declaration_initializer -> expression .)
    KW_for          reduce using rule 104 (variable_declaration_initializer -> expression .)
    KW_def          reduce using rule 104 (variable_declaration_initializer -> expression .)
    TOK_lcurly      reduce using rule 104 (variable_declaration_initializer -> expression .)
    KW_return       reduce using rule 104 (variable_declaration_initializer -> expression .)
    KW_obj          reduce using rule 104 (variable_declaration_initializer -> expression .)
    KW_class        reduce using rule 104 (variable_declaration_initializer -> expression .)
    KW_protected    reduce using rule 104 (variable_declaration_initializer -> expression .)
    KW_private      reduce using rule 104 (variable_declaration_initializer -> expression .)
    TOK_identifier  reduce using rule 104 (variable_declaration_initializer -> expression .)
    KW_var          reduce using rule 104 (variable_declaration_initializer -> expression .)
    KW_val          reduce using rule 104 (variable_declaration_initializer -> expression .)
    TOK_rcurly      reduce using rule 104 (variable_declaration_initializer -> expression .)


state 127

    (40) conditional_or_expression -> conditional_and_expression .
    (43) conditional_and_expression -> conditional_and_expression . TOK_and inclusive_or_expression

    TOK_or          reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    TOK_comma       reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    TOK_pararight   reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    TOK_rsqb        reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    TOK_semi        reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    KW_if           reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    KW_while        reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    KW_for          reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    KW_def          reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    TOK_lcurly      reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    KW_return       reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    KW_obj          reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    KW_class        reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    KW_protected    reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    KW_private      reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    TOK_identifier  reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    KW_var          reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    KW_val          reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    TOK_rcurly      reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    KW_until        reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    KW_to           reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    KW_else         reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    KW_by           reduce using rule 40 (conditional_or_expression -> conditional_and_expression .)
    TOK_and         shift and go to state 205


state 128

    (198) method_body -> block .

    KW_if           reduce using rule 198 (method_body -> block .)
    KW_while        reduce using rule 198 (method_body -> block .)
    KW_for          reduce using rule 198 (method_body -> block .)
    KW_def          reduce using rule 198 (method_body -> block .)
    TOK_lcurly      reduce using rule 198 (method_body -> block .)
    TOK_semi        reduce using rule 198 (method_body -> block .)
    KW_return       reduce using rule 198 (method_body -> block .)
    KW_obj          reduce using rule 198 (method_body -> block .)
    KW_class        reduce using rule 198 (method_body -> block .)
    KW_protected    reduce using rule 198 (method_body -> block .)
    KW_private      reduce using rule 198 (method_body -> block .)
    TOK_identifier  reduce using rule 198 (method_body -> block .)
    KW_var          reduce using rule 198 (method_body -> block .)
    KW_val          reduce using rule 198 (method_body -> block .)
    TOK_rcurly      reduce using rule 198 (method_body -> block .)


state 129

    (18) expression_question -> empty .

    TOK_semi        reduce using rule 18 (expression_question -> empty .)


state 130

    (165) return_statement -> KW_return expression_question . TOK_semi

    TOK_semi        shift and go to state 206


state 131

    (17) expression_question -> expression .

    TOK_semi        reduce using rule 17 (expression_question -> expression .)


state 132

    (102) local_variable_declaration_statement -> local_variable_declaration TOK_semi .

    KW_if           reduce using rule 102 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    KW_while        reduce using rule 102 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    KW_for          reduce using rule 102 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    KW_def          reduce using rule 102 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    TOK_lcurly      reduce using rule 102 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    TOK_semi        reduce using rule 102 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    KW_return       reduce using rule 102 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    KW_obj          reduce using rule 102 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    KW_class        reduce using rule 102 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    KW_protected    reduce using rule 102 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    KW_private      reduce using rule 102 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    TOK_identifier  reduce using rule 102 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    KW_var          reduce using rule 102 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    KW_val          reduce using rule 102 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)
    TOK_rcurly      reduce using rule 102 (local_variable_declaration_statement -> local_variable_declaration TOK_semi .)


state 133

    (12) block_stats -> block_stats block_stat .

    KW_if           reduce using rule 12 (block_stats -> block_stats block_stat .)
    KW_while        reduce using rule 12 (block_stats -> block_stats block_stat .)
    KW_for          reduce using rule 12 (block_stats -> block_stats block_stat .)
    KW_def          reduce using rule 12 (block_stats -> block_stats block_stat .)
    TOK_lcurly      reduce using rule 12 (block_stats -> block_stats block_stat .)
    TOK_semi        reduce using rule 12 (block_stats -> block_stats block_stat .)
    KW_return       reduce using rule 12 (block_stats -> block_stats block_stat .)
    KW_obj          reduce using rule 12 (block_stats -> block_stats block_stat .)
    KW_class        reduce using rule 12 (block_stats -> block_stats block_stat .)
    KW_protected    reduce using rule 12 (block_stats -> block_stats block_stat .)
    KW_private      reduce using rule 12 (block_stats -> block_stats block_stat .)
    TOK_identifier  reduce using rule 12 (block_stats -> block_stats block_stat .)
    KW_var          reduce using rule 12 (block_stats -> block_stats block_stat .)
    KW_val          reduce using rule 12 (block_stats -> block_stats block_stat .)
    TOK_rcurly      reduce using rule 12 (block_stats -> block_stats block_stat .)


state 134

    (154) while_statement -> KW_while TOK_paraleft . expression TOK_pararight statement
    (19) expression -> . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    and_expression                 shift and go to state 83
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    unary_expression               shift and go to state 124
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    expression                     shift and go to state 207

state 135

    (183) class_template_question -> class_template .

    TOK_lcurly      reduce using rule 183 (class_template_question -> class_template .)


state 136

    (185) class_template -> KW_extends . name TOK_paraleft variable_list TOK_pararight
    (30) name -> . TOK_identifier

    TOK_identifier  shift and go to state 12

    name                           shift and go to state 208

state 137

    (167) class_header -> KW_class name modifier_question class_param_clause_question class_template_question .

    TOK_lcurly      reduce using rule 167 (class_header -> KW_class name modifier_question class_param_clause_question class_template_question .)


state 138

    (184) class_template_question -> empty .

    TOK_lcurly      reduce using rule 184 (class_template_question -> empty .)


state 139

    (178) override -> KW_override .

    KW_protected    reduce using rule 178 (override -> KW_override .)
    KW_private      reduce using rule 178 (override -> KW_override .)
    KW_var          reduce using rule 178 (override -> KW_override .)
    KW_val          reduce using rule 178 (override -> KW_override .)


state 140

    (175) class_param -> class_declaration_keyword_question . variable_declarator_id expr_question
    (118) variable_declarator_id -> . TOK_identifier TOK_colon type

    TOK_identifier  shift and go to state 210

    variable_declarator_id         shift and go to state 209

state 141

    (173) class_params -> class_param .

    TOK_comma       reduce using rule 173 (class_params -> class_param .)
    TOK_pararight   reduce using rule 173 (class_params -> class_param .)


state 142

    (171) class_params_question -> class_params .
    (174) class_params -> class_params . TOK_comma class_param

    TOK_pararight   reduce using rule 171 (class_params_question -> class_params .)
    TOK_comma       shift and go to state 211


state 143

    (179) class_declaration_keyword_question -> override_question . modifier_question declaration_keyword
    (98) modifier_question -> . modifier
    (99) modifier_question -> . empty
    (96) modifier -> . KW_protected
    (97) modifier -> . KW_private
    (200) empty -> .

    KW_protected    shift and go to state 21
    KW_private      shift and go to state 19
    KW_var          reduce using rule 200 (empty -> .)
    KW_val          reduce using rule 200 (empty -> .)

    modifier                       shift and go to state 18
    empty                          shift and go to state 22
    modifier_question              shift and go to state 212

state 144

    (176) override_question -> override .

    KW_protected    reduce using rule 176 (override_question -> override .)
    KW_private      reduce using rule 176 (override_question -> override .)
    KW_var          reduce using rule 176 (override_question -> override .)
    KW_val          reduce using rule 176 (override_question -> override .)


state 145

    (170) class_param_clause -> TOK_paraleft class_params_question . TOK_pararight

    TOK_pararight   shift and go to state 213


state 146

    (172) class_params_question -> empty .
    (180) class_declaration_keyword_question -> empty .
    (177) override_question -> empty .

    TOK_pararight   reduce using rule 172 (class_params_question -> empty .)
    TOK_identifier  reduce using rule 180 (class_declaration_keyword_question -> empty .)
    KW_protected    reduce using rule 177 (override_question -> empty .)
    KW_private      reduce using rule 177 (override_question -> empty .)
    KW_var          reduce using rule 177 (override_question -> empty .)
    KW_val          reduce using rule 177 (override_question -> empty .)


state 147

    (24) assignment -> left_hand_side assignment_operator assignment_expression .

    TOK_comma       reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    TOK_pararight   reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    TOK_semi        reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    TOK_rsqb        reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_else         reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_until        reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_to           reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_by           reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_if           reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_while        reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_for          reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_def          reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    TOK_lcurly      reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_return       reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_obj          reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_class        reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_protected    reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_private      reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    TOK_identifier  reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_var          reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    KW_val          reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)
    TOK_rcurly      reduce using rule 24 (assignment -> left_hand_side assignment_operator assignment_expression .)


state 148

    (94) argument_list_question -> argument_list .
    (93) argument_list -> argument_list . TOK_comma expression

    TOK_pararight   reduce using rule 94 (argument_list_question -> argument_list .)
    TOK_comma       shift and go to state 214


state 149

    (95) argument_list_question -> empty .

    TOK_pararight   reduce using rule 95 (argument_list_question -> empty .)


state 150

    (91) method_invocation -> id TOK_paraleft argument_list_question . TOK_pararight

    TOK_pararight   shift and go to state 215


state 151

    (92) argument_list -> expression .

    TOK_comma       reduce using rule 92 (argument_list -> expression .)
    TOK_pararight   reduce using rule 92 (argument_list -> expression .)


state 152

    (32) dimension -> dimension TOK_lsqb . expression TOK_rsqb
    (19) expression -> . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    and_expression                 shift and go to state 83
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    expression                     shift and go to state 216
    conditional_and_expression     shift and go to state 127

state 153

    (33) dimension -> TOK_lsqb expression . TOK_rsqb

    TOK_rsqb        shift and go to state 217


state 154

    (158) for_update -> for_loop . for_step_opts
    (162) for_step_opts -> . KW_by expression
    (163) for_step_opts -> . empty
    (200) empty -> .

    KW_by           shift and go to state 218
    TOK_semi        reduce using rule 200 (empty -> .)
    TOK_pararight   reduce using rule 200 (empty -> .)

    for_step_opts                  shift and go to state 219
    empty                          shift and go to state 220

state 155

    (155) for_statement -> KW_for TOK_paraleft for_logic . TOK_pararight statement

    TOK_pararight   shift and go to state 221


state 156

    (156) for_logic -> for_update .
    (157) for_logic -> for_update . TOK_semi for_logic

    TOK_pararight   reduce using rule 156 (for_logic -> for_update .)
    TOK_semi        shift and go to state 222


state 157

    (159) for_loop -> TOK_identifier . TOK_choose expression for_untilTo expression

    TOK_choose      shift and go to state 223


state 158

    (191) fun_sig -> name fun_param_clause .

    TOK_colon       reduce using rule 191 (fun_sig -> name fun_param_clause .)
    TOK_assignment  reduce using rule 191 (fun_sig -> name fun_param_clause .)
    TOK_lcurly      reduce using rule 191 (fun_sig -> name fun_param_clause .)
    KW_new          reduce using rule 191 (fun_sig -> name fun_param_clause .)
    KW_array        reduce using rule 191 (fun_sig -> name fun_param_clause .)
    KW_if           reduce using rule 191 (fun_sig -> name fun_param_clause .)
    TOK_identifier  reduce using rule 191 (fun_sig -> name fun_param_clause .)
    TOK_plus        reduce using rule 191 (fun_sig -> name fun_param_clause .)
    TOK_minus       reduce using rule 191 (fun_sig -> name fun_param_clause .)
    TOK_tilda       reduce using rule 191 (fun_sig -> name fun_param_clause .)
    TOK_not         reduce using rule 191 (fun_sig -> name fun_param_clause .)
    TOK_paraleft    reduce using rule 191 (fun_sig -> name fun_param_clause .)
    TOK_float       reduce using rule 191 (fun_sig -> name fun_param_clause .)
    TOK_int         reduce using rule 191 (fun_sig -> name fun_param_clause .)
    TOK_char        reduce using rule 191 (fun_sig -> name fun_param_clause .)
    TOK_string      reduce using rule 191 (fun_sig -> name fun_param_clause .)
    KW_true         reduce using rule 191 (fun_sig -> name fun_param_clause .)
    KW_false        reduce using rule 191 (fun_sig -> name fun_param_clause .)
    KW_null         reduce using rule 191 (fun_sig -> name fun_param_clause .)


state 159

    (192) fun_param_clause -> TOK_paraleft . fun_params_question TOK_pararight
    (193) fun_params_question -> . fun_params
    (194) fun_params_question -> . empty
    (195) fun_params -> . fun_param
    (196) fun_params -> . fun_params TOK_comma fun_param
    (200) empty -> .
    (197) fun_param -> . variable_declarator_id expr_question
    (118) variable_declarator_id -> . TOK_identifier TOK_colon type

    TOK_pararight   reduce using rule 200 (empty -> .)
    TOK_identifier  shift and go to state 210

    fun_param                      shift and go to state 224
    fun_params                     shift and go to state 225
    variable_declarator_id         shift and go to state 227
    fun_params_question            shift and go to state 226
    empty                          shift and go to state 228

state 160

    (189) fun_def -> fun_sig type_question . TOK_assignment
    (190) fun_def -> fun_sig type_question .

    TOK_assignment  shift and go to state 229
    TOK_lcurly      reduce using rule 190 (fun_def -> fun_sig type_question .)
    KW_new          reduce using rule 190 (fun_def -> fun_sig type_question .)
    KW_array        reduce using rule 190 (fun_def -> fun_sig type_question .)
    KW_if           reduce using rule 190 (fun_def -> fun_sig type_question .)
    TOK_identifier  reduce using rule 190 (fun_def -> fun_sig type_question .)
    TOK_plus        reduce using rule 190 (fun_def -> fun_sig type_question .)
    TOK_minus       reduce using rule 190 (fun_def -> fun_sig type_question .)
    TOK_tilda       reduce using rule 190 (fun_def -> fun_sig type_question .)
    TOK_not         reduce using rule 190 (fun_def -> fun_sig type_question .)
    TOK_paraleft    reduce using rule 190 (fun_def -> fun_sig type_question .)
    TOK_float       reduce using rule 190 (fun_def -> fun_sig type_question .)
    TOK_int         reduce using rule 190 (fun_def -> fun_sig type_question .)
    TOK_char        reduce using rule 190 (fun_def -> fun_sig type_question .)
    TOK_string      reduce using rule 190 (fun_def -> fun_sig type_question .)
    KW_true         reduce using rule 190 (fun_def -> fun_sig type_question .)
    KW_false        reduce using rule 190 (fun_def -> fun_sig type_question .)
    KW_null         reduce using rule 190 (fun_def -> fun_sig type_question .)


state 161

    (181) type_question -> TOK_colon . type
    (119) type -> . primitive_type
    (120) type -> . reference_type
    (121) primitive_type -> . KW_int
    (122) primitive_type -> . KW_double
    (123) primitive_type -> . KW_char
    (124) primitive_type -> . KW_string
    (125) primitive_type -> . KW_boolean
    (126) primitive_type -> . KW_void
    (127) reference_type -> . class_data_type
    (128) reference_type -> . array_data_type
    (129) class_data_type -> . id
    (130) array_data_type -> . KW_array TOK_lsqb type TOK_rsqb
    (27) id -> . name
    (28) id -> . qualified_id
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name

    KW_int          shift and go to state 202
    KW_double       shift and go to state 196
    KW_char         shift and go to state 199
    KW_string       shift and go to state 198
    KW_boolean      shift and go to state 201
    KW_void         shift and go to state 200
    KW_array        shift and go to state 233
    TOK_identifier  shift and go to state 12

    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    reference_type                 shift and go to state 230
    primitive_type                 shift and go to state 231
    class_data_type                shift and go to state 232
    type                           shift and go to state 234
    id                             shift and go to state 235
    array_data_type                shift and go to state 236

state 162

    (182) type_question -> empty .

    TOK_pararight   reduce using rule 182 (type_question -> empty .)
    TOK_comma       reduce using rule 182 (type_question -> empty .)
    TOK_assignment  reduce using rule 182 (type_question -> empty .)
    TOK_lcurly      reduce using rule 182 (type_question -> empty .)
    KW_new          reduce using rule 182 (type_question -> empty .)
    KW_array        reduce using rule 182 (type_question -> empty .)
    KW_if           reduce using rule 182 (type_question -> empty .)
    TOK_identifier  reduce using rule 182 (type_question -> empty .)
    TOK_plus        reduce using rule 182 (type_question -> empty .)
    TOK_minus       reduce using rule 182 (type_question -> empty .)
    TOK_tilda       reduce using rule 182 (type_question -> empty .)
    TOK_not         reduce using rule 182 (type_question -> empty .)
    TOK_paraleft    reduce using rule 182 (type_question -> empty .)
    TOK_float       reduce using rule 182 (type_question -> empty .)
    TOK_int         reduce using rule 182 (type_question -> empty .)
    TOK_char        reduce using rule 182 (type_question -> empty .)
    TOK_string      reduce using rule 182 (type_question -> empty .)
    KW_true         reduce using rule 182 (type_question -> empty .)
    KW_false        reduce using rule 182 (type_question -> empty .)
    KW_null         reduce using rule 182 (type_question -> empty .)


state 163

    (149) if_then_statement -> KW_if TOK_paraleft expression . TOK_pararight statement
    (150) if_then_else_statement -> KW_if TOK_paraleft expression . TOK_pararight if_then_else_intermediate KW_else statement

    TOK_pararight   shift and go to state 237


state 164

    (103) local_variable_declaration -> modifier_question declaration_keyword variable_declaration_body .

    TOK_semi        reduce using rule 103 (local_variable_declaration -> modifier_question declaration_keyword variable_declaration_body .)


state 165

    (109) variable_declaration_body -> identifiers . type_question TOK_assignment variable_declaration_initializer
    (111) identifiers -> identifiers . TOK_comma TOK_identifier
    (181) type_question -> . TOK_colon type
    (182) type_question -> . empty
    (200) empty -> .

    TOK_comma       shift and go to state 238
    TOK_colon       shift and go to state 161
    TOK_assignment  reduce using rule 200 (empty -> .)

    type_question                  shift and go to state 239
    empty                          shift and go to state 162

state 166

    (110) variable_declaration_body -> TOK_paraleft . variable_list TOK_pararight TOK_assignment TOK_paraleft variable_argument_list TOK_pararight
    (113) variable_list -> . variable_dec
    (114) variable_list -> . variable_list TOK_comma variable_dec
    (115) variable_dec -> . TOK_identifier type_question

    TOK_identifier  shift and go to state 240

    variable_dec                   shift and go to state 241
    variable_list                  shift and go to state 242

state 167

    (112) identifiers -> TOK_identifier .

    TOK_comma       reduce using rule 112 (identifiers -> TOK_identifier .)
    TOK_colon       reduce using rule 112 (identifiers -> TOK_identifier .)
    TOK_assignment  reduce using rule 112 (identifiers -> TOK_identifier .)


state 168

    (29) qualified_id -> name TOK_dot name .

    TOK_paraleft    reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_lsqb        reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_assignment  reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_mulassign   reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_divassign   reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_modassign   reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_addassign   reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_subassign   reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_times       reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_divide      reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_modulus     reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_plus        reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_minus       reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_lshift      reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_rshift      reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_greater     reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_lesser      reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_geq         reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_leq         reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_equal       reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_nequal      reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_and_bitwise reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_xor         reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_or_bitwise  reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_and         reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_or          reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_semi        reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_if           reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_while        reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_for          reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_def          reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_lcurly      reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_return       reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_obj          reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_class        reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_protected    reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_private      reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_identifier  reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_var          reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_val          reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_rcurly      reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_comma       reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_pararight   reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_rsqb        reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_until        reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_to           reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_else         reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_by           reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_new          reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_array        reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_tilda       reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_not         reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_float       reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_int         reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_char        reduce using rule 29 (qualified_id -> name TOK_dot name .)
    TOK_string      reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_true         reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_false        reduce using rule 29 (qualified_id -> name TOK_dot name .)
    KW_null         reduce using rule 29 (qualified_id -> name TOK_dot name .)


state 169

    (49) and_expression -> and_expression TOK_and_bitwise . equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 172
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    literal                        shift and go to state 99
    additive_expression            shift and go to state 97
    method_invocation              shift and go to state 110
    relational_expression          shift and go to state 103
    multiplicative_expression      shift and go to state 109
    cast_expression                shift and go to state 90
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 243
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47

state 170

    (47) exclusive_or_expression -> exclusive_or_expression TOK_xor . and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 172
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    and_expression                 shift and go to state 244
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    literal                        shift and go to state 99
    additive_expression            shift and go to state 97
    method_invocation              shift and go to state 110
    relational_expression          shift and go to state 103
    multiplicative_expression      shift and go to state 109
    cast_expression                shift and go to state 90
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47

state 171

    (72) unary_expression_not_plus_minus -> TOK_tilda unary_expression .

    TOK_times       reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_divide      reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_modulus     reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_plus        reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_minus       reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_lshift      reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_rshift      reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_greater     reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_lesser      reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_geq         reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_leq         reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_equal       reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_nequal      reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_and_bitwise reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_xor         reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_or_bitwise  reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_and         reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_or          reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    KW_if           reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    KW_while        reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    KW_for          reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    KW_def          reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_lcurly      reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_semi        reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    KW_return       reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    KW_obj          reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    KW_class        reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    KW_protected    reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    KW_private      reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_identifier  reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    KW_var          reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    KW_val          reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_rcurly      reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_comma       reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_pararight   reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    TOK_rsqb        reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    KW_until        reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    KW_to           reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    KW_else         reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)
    KW_by           reduce using rule 72 (unary_expression_not_plus_minus -> TOK_tilda unary_expression .)


state 172

    (77) variable_literal -> left_hand_side .

    TOK_times       reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_divide      reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_modulus     reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_plus        reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_minus       reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_lshift      reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_rshift      reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_greater     reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_lesser      reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_geq         reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_leq         reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_equal       reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_nequal      reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_and_bitwise reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_xor         reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_or_bitwise  reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_and         reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_or          reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_if           reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_while        reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_for          reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_def          reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_lcurly      reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_semi        reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_return       reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_obj          reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_class        reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_protected    reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_private      reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_identifier  reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_var          reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_val          reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_rcurly      reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_comma       reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_pararight   reduce using rule 77 (variable_literal -> left_hand_side .)
    TOK_rsqb        reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_until        reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_to           reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_else         reduce using rule 77 (variable_literal -> left_hand_side .)
    KW_by           reduce using rule 77 (variable_literal -> left_hand_side .)


state 173

    (45) inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise . exclusive_or_expression
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 245
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 172
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    literal                        shift and go to state 99
    and_expression                 shift and go to state 83
    method_invocation              shift and go to state 110
    relational_expression          shift and go to state 103
    multiplicative_expression      shift and go to state 109
    cast_expression                shift and go to state 90
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47

state 174

    (63) additive_expression -> additive_expression TOK_minus . multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    int_float                      shift and go to state 120
    c_literal                      shift and go to state 91
    qualified_id                   shift and go to state 47
    variable_literal               shift and go to state 115
    base_variable_set              shift and go to state 93
    unary_expression               shift and go to state 124
    array_access                   shift and go to state 29
    multiplicative_expression      shift and go to state 246
    method_invocation              shift and go to state 110
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    literal                        shift and go to state 99
    left_hand_side                 shift and go to state 172
    cast_expression                shift and go to state 90
    id                             shift and go to state 89
    name                           shift and go to state 46

state 175

    (62) additive_expression -> additive_expression TOK_plus . multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    int_float                      shift and go to state 120
    c_literal                      shift and go to state 91
    qualified_id                   shift and go to state 47
    variable_literal               shift and go to state 115
    base_variable_set              shift and go to state 93
    unary_expression               shift and go to state 124
    array_access                   shift and go to state 29
    multiplicative_expression      shift and go to state 247
    method_invocation              shift and go to state 110
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    literal                        shift and go to state 99
    left_hand_side                 shift and go to state 172
    cast_expression                shift and go to state 90
    id                             shift and go to state 89
    name                           shift and go to state 46

state 176

    (60) shift_expression -> shift_expression TOK_rshift . additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 172
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 248
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    literal                        shift and go to state 99
    method_invocation              shift and go to state 110
    multiplicative_expression      shift and go to state 109
    cast_expression                shift and go to state 90
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47

state 177

    (59) shift_expression -> shift_expression TOK_lshift . additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 172
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 249
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    literal                        shift and go to state 99
    method_invocation              shift and go to state 110
    multiplicative_expression      shift and go to state 109
    cast_expression                shift and go to state 90
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47

state 178

    (23) if_else_expression -> KW_if TOK_paraleft . expression TOK_pararight expression KW_else expression
    (19) expression -> . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    and_expression                 shift and go to state 83
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    expression                     shift and go to state 250

state 179

    (131) array_initializer -> KW_new KW_array . TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight

    TOK_lsqb        shift and go to state 251


state 180

    (136) class_initializer -> KW_new name . TOK_paraleft argument_list_question TOK_pararight

    TOK_paraleft    shift and go to state 252


state 181

    (41) conditional_or_expression -> conditional_or_expression TOK_or . conditional_and_expression
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 172
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    and_expression                 shift and go to state 83
    cast_expression                shift and go to state 90
    relational_expression          shift and go to state 103
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 253

state 182

    (56) relational_expression -> relational_expression TOK_geq . shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 172
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    literal                        shift and go to state 99
    method_invocation              shift and go to state 110
    multiplicative_expression      shift and go to state 109
    cast_expression                shift and go to state 90
    shift_expression               shift and go to state 254
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47

state 183

    (55) relational_expression -> relational_expression TOK_lesser . shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 172
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    literal                        shift and go to state 99
    method_invocation              shift and go to state 110
    multiplicative_expression      shift and go to state 109
    cast_expression                shift and go to state 90
    shift_expression               shift and go to state 255
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47

state 184

    (57) relational_expression -> relational_expression TOK_leq . shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 172
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    literal                        shift and go to state 99
    method_invocation              shift and go to state 110
    multiplicative_expression      shift and go to state 109
    cast_expression                shift and go to state 90
    shift_expression               shift and go to state 256
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47

state 185

    (54) relational_expression -> relational_expression TOK_greater . shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 172
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    literal                        shift and go to state 99
    method_invocation              shift and go to state 110
    multiplicative_expression      shift and go to state 109
    cast_expression                shift and go to state 90
    shift_expression               shift and go to state 257
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47

state 186

    (73) unary_expression_not_plus_minus -> TOK_not unary_expression .

    TOK_times       reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_divide      reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_modulus     reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_plus        reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_minus       reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_lshift      reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_rshift      reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_greater     reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_lesser      reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_geq         reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_leq         reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_equal       reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_nequal      reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_and_bitwise reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_xor         reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_or_bitwise  reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_and         reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_or          reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_if           reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_while        reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_for          reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_def          reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_lcurly      reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_semi        reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_return       reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_obj          reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_class        reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_protected    reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_private      reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_identifier  reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_var          reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_val          reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_rcurly      reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_comma       reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_pararight   reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    TOK_rsqb        reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_until        reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_to           reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_else         reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)
    KW_by           reduce using rule 73 (unary_expression_not_plus_minus -> TOK_not unary_expression .)


state 187

    (65) multiplicative_expression -> multiplicative_expression TOK_times . unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    int_float                      shift and go to state 120
    c_literal                      shift and go to state 91
    qualified_id                   shift and go to state 47
    variable_literal               shift and go to state 115
    unary_expression               shift and go to state 258
    base_variable_set              shift and go to state 93
    array_access                   shift and go to state 29
    method_invocation              shift and go to state 110
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    literal                        shift and go to state 99
    left_hand_side                 shift and go to state 172
    cast_expression                shift and go to state 90
    id                             shift and go to state 89
    name                           shift and go to state 46

state 188

    (66) multiplicative_expression -> multiplicative_expression TOK_divide . unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    int_float                      shift and go to state 120
    c_literal                      shift and go to state 91
    qualified_id                   shift and go to state 47
    variable_literal               shift and go to state 115
    unary_expression               shift and go to state 259
    base_variable_set              shift and go to state 93
    array_access                   shift and go to state 29
    method_invocation              shift and go to state 110
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    literal                        shift and go to state 99
    left_hand_side                 shift and go to state 172
    cast_expression                shift and go to state 90
    id                             shift and go to state 89
    name                           shift and go to state 46

state 189

    (67) multiplicative_expression -> multiplicative_expression TOK_modulus . unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    int_float                      shift and go to state 120
    c_literal                      shift and go to state 91
    qualified_id                   shift and go to state 47
    variable_literal               shift and go to state 115
    unary_expression               shift and go to state 260
    base_variable_set              shift and go to state 93
    array_access                   shift and go to state 29
    method_invocation              shift and go to state 110
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    literal                        shift and go to state 99
    left_hand_side                 shift and go to state 172
    cast_expression                shift and go to state 90
    id                             shift and go to state 89
    name                           shift and go to state 46

state 190

    (68) unary_expression -> TOK_plus unary_expression .

    TOK_times       reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_divide      reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_modulus     reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_plus        reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_minus       reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_lshift      reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_rshift      reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_greater     reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_lesser      reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_geq         reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_leq         reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_equal       reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_nequal      reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_and_bitwise reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_xor         reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_or_bitwise  reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_and         reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_or          reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    KW_if           reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    KW_while        reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    KW_for          reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    KW_def          reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_lcurly      reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_semi        reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    KW_return       reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    KW_obj          reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    KW_class        reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    KW_protected    reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    KW_private      reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_identifier  reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    KW_var          reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    KW_val          reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_rcurly      reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_comma       reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_pararight   reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    TOK_rsqb        reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    KW_until        reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    KW_to           reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    KW_else         reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)
    KW_by           reduce using rule 68 (unary_expression -> TOK_plus unary_expression .)


state 191

    (51) equality_expression -> equality_expression TOK_equal . relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 172
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    literal                        shift and go to state 99
    relational_expression          shift and go to state 261
    method_invocation              shift and go to state 110
    multiplicative_expression      shift and go to state 109
    cast_expression                shift and go to state 90
    shift_expression               shift and go to state 98
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47

state 192

    (52) equality_expression -> equality_expression TOK_nequal . relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 172
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    literal                        shift and go to state 99
    relational_expression          shift and go to state 262
    method_invocation              shift and go to state 110
    multiplicative_expression      shift and go to state 109
    cast_expression                shift and go to state 90
    shift_expression               shift and go to state 98
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47

state 193

    (135) multidimensional_array_initializer -> KW_array TOK_dot . KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight

    KW_ofdim        shift and go to state 263


state 194

    (132) array_initializer -> KW_array TOK_paraleft . argument_list_question TOK_pararight
    (94) argument_list_question -> . argument_list
    (95) argument_list_question -> . empty
    (92) argument_list -> . expression
    (93) argument_list -> . argument_list TOK_comma expression
    (200) empty -> .
    (19) expression -> . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_pararight   reduce using rule 200 (empty -> .)
    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    and_expression                 shift and go to state 83
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    empty                          shift and go to state 149
    argument_list                  shift and go to state 148
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    additive_expression            shift and go to state 97
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    argument_list_question         shift and go to state 264
    expression                     shift and go to state 151

state 195

    (133) array_initializer -> KW_array TOK_lsqb . type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight
    (119) type -> . primitive_type
    (120) type -> . reference_type
    (121) primitive_type -> . KW_int
    (122) primitive_type -> . KW_double
    (123) primitive_type -> . KW_char
    (124) primitive_type -> . KW_string
    (125) primitive_type -> . KW_boolean
    (126) primitive_type -> . KW_void
    (127) reference_type -> . class_data_type
    (128) reference_type -> . array_data_type
    (129) class_data_type -> . id
    (130) array_data_type -> . KW_array TOK_lsqb type TOK_rsqb
    (27) id -> . name
    (28) id -> . qualified_id
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name

    KW_int          shift and go to state 202
    KW_double       shift and go to state 196
    KW_char         shift and go to state 199
    KW_string       shift and go to state 198
    KW_boolean      shift and go to state 201
    KW_void         shift and go to state 200
    KW_array        shift and go to state 233
    TOK_identifier  shift and go to state 12

    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    reference_type                 shift and go to state 230
    primitive_type                 shift and go to state 231
    class_data_type                shift and go to state 232
    type                           shift and go to state 265
    id                             shift and go to state 235
    array_data_type                shift and go to state 236

state 196

    (122) primitive_type -> KW_double .

    TOK_assignment  reduce using rule 122 (primitive_type -> KW_double .)
    TOK_comma       reduce using rule 122 (primitive_type -> KW_double .)
    TOK_pararight   reduce using rule 122 (primitive_type -> KW_double .)
    TOK_rsqb        reduce using rule 122 (primitive_type -> KW_double .)
    TOK_lcurly      reduce using rule 122 (primitive_type -> KW_double .)
    KW_new          reduce using rule 122 (primitive_type -> KW_double .)
    KW_array        reduce using rule 122 (primitive_type -> KW_double .)
    KW_if           reduce using rule 122 (primitive_type -> KW_double .)
    TOK_identifier  reduce using rule 122 (primitive_type -> KW_double .)
    TOK_plus        reduce using rule 122 (primitive_type -> KW_double .)
    TOK_minus       reduce using rule 122 (primitive_type -> KW_double .)
    TOK_tilda       reduce using rule 122 (primitive_type -> KW_double .)
    TOK_not         reduce using rule 122 (primitive_type -> KW_double .)
    TOK_paraleft    reduce using rule 122 (primitive_type -> KW_double .)
    TOK_float       reduce using rule 122 (primitive_type -> KW_double .)
    TOK_int         reduce using rule 122 (primitive_type -> KW_double .)
    TOK_char        reduce using rule 122 (primitive_type -> KW_double .)
    TOK_string      reduce using rule 122 (primitive_type -> KW_double .)
    KW_true         reduce using rule 122 (primitive_type -> KW_double .)
    KW_false        reduce using rule 122 (primitive_type -> KW_double .)
    KW_null         reduce using rule 122 (primitive_type -> KW_double .)


state 197

    (79) cast_expression -> TOK_paraleft primitive_type . TOK_pararight unary_expression

    TOK_pararight   shift and go to state 266


state 198

    (124) primitive_type -> KW_string .

    TOK_assignment  reduce using rule 124 (primitive_type -> KW_string .)
    TOK_comma       reduce using rule 124 (primitive_type -> KW_string .)
    TOK_pararight   reduce using rule 124 (primitive_type -> KW_string .)
    TOK_rsqb        reduce using rule 124 (primitive_type -> KW_string .)
    TOK_lcurly      reduce using rule 124 (primitive_type -> KW_string .)
    KW_new          reduce using rule 124 (primitive_type -> KW_string .)
    KW_array        reduce using rule 124 (primitive_type -> KW_string .)
    KW_if           reduce using rule 124 (primitive_type -> KW_string .)
    TOK_identifier  reduce using rule 124 (primitive_type -> KW_string .)
    TOK_plus        reduce using rule 124 (primitive_type -> KW_string .)
    TOK_minus       reduce using rule 124 (primitive_type -> KW_string .)
    TOK_tilda       reduce using rule 124 (primitive_type -> KW_string .)
    TOK_not         reduce using rule 124 (primitive_type -> KW_string .)
    TOK_paraleft    reduce using rule 124 (primitive_type -> KW_string .)
    TOK_float       reduce using rule 124 (primitive_type -> KW_string .)
    TOK_int         reduce using rule 124 (primitive_type -> KW_string .)
    TOK_char        reduce using rule 124 (primitive_type -> KW_string .)
    TOK_string      reduce using rule 124 (primitive_type -> KW_string .)
    KW_true         reduce using rule 124 (primitive_type -> KW_string .)
    KW_false        reduce using rule 124 (primitive_type -> KW_string .)
    KW_null         reduce using rule 124 (primitive_type -> KW_string .)


state 199

    (123) primitive_type -> KW_char .

    TOK_assignment  reduce using rule 123 (primitive_type -> KW_char .)
    TOK_comma       reduce using rule 123 (primitive_type -> KW_char .)
    TOK_pararight   reduce using rule 123 (primitive_type -> KW_char .)
    TOK_rsqb        reduce using rule 123 (primitive_type -> KW_char .)
    TOK_lcurly      reduce using rule 123 (primitive_type -> KW_char .)
    KW_new          reduce using rule 123 (primitive_type -> KW_char .)
    KW_array        reduce using rule 123 (primitive_type -> KW_char .)
    KW_if           reduce using rule 123 (primitive_type -> KW_char .)
    TOK_identifier  reduce using rule 123 (primitive_type -> KW_char .)
    TOK_plus        reduce using rule 123 (primitive_type -> KW_char .)
    TOK_minus       reduce using rule 123 (primitive_type -> KW_char .)
    TOK_tilda       reduce using rule 123 (primitive_type -> KW_char .)
    TOK_not         reduce using rule 123 (primitive_type -> KW_char .)
    TOK_paraleft    reduce using rule 123 (primitive_type -> KW_char .)
    TOK_float       reduce using rule 123 (primitive_type -> KW_char .)
    TOK_int         reduce using rule 123 (primitive_type -> KW_char .)
    TOK_char        reduce using rule 123 (primitive_type -> KW_char .)
    TOK_string      reduce using rule 123 (primitive_type -> KW_char .)
    KW_true         reduce using rule 123 (primitive_type -> KW_char .)
    KW_false        reduce using rule 123 (primitive_type -> KW_char .)
    KW_null         reduce using rule 123 (primitive_type -> KW_char .)


state 200

    (126) primitive_type -> KW_void .

    TOK_assignment  reduce using rule 126 (primitive_type -> KW_void .)
    TOK_comma       reduce using rule 126 (primitive_type -> KW_void .)
    TOK_pararight   reduce using rule 126 (primitive_type -> KW_void .)
    TOK_rsqb        reduce using rule 126 (primitive_type -> KW_void .)
    TOK_lcurly      reduce using rule 126 (primitive_type -> KW_void .)
    KW_new          reduce using rule 126 (primitive_type -> KW_void .)
    KW_array        reduce using rule 126 (primitive_type -> KW_void .)
    KW_if           reduce using rule 126 (primitive_type -> KW_void .)
    TOK_identifier  reduce using rule 126 (primitive_type -> KW_void .)
    TOK_plus        reduce using rule 126 (primitive_type -> KW_void .)
    TOK_minus       reduce using rule 126 (primitive_type -> KW_void .)
    TOK_tilda       reduce using rule 126 (primitive_type -> KW_void .)
    TOK_not         reduce using rule 126 (primitive_type -> KW_void .)
    TOK_paraleft    reduce using rule 126 (primitive_type -> KW_void .)
    TOK_float       reduce using rule 126 (primitive_type -> KW_void .)
    TOK_int         reduce using rule 126 (primitive_type -> KW_void .)
    TOK_char        reduce using rule 126 (primitive_type -> KW_void .)
    TOK_string      reduce using rule 126 (primitive_type -> KW_void .)
    KW_true         reduce using rule 126 (primitive_type -> KW_void .)
    KW_false        reduce using rule 126 (primitive_type -> KW_void .)
    KW_null         reduce using rule 126 (primitive_type -> KW_void .)


state 201

    (125) primitive_type -> KW_boolean .

    TOK_assignment  reduce using rule 125 (primitive_type -> KW_boolean .)
    TOK_comma       reduce using rule 125 (primitive_type -> KW_boolean .)
    TOK_pararight   reduce using rule 125 (primitive_type -> KW_boolean .)
    TOK_rsqb        reduce using rule 125 (primitive_type -> KW_boolean .)
    TOK_lcurly      reduce using rule 125 (primitive_type -> KW_boolean .)
    KW_new          reduce using rule 125 (primitive_type -> KW_boolean .)
    KW_array        reduce using rule 125 (primitive_type -> KW_boolean .)
    KW_if           reduce using rule 125 (primitive_type -> KW_boolean .)
    TOK_identifier  reduce using rule 125 (primitive_type -> KW_boolean .)
    TOK_plus        reduce using rule 125 (primitive_type -> KW_boolean .)
    TOK_minus       reduce using rule 125 (primitive_type -> KW_boolean .)
    TOK_tilda       reduce using rule 125 (primitive_type -> KW_boolean .)
    TOK_not         reduce using rule 125 (primitive_type -> KW_boolean .)
    TOK_paraleft    reduce using rule 125 (primitive_type -> KW_boolean .)
    TOK_float       reduce using rule 125 (primitive_type -> KW_boolean .)
    TOK_int         reduce using rule 125 (primitive_type -> KW_boolean .)
    TOK_char        reduce using rule 125 (primitive_type -> KW_boolean .)
    TOK_string      reduce using rule 125 (primitive_type -> KW_boolean .)
    KW_true         reduce using rule 125 (primitive_type -> KW_boolean .)
    KW_false        reduce using rule 125 (primitive_type -> KW_boolean .)
    KW_null         reduce using rule 125 (primitive_type -> KW_boolean .)


state 202

    (121) primitive_type -> KW_int .

    TOK_assignment  reduce using rule 121 (primitive_type -> KW_int .)
    TOK_comma       reduce using rule 121 (primitive_type -> KW_int .)
    TOK_pararight   reduce using rule 121 (primitive_type -> KW_int .)
    TOK_rsqb        reduce using rule 121 (primitive_type -> KW_int .)
    TOK_lcurly      reduce using rule 121 (primitive_type -> KW_int .)
    KW_new          reduce using rule 121 (primitive_type -> KW_int .)
    KW_array        reduce using rule 121 (primitive_type -> KW_int .)
    KW_if           reduce using rule 121 (primitive_type -> KW_int .)
    TOK_identifier  reduce using rule 121 (primitive_type -> KW_int .)
    TOK_plus        reduce using rule 121 (primitive_type -> KW_int .)
    TOK_minus       reduce using rule 121 (primitive_type -> KW_int .)
    TOK_tilda       reduce using rule 121 (primitive_type -> KW_int .)
    TOK_not         reduce using rule 121 (primitive_type -> KW_int .)
    TOK_paraleft    reduce using rule 121 (primitive_type -> KW_int .)
    TOK_float       reduce using rule 121 (primitive_type -> KW_int .)
    TOK_int         reduce using rule 121 (primitive_type -> KW_int .)
    TOK_char        reduce using rule 121 (primitive_type -> KW_int .)
    TOK_string      reduce using rule 121 (primitive_type -> KW_int .)
    KW_true         reduce using rule 121 (primitive_type -> KW_int .)
    KW_false        reduce using rule 121 (primitive_type -> KW_int .)
    KW_null         reduce using rule 121 (primitive_type -> KW_int .)


state 203

    (76) base_variable_set -> TOK_paraleft expression . TOK_pararight

    TOK_pararight   shift and go to state 267


state 204

    (69) unary_expression -> TOK_minus unary_expression .

    TOK_times       reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_divide      reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_modulus     reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_plus        reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_minus       reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_lshift      reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_rshift      reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_greater     reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_lesser      reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_geq         reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_leq         reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_equal       reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_nequal      reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_and_bitwise reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_xor         reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_or_bitwise  reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_and         reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_or          reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    KW_if           reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    KW_while        reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    KW_for          reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    KW_def          reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_lcurly      reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_semi        reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    KW_return       reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    KW_obj          reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    KW_class        reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    KW_protected    reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    KW_private      reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_identifier  reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    KW_var          reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    KW_val          reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_rcurly      reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_comma       reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_pararight   reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    TOK_rsqb        reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    KW_until        reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    KW_to           reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    KW_else         reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)
    KW_by           reduce using rule 69 (unary_expression -> TOK_minus unary_expression .)


state 205

    (43) conditional_and_expression -> conditional_and_expression TOK_and . inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 172
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 268
    literal                        shift and go to state 99
    and_expression                 shift and go to state 83
    method_invocation              shift and go to state 110
    relational_expression          shift and go to state 103
    multiplicative_expression      shift and go to state 109
    cast_expression                shift and go to state 90
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47

state 206

    (165) return_statement -> KW_return expression_question TOK_semi .

    KW_if           reduce using rule 165 (return_statement -> KW_return expression_question TOK_semi .)
    KW_while        reduce using rule 165 (return_statement -> KW_return expression_question TOK_semi .)
    KW_for          reduce using rule 165 (return_statement -> KW_return expression_question TOK_semi .)
    KW_def          reduce using rule 165 (return_statement -> KW_return expression_question TOK_semi .)
    TOK_lcurly      reduce using rule 165 (return_statement -> KW_return expression_question TOK_semi .)
    TOK_semi        reduce using rule 165 (return_statement -> KW_return expression_question TOK_semi .)
    KW_return       reduce using rule 165 (return_statement -> KW_return expression_question TOK_semi .)
    KW_obj          reduce using rule 165 (return_statement -> KW_return expression_question TOK_semi .)
    KW_class        reduce using rule 165 (return_statement -> KW_return expression_question TOK_semi .)
    KW_protected    reduce using rule 165 (return_statement -> KW_return expression_question TOK_semi .)
    KW_private      reduce using rule 165 (return_statement -> KW_return expression_question TOK_semi .)
    TOK_identifier  reduce using rule 165 (return_statement -> KW_return expression_question TOK_semi .)
    KW_var          reduce using rule 165 (return_statement -> KW_return expression_question TOK_semi .)
    KW_val          reduce using rule 165 (return_statement -> KW_return expression_question TOK_semi .)
    TOK_rcurly      reduce using rule 165 (return_statement -> KW_return expression_question TOK_semi .)
    KW_else         reduce using rule 165 (return_statement -> KW_return expression_question TOK_semi .)


state 207

    (154) while_statement -> KW_while TOK_paraleft expression . TOK_pararight statement

    TOK_pararight   shift and go to state 269


state 208

    (185) class_template -> KW_extends name . TOK_paraleft variable_list TOK_pararight

    TOK_paraleft    shift and go to state 270


state 209

    (175) class_param -> class_declaration_keyword_question variable_declarator_id . expr_question
    (116) expr_question -> . TOK_assignment variable_declaration_initializer
    (117) expr_question -> . empty
    (200) empty -> .

    TOK_assignment  shift and go to state 272
    TOK_comma       reduce using rule 200 (empty -> .)
    TOK_pararight   reduce using rule 200 (empty -> .)

    expr_question                  shift and go to state 271
    empty                          shift and go to state 273

state 210

    (118) variable_declarator_id -> TOK_identifier . TOK_colon type

    TOK_colon       shift and go to state 274


state 211

    (174) class_params -> class_params TOK_comma . class_param
    (175) class_param -> . class_declaration_keyword_question variable_declarator_id expr_question
    (179) class_declaration_keyword_question -> . override_question modifier_question declaration_keyword
    (180) class_declaration_keyword_question -> . empty
    (176) override_question -> . override
    (177) override_question -> . empty
    (200) empty -> .
    (178) override -> . KW_override

    TOK_identifier  reduce using rule 200 (empty -> .)
    KW_protected    reduce using rule 200 (empty -> .)
    KW_private      reduce using rule 200 (empty -> .)
    KW_var          reduce using rule 200 (empty -> .)
    KW_val          reduce using rule 200 (empty -> .)
    KW_override     shift and go to state 139

    class_declaration_keyword_question shift and go to state 140
    class_param                    shift and go to state 275
    empty                          shift and go to state 276
    override                       shift and go to state 144
    override_question              shift and go to state 143

state 212

    (179) class_declaration_keyword_question -> override_question modifier_question . declaration_keyword
    (100) declaration_keyword -> . KW_var
    (101) declaration_keyword -> . KW_val

    KW_var          shift and go to state 78
    KW_val          shift and go to state 80

    declaration_keyword            shift and go to state 277

state 213

    (170) class_param_clause -> TOK_paraleft class_params_question TOK_pararight .

    KW_extends      reduce using rule 170 (class_param_clause -> TOK_paraleft class_params_question TOK_pararight .)
    TOK_lcurly      reduce using rule 170 (class_param_clause -> TOK_paraleft class_params_question TOK_pararight .)


state 214

    (93) argument_list -> argument_list TOK_comma . expression
    (19) expression -> . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    and_expression                 shift and go to state 83
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    unary_expression               shift and go to state 124
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    expression                     shift and go to state 278

state 215

    (91) method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .

    TOK_times       reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_divide      reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_modulus     reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_plus        reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_minus       reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_lshift      reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_rshift      reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_greater     reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_lesser      reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_geq         reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_leq         reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_equal       reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_nequal      reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_and_bitwise reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_xor         reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_or_bitwise  reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_and         reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_or          reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_semi        reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_pararight   reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_comma       reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_by           reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_if           reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_while        reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_for          reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_def          reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_lcurly      reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_return       reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_obj          reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_class        reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_protected    reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_private      reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_identifier  reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_var          reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_val          reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_rcurly      reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    TOK_rsqb        reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_until        reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_to           reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)
    KW_else         reduce using rule 91 (method_invocation -> id TOK_paraleft argument_list_question TOK_pararight .)


state 216

    (32) dimension -> dimension TOK_lsqb expression . TOK_rsqb

    TOK_rsqb        shift and go to state 279


state 217

    (33) dimension -> TOK_lsqb expression TOK_rsqb .

    TOK_lsqb        reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_assignment  reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_mulassign   reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_divassign   reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_modassign   reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_addassign   reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_subassign   reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_times       reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_divide      reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_modulus     reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_plus        reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_minus       reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_lshift      reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_rshift      reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_greater     reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_lesser      reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_geq         reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_leq         reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_equal       reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_nequal      reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_and_bitwise reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_xor         reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_or_bitwise  reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_and         reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_or          reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_if           reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_while        reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_for          reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_def          reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_lcurly      reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_semi        reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_return       reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_obj          reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_class        reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_protected    reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_private      reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_identifier  reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_var          reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_val          reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_rcurly      reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_comma       reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_pararight   reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    TOK_rsqb        reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_until        reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_to           reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_else         reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)
    KW_by           reduce using rule 33 (dimension -> TOK_lsqb expression TOK_rsqb .)


state 218

    (162) for_step_opts -> KW_by . expression
    (19) expression -> . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    and_expression                 shift and go to state 83
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    expression                     shift and go to state 280

state 219

    (158) for_update -> for_loop for_step_opts .

    TOK_semi        reduce using rule 158 (for_update -> for_loop for_step_opts .)
    TOK_pararight   reduce using rule 158 (for_update -> for_loop for_step_opts .)


state 220

    (163) for_step_opts -> empty .

    TOK_semi        reduce using rule 163 (for_step_opts -> empty .)
    TOK_pararight   reduce using rule 163 (for_step_opts -> empty .)


state 221

    (155) for_statement -> KW_for TOK_paraleft for_logic TOK_pararight . statement
    (137) statement -> . normal_statement
    (138) statement -> . if_then_statement
    (139) statement -> . if_then_else_statement
    (140) statement -> . while_statement
    (141) statement -> . for_statement
    (142) normal_statement -> . block
    (143) normal_statement -> . expression_statement
    (144) normal_statement -> . empty_statement
    (145) normal_statement -> . return_statement
    (149) if_then_statement -> . KW_if TOK_paraleft expression TOK_pararight statement
    (150) if_then_else_statement -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (154) while_statement -> . KW_while TOK_paraleft expression TOK_pararight statement
    (155) for_statement -> . KW_for TOK_paraleft for_logic TOK_pararight statement
    (8) block -> . TOK_lcurly block_stats_star TOK_rcurly
    (146) expression_statement -> . statement_expression TOK_semi
    (164) empty_statement -> . TOK_semi
    (165) return_statement -> . KW_return expression_question TOK_semi
    (147) statement_expression -> . assignment
    (148) statement_expression -> . method_invocation
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name

    KW_if           shift and go to state 39
    KW_while        shift and go to state 54
    KW_for          shift and go to state 33
    TOK_lcurly      shift and go to state 14
    TOK_semi        shift and go to state 50
    KW_return       shift and go to state 51
    TOK_identifier  shift and go to state 12

    expression_statement           shift and go to state 23
    normal_statement               shift and go to state 25
    if_then_statement              shift and go to state 27
    left_hand_side                 shift and go to state 28
    array_access                   shift and go to state 29
    id                             shift and go to state 30
    return_statement               shift and go to state 34
    while_statement                shift and go to state 35
    statement                      shift and go to state 281
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 45
    for_statement                  shift and go to state 41
    assignment                     shift and go to state 43
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    empty_statement                shift and go to state 49
    block                          shift and go to state 55
    if_then_else_statement         shift and go to state 56

state 222

    (157) for_logic -> for_update TOK_semi . for_logic
    (156) for_logic -> . for_update
    (157) for_logic -> . for_update TOK_semi for_logic
    (158) for_update -> . for_loop for_step_opts
    (159) for_loop -> . TOK_identifier TOK_choose expression for_untilTo expression

    TOK_identifier  shift and go to state 157

    for_loop                       shift and go to state 154
    for_logic                      shift and go to state 282
    for_update                     shift and go to state 156

state 223

    (159) for_loop -> TOK_identifier TOK_choose . expression for_untilTo expression
    (19) expression -> . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    and_expression                 shift and go to state 83
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    unary_expression               shift and go to state 124
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    expression                     shift and go to state 283

state 224

    (195) fun_params -> fun_param .

    TOK_comma       reduce using rule 195 (fun_params -> fun_param .)
    TOK_pararight   reduce using rule 195 (fun_params -> fun_param .)


state 225

    (193) fun_params_question -> fun_params .
    (196) fun_params -> fun_params . TOK_comma fun_param

    TOK_pararight   reduce using rule 193 (fun_params_question -> fun_params .)
    TOK_comma       shift and go to state 284


state 226

    (192) fun_param_clause -> TOK_paraleft fun_params_question . TOK_pararight

    TOK_pararight   shift and go to state 285


state 227

    (197) fun_param -> variable_declarator_id . expr_question
    (116) expr_question -> . TOK_assignment variable_declaration_initializer
    (117) expr_question -> . empty
    (200) empty -> .

    TOK_assignment  shift and go to state 272
    TOK_comma       reduce using rule 200 (empty -> .)
    TOK_pararight   reduce using rule 200 (empty -> .)

    expr_question                  shift and go to state 286
    empty                          shift and go to state 273

state 228

    (194) fun_params_question -> empty .

    TOK_pararight   reduce using rule 194 (fun_params_question -> empty .)


state 229

    (189) fun_def -> fun_sig type_question TOK_assignment .

    TOK_lcurly      reduce using rule 189 (fun_def -> fun_sig type_question TOK_assignment .)
    KW_new          reduce using rule 189 (fun_def -> fun_sig type_question TOK_assignment .)
    KW_array        reduce using rule 189 (fun_def -> fun_sig type_question TOK_assignment .)
    KW_if           reduce using rule 189 (fun_def -> fun_sig type_question TOK_assignment .)
    TOK_identifier  reduce using rule 189 (fun_def -> fun_sig type_question TOK_assignment .)
    TOK_plus        reduce using rule 189 (fun_def -> fun_sig type_question TOK_assignment .)
    TOK_minus       reduce using rule 189 (fun_def -> fun_sig type_question TOK_assignment .)
    TOK_tilda       reduce using rule 189 (fun_def -> fun_sig type_question TOK_assignment .)
    TOK_not         reduce using rule 189 (fun_def -> fun_sig type_question TOK_assignment .)
    TOK_paraleft    reduce using rule 189 (fun_def -> fun_sig type_question TOK_assignment .)
    TOK_float       reduce using rule 189 (fun_def -> fun_sig type_question TOK_assignment .)
    TOK_int         reduce using rule 189 (fun_def -> fun_sig type_question TOK_assignment .)
    TOK_char        reduce using rule 189 (fun_def -> fun_sig type_question TOK_assignment .)
    TOK_string      reduce using rule 189 (fun_def -> fun_sig type_question TOK_assignment .)
    KW_true         reduce using rule 189 (fun_def -> fun_sig type_question TOK_assignment .)
    KW_false        reduce using rule 189 (fun_def -> fun_sig type_question TOK_assignment .)
    KW_null         reduce using rule 189 (fun_def -> fun_sig type_question TOK_assignment .)


state 230

    (120) type -> reference_type .

    TOK_assignment  reduce using rule 120 (type -> reference_type .)
    TOK_lcurly      reduce using rule 120 (type -> reference_type .)
    KW_new          reduce using rule 120 (type -> reference_type .)
    KW_array        reduce using rule 120 (type -> reference_type .)
    KW_if           reduce using rule 120 (type -> reference_type .)
    TOK_identifier  reduce using rule 120 (type -> reference_type .)
    TOK_plus        reduce using rule 120 (type -> reference_type .)
    TOK_minus       reduce using rule 120 (type -> reference_type .)
    TOK_tilda       reduce using rule 120 (type -> reference_type .)
    TOK_not         reduce using rule 120 (type -> reference_type .)
    TOK_paraleft    reduce using rule 120 (type -> reference_type .)
    TOK_float       reduce using rule 120 (type -> reference_type .)
    TOK_int         reduce using rule 120 (type -> reference_type .)
    TOK_char        reduce using rule 120 (type -> reference_type .)
    TOK_string      reduce using rule 120 (type -> reference_type .)
    KW_true         reduce using rule 120 (type -> reference_type .)
    KW_false        reduce using rule 120 (type -> reference_type .)
    KW_null         reduce using rule 120 (type -> reference_type .)
    TOK_pararight   reduce using rule 120 (type -> reference_type .)
    TOK_comma       reduce using rule 120 (type -> reference_type .)
    TOK_rsqb        reduce using rule 120 (type -> reference_type .)


state 231

    (119) type -> primitive_type .

    TOK_assignment  reduce using rule 119 (type -> primitive_type .)
    TOK_lcurly      reduce using rule 119 (type -> primitive_type .)
    KW_new          reduce using rule 119 (type -> primitive_type .)
    KW_array        reduce using rule 119 (type -> primitive_type .)
    KW_if           reduce using rule 119 (type -> primitive_type .)
    TOK_identifier  reduce using rule 119 (type -> primitive_type .)
    TOK_plus        reduce using rule 119 (type -> primitive_type .)
    TOK_minus       reduce using rule 119 (type -> primitive_type .)
    TOK_tilda       reduce using rule 119 (type -> primitive_type .)
    TOK_not         reduce using rule 119 (type -> primitive_type .)
    TOK_paraleft    reduce using rule 119 (type -> primitive_type .)
    TOK_float       reduce using rule 119 (type -> primitive_type .)
    TOK_int         reduce using rule 119 (type -> primitive_type .)
    TOK_char        reduce using rule 119 (type -> primitive_type .)
    TOK_string      reduce using rule 119 (type -> primitive_type .)
    KW_true         reduce using rule 119 (type -> primitive_type .)
    KW_false        reduce using rule 119 (type -> primitive_type .)
    KW_null         reduce using rule 119 (type -> primitive_type .)
    TOK_pararight   reduce using rule 119 (type -> primitive_type .)
    TOK_comma       reduce using rule 119 (type -> primitive_type .)
    TOK_rsqb        reduce using rule 119 (type -> primitive_type .)


state 232

    (127) reference_type -> class_data_type .

    TOK_rsqb        reduce using rule 127 (reference_type -> class_data_type .)
    TOK_assignment  reduce using rule 127 (reference_type -> class_data_type .)
    TOK_lcurly      reduce using rule 127 (reference_type -> class_data_type .)
    KW_new          reduce using rule 127 (reference_type -> class_data_type .)
    KW_array        reduce using rule 127 (reference_type -> class_data_type .)
    KW_if           reduce using rule 127 (reference_type -> class_data_type .)
    TOK_identifier  reduce using rule 127 (reference_type -> class_data_type .)
    TOK_plus        reduce using rule 127 (reference_type -> class_data_type .)
    TOK_minus       reduce using rule 127 (reference_type -> class_data_type .)
    TOK_tilda       reduce using rule 127 (reference_type -> class_data_type .)
    TOK_not         reduce using rule 127 (reference_type -> class_data_type .)
    TOK_paraleft    reduce using rule 127 (reference_type -> class_data_type .)
    TOK_float       reduce using rule 127 (reference_type -> class_data_type .)
    TOK_int         reduce using rule 127 (reference_type -> class_data_type .)
    TOK_char        reduce using rule 127 (reference_type -> class_data_type .)
    TOK_string      reduce using rule 127 (reference_type -> class_data_type .)
    KW_true         reduce using rule 127 (reference_type -> class_data_type .)
    KW_false        reduce using rule 127 (reference_type -> class_data_type .)
    KW_null         reduce using rule 127 (reference_type -> class_data_type .)
    TOK_pararight   reduce using rule 127 (reference_type -> class_data_type .)
    TOK_comma       reduce using rule 127 (reference_type -> class_data_type .)


state 233

    (130) array_data_type -> KW_array . TOK_lsqb type TOK_rsqb

    TOK_lsqb        shift and go to state 287


state 234

    (181) type_question -> TOK_colon type .

    TOK_pararight   reduce using rule 181 (type_question -> TOK_colon type .)
    TOK_comma       reduce using rule 181 (type_question -> TOK_colon type .)
    TOK_assignment  reduce using rule 181 (type_question -> TOK_colon type .)
    TOK_lcurly      reduce using rule 181 (type_question -> TOK_colon type .)
    KW_new          reduce using rule 181 (type_question -> TOK_colon type .)
    KW_array        reduce using rule 181 (type_question -> TOK_colon type .)
    KW_if           reduce using rule 181 (type_question -> TOK_colon type .)
    TOK_identifier  reduce using rule 181 (type_question -> TOK_colon type .)
    TOK_plus        reduce using rule 181 (type_question -> TOK_colon type .)
    TOK_minus       reduce using rule 181 (type_question -> TOK_colon type .)
    TOK_tilda       reduce using rule 181 (type_question -> TOK_colon type .)
    TOK_not         reduce using rule 181 (type_question -> TOK_colon type .)
    TOK_paraleft    reduce using rule 181 (type_question -> TOK_colon type .)
    TOK_float       reduce using rule 181 (type_question -> TOK_colon type .)
    TOK_int         reduce using rule 181 (type_question -> TOK_colon type .)
    TOK_char        reduce using rule 181 (type_question -> TOK_colon type .)
    TOK_string      reduce using rule 181 (type_question -> TOK_colon type .)
    KW_true         reduce using rule 181 (type_question -> TOK_colon type .)
    KW_false        reduce using rule 181 (type_question -> TOK_colon type .)
    KW_null         reduce using rule 181 (type_question -> TOK_colon type .)


state 235

    (129) class_data_type -> id .

    TOK_rsqb        reduce using rule 129 (class_data_type -> id .)
    TOK_assignment  reduce using rule 129 (class_data_type -> id .)
    TOK_lcurly      reduce using rule 129 (class_data_type -> id .)
    KW_new          reduce using rule 129 (class_data_type -> id .)
    KW_array        reduce using rule 129 (class_data_type -> id .)
    KW_if           reduce using rule 129 (class_data_type -> id .)
    TOK_identifier  reduce using rule 129 (class_data_type -> id .)
    TOK_plus        reduce using rule 129 (class_data_type -> id .)
    TOK_minus       reduce using rule 129 (class_data_type -> id .)
    TOK_tilda       reduce using rule 129 (class_data_type -> id .)
    TOK_not         reduce using rule 129 (class_data_type -> id .)
    TOK_paraleft    reduce using rule 129 (class_data_type -> id .)
    TOK_float       reduce using rule 129 (class_data_type -> id .)
    TOK_int         reduce using rule 129 (class_data_type -> id .)
    TOK_char        reduce using rule 129 (class_data_type -> id .)
    TOK_string      reduce using rule 129 (class_data_type -> id .)
    KW_true         reduce using rule 129 (class_data_type -> id .)
    KW_false        reduce using rule 129 (class_data_type -> id .)
    KW_null         reduce using rule 129 (class_data_type -> id .)
    TOK_pararight   reduce using rule 129 (class_data_type -> id .)
    TOK_comma       reduce using rule 129 (class_data_type -> id .)


state 236

    (128) reference_type -> array_data_type .

    TOK_rsqb        reduce using rule 128 (reference_type -> array_data_type .)
    TOK_assignment  reduce using rule 128 (reference_type -> array_data_type .)
    TOK_lcurly      reduce using rule 128 (reference_type -> array_data_type .)
    KW_new          reduce using rule 128 (reference_type -> array_data_type .)
    KW_array        reduce using rule 128 (reference_type -> array_data_type .)
    KW_if           reduce using rule 128 (reference_type -> array_data_type .)
    TOK_identifier  reduce using rule 128 (reference_type -> array_data_type .)
    TOK_plus        reduce using rule 128 (reference_type -> array_data_type .)
    TOK_minus       reduce using rule 128 (reference_type -> array_data_type .)
    TOK_tilda       reduce using rule 128 (reference_type -> array_data_type .)
    TOK_not         reduce using rule 128 (reference_type -> array_data_type .)
    TOK_paraleft    reduce using rule 128 (reference_type -> array_data_type .)
    TOK_float       reduce using rule 128 (reference_type -> array_data_type .)
    TOK_int         reduce using rule 128 (reference_type -> array_data_type .)
    TOK_char        reduce using rule 128 (reference_type -> array_data_type .)
    TOK_string      reduce using rule 128 (reference_type -> array_data_type .)
    KW_true         reduce using rule 128 (reference_type -> array_data_type .)
    KW_false        reduce using rule 128 (reference_type -> array_data_type .)
    KW_null         reduce using rule 128 (reference_type -> array_data_type .)
    TOK_pararight   reduce using rule 128 (reference_type -> array_data_type .)
    TOK_comma       reduce using rule 128 (reference_type -> array_data_type .)


state 237

    (149) if_then_statement -> KW_if TOK_paraleft expression TOK_pararight . statement
    (150) if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight . if_then_else_intermediate KW_else statement
    (137) statement -> . normal_statement
    (138) statement -> . if_then_statement
    (139) statement -> . if_then_else_statement
    (140) statement -> . while_statement
    (141) statement -> . for_statement
    (152) if_then_else_intermediate -> . normal_statement
    (153) if_then_else_intermediate -> . if_then_else_statement_precedence
    (142) normal_statement -> . block
    (143) normal_statement -> . expression_statement
    (144) normal_statement -> . empty_statement
    (145) normal_statement -> . return_statement
    (149) if_then_statement -> . KW_if TOK_paraleft expression TOK_pararight statement
    (150) if_then_else_statement -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (154) while_statement -> . KW_while TOK_paraleft expression TOK_pararight statement
    (155) for_statement -> . KW_for TOK_paraleft for_logic TOK_pararight statement
    (151) if_then_else_statement_precedence -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate
    (8) block -> . TOK_lcurly block_stats_star TOK_rcurly
    (146) expression_statement -> . statement_expression TOK_semi
    (164) empty_statement -> . TOK_semi
    (165) return_statement -> . KW_return expression_question TOK_semi
    (147) statement_expression -> . assignment
    (148) statement_expression -> . method_invocation
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name

    KW_if           shift and go to state 292
    KW_while        shift and go to state 54
    KW_for          shift and go to state 33
    TOK_lcurly      shift and go to state 14
    TOK_semi        shift and go to state 50
    KW_return       shift and go to state 51
    TOK_identifier  shift and go to state 12

    expression_statement           shift and go to state 23
    if_then_else_statement_precedence shift and go to state 288
    normal_statement               shift and go to state 289
    if_then_else_intermediate      shift and go to state 290
    if_then_statement              shift and go to state 27
    left_hand_side                 shift and go to state 28
    array_access                   shift and go to state 29
    id                             shift and go to state 30
    return_statement               shift and go to state 34
    while_statement                shift and go to state 35
    statement                      shift and go to state 291
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 45
    for_statement                  shift and go to state 41
    assignment                     shift and go to state 43
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    empty_statement                shift and go to state 49
    block                          shift and go to state 55
    if_then_else_statement         shift and go to state 56

state 238

    (111) identifiers -> identifiers TOK_comma . TOK_identifier

    TOK_identifier  shift and go to state 293


state 239

    (109) variable_declaration_body -> identifiers type_question . TOK_assignment variable_declaration_initializer

    TOK_assignment  shift and go to state 294


state 240

    (115) variable_dec -> TOK_identifier . type_question
    (181) type_question -> . TOK_colon type
    (182) type_question -> . empty
    (200) empty -> .

    TOK_colon       shift and go to state 161
    TOK_pararight   reduce using rule 200 (empty -> .)
    TOK_comma       reduce using rule 200 (empty -> .)

    type_question                  shift and go to state 295
    empty                          shift and go to state 162

state 241

    (113) variable_list -> variable_dec .

    TOK_pararight   reduce using rule 113 (variable_list -> variable_dec .)
    TOK_comma       reduce using rule 113 (variable_list -> variable_dec .)


state 242

    (110) variable_declaration_body -> TOK_paraleft variable_list . TOK_pararight TOK_assignment TOK_paraleft variable_argument_list TOK_pararight
    (114) variable_list -> variable_list . TOK_comma variable_dec

    TOK_pararight   shift and go to state 297
    TOK_comma       shift and go to state 296


state 243

    (49) and_expression -> and_expression TOK_and_bitwise equality_expression .
    (51) equality_expression -> equality_expression . TOK_equal relational_expression
    (52) equality_expression -> equality_expression . TOK_nequal relational_expression

    TOK_and_bitwise reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_xor         reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_or_bitwise  reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_and         reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_or          reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_pararight   reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_rsqb        reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_if           reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_while        reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_for          reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_def          reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_lcurly      reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_semi        reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_return       reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_obj          reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_class        reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_protected    reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_private      reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_identifier  reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_var          reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_val          reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_rcurly      reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_comma       reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_until        reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_to           reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_else         reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    KW_by           reduce using rule 49 (and_expression -> and_expression TOK_and_bitwise equality_expression .)
    TOK_equal       shift and go to state 191
    TOK_nequal      shift and go to state 192


state 244

    (47) exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .
    (49) and_expression -> and_expression . TOK_and_bitwise equality_expression

    TOK_xor         reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_or_bitwise  reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_and         reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_or          reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_pararight   reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_comma       reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_semi        reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_rsqb        reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_by           reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_if           reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_while        reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_for          reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_def          reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_lcurly      reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_return       reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_obj          reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_class        reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_protected    reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_private      reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_identifier  reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_var          reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_val          reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_rcurly      reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_until        reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_to           reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    KW_else         reduce using rule 47 (exclusive_or_expression -> exclusive_or_expression TOK_xor and_expression .)
    TOK_and_bitwise shift and go to state 169


state 245

    (45) inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .
    (47) exclusive_or_expression -> exclusive_or_expression . TOK_xor and_expression

    TOK_or_bitwise  reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    TOK_and         reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    TOK_or          reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    TOK_comma       reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    TOK_pararight   reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    TOK_rsqb        reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    TOK_semi        reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_by           reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_else         reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_if           reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_while        reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_for          reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_def          reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    TOK_lcurly      reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_return       reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_obj          reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_class        reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_protected    reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_private      reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    TOK_identifier  reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_var          reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_val          reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    TOK_rcurly      reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_until        reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    KW_to           reduce using rule 45 (inclusive_or_expression -> inclusive_or_expression TOK_or_bitwise exclusive_or_expression .)
    TOK_xor         shift and go to state 170


state 246

    (63) additive_expression -> additive_expression TOK_minus multiplicative_expression .
    (65) multiplicative_expression -> multiplicative_expression . TOK_times unary_expression
    (66) multiplicative_expression -> multiplicative_expression . TOK_divide unary_expression
    (67) multiplicative_expression -> multiplicative_expression . TOK_modulus unary_expression

    TOK_plus        reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_minus       reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_lshift      reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_rshift      reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_greater     reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_lesser      reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_geq         reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_leq         reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_equal       reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_nequal      reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_and_bitwise reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_xor         reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_or_bitwise  reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_and         reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_or          reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_pararight   reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_comma       reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_if           reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_while        reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_for          reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_def          reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_lcurly      reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_semi        reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_return       reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_obj          reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_class        reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_protected    reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_private      reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_identifier  reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_var          reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_val          reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_rcurly      reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_rsqb        reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_until        reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_to           reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_else         reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    KW_by           reduce using rule 63 (additive_expression -> additive_expression TOK_minus multiplicative_expression .)
    TOK_times       shift and go to state 187
    TOK_divide      shift and go to state 188
    TOK_modulus     shift and go to state 189


state 247

    (62) additive_expression -> additive_expression TOK_plus multiplicative_expression .
    (65) multiplicative_expression -> multiplicative_expression . TOK_times unary_expression
    (66) multiplicative_expression -> multiplicative_expression . TOK_divide unary_expression
    (67) multiplicative_expression -> multiplicative_expression . TOK_modulus unary_expression

    TOK_plus        reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_minus       reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_lshift      reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_rshift      reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_greater     reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_lesser      reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_geq         reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_leq         reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_equal       reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_nequal      reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_and_bitwise reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_xor         reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_or_bitwise  reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_and         reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_or          reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_pararight   reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_comma       reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_if           reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_while        reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_for          reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_def          reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_lcurly      reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_semi        reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_return       reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_obj          reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_class        reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_protected    reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_private      reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_identifier  reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_var          reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_val          reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_rcurly      reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_rsqb        reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_until        reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_to           reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_else         reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    KW_by           reduce using rule 62 (additive_expression -> additive_expression TOK_plus multiplicative_expression .)
    TOK_times       shift and go to state 187
    TOK_divide      shift and go to state 188
    TOK_modulus     shift and go to state 189


state 248

    (60) shift_expression -> shift_expression TOK_rshift additive_expression .
    (62) additive_expression -> additive_expression . TOK_plus multiplicative_expression
    (63) additive_expression -> additive_expression . TOK_minus multiplicative_expression

    TOK_lshift      reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_rshift      reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_greater     reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_lesser      reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_geq         reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_leq         reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_equal       reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_nequal      reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_and_bitwise reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_xor         reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_or_bitwise  reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_and         reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_or          reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_if           reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_while        reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_for          reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_def          reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_lcurly      reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_semi        reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_return       reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_obj          reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_class        reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_protected    reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_private      reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_identifier  reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_var          reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_val          reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_rcurly      reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_comma       reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_pararight   reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_rsqb        reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_until        reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_to           reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_else         reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    KW_by           reduce using rule 60 (shift_expression -> shift_expression TOK_rshift additive_expression .)
    TOK_plus        shift and go to state 175
    TOK_minus       shift and go to state 174


state 249

    (59) shift_expression -> shift_expression TOK_lshift additive_expression .
    (62) additive_expression -> additive_expression . TOK_plus multiplicative_expression
    (63) additive_expression -> additive_expression . TOK_minus multiplicative_expression

    TOK_lshift      reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_rshift      reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_greater     reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_lesser      reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_geq         reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_leq         reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_equal       reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_nequal      reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_and_bitwise reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_xor         reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_or_bitwise  reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_and         reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_or          reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_if           reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_while        reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_for          reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_def          reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_lcurly      reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_semi        reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_return       reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_obj          reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_class        reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_protected    reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_private      reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_identifier  reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_var          reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_val          reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_rcurly      reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_comma       reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_pararight   reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_rsqb        reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_until        reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_to           reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_else         reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    KW_by           reduce using rule 59 (shift_expression -> shift_expression TOK_lshift additive_expression .)
    TOK_plus        shift and go to state 175
    TOK_minus       shift and go to state 174


state 250

    (23) if_else_expression -> KW_if TOK_paraleft expression . TOK_pararight expression KW_else expression

    TOK_pararight   shift and go to state 298


state 251

    (131) array_initializer -> KW_new KW_array TOK_lsqb . type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight
    (119) type -> . primitive_type
    (120) type -> . reference_type
    (121) primitive_type -> . KW_int
    (122) primitive_type -> . KW_double
    (123) primitive_type -> . KW_char
    (124) primitive_type -> . KW_string
    (125) primitive_type -> . KW_boolean
    (126) primitive_type -> . KW_void
    (127) reference_type -> . class_data_type
    (128) reference_type -> . array_data_type
    (129) class_data_type -> . id
    (130) array_data_type -> . KW_array TOK_lsqb type TOK_rsqb
    (27) id -> . name
    (28) id -> . qualified_id
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name

    KW_int          shift and go to state 202
    KW_double       shift and go to state 196
    KW_char         shift and go to state 199
    KW_string       shift and go to state 198
    KW_boolean      shift and go to state 201
    KW_void         shift and go to state 200
    KW_array        shift and go to state 233
    TOK_identifier  shift and go to state 12

    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    type                           shift and go to state 299
    reference_type                 shift and go to state 230
    primitive_type                 shift and go to state 231
    class_data_type                shift and go to state 232
    id                             shift and go to state 235
    array_data_type                shift and go to state 236

state 252

    (136) class_initializer -> KW_new name TOK_paraleft . argument_list_question TOK_pararight
    (94) argument_list_question -> . argument_list
    (95) argument_list_question -> . empty
    (92) argument_list -> . expression
    (93) argument_list -> . argument_list TOK_comma expression
    (200) empty -> .
    (19) expression -> . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_pararight   reduce using rule 200 (empty -> .)
    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    and_expression                 shift and go to state 83
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    empty                          shift and go to state 149
    argument_list                  shift and go to state 148
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    additive_expression            shift and go to state 97
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    argument_list_question         shift and go to state 300
    expression                     shift and go to state 151

state 253

    (41) conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .
    (43) conditional_and_expression -> conditional_and_expression . TOK_and inclusive_or_expression

    TOK_or          reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    TOK_comma       reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    TOK_pararight   reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    TOK_rsqb        reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    TOK_semi        reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_if           reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_while        reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_for          reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_def          reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    TOK_lcurly      reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_return       reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_obj          reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_class        reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_protected    reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_private      reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    TOK_identifier  reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_var          reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_val          reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    TOK_rcurly      reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_until        reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_to           reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_else         reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    KW_by           reduce using rule 41 (conditional_or_expression -> conditional_or_expression TOK_or conditional_and_expression .)
    TOK_and         shift and go to state 205


state 254

    (56) relational_expression -> relational_expression TOK_geq shift_expression .
    (59) shift_expression -> shift_expression . TOK_lshift additive_expression
    (60) shift_expression -> shift_expression . TOK_rshift additive_expression

    TOK_greater     reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_lesser      reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_geq         reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_leq         reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_equal       reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_nequal      reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_and_bitwise reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_xor         reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_or_bitwise  reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_and         reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_or          reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_if           reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_while        reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_for          reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_def          reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_lcurly      reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_semi        reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_return       reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_obj          reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_class        reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_protected    reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_private      reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_identifier  reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_var          reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_val          reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_rcurly      reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_comma       reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_pararight   reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_rsqb        reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_until        reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_to           reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_else         reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    KW_by           reduce using rule 56 (relational_expression -> relational_expression TOK_geq shift_expression .)
    TOK_lshift      shift and go to state 177
    TOK_rshift      shift and go to state 176


state 255

    (55) relational_expression -> relational_expression TOK_lesser shift_expression .
    (59) shift_expression -> shift_expression . TOK_lshift additive_expression
    (60) shift_expression -> shift_expression . TOK_rshift additive_expression

    TOK_greater     reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_lesser      reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_geq         reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_leq         reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_equal       reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_nequal      reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_and_bitwise reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_xor         reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_or_bitwise  reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_and         reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_or          reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_if           reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_while        reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_for          reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_def          reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_lcurly      reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_semi        reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_return       reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_obj          reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_class        reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_protected    reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_private      reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_identifier  reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_var          reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_val          reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_rcurly      reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_comma       reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_pararight   reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_rsqb        reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_until        reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_to           reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_else         reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    KW_by           reduce using rule 55 (relational_expression -> relational_expression TOK_lesser shift_expression .)
    TOK_lshift      shift and go to state 177
    TOK_rshift      shift and go to state 176


state 256

    (57) relational_expression -> relational_expression TOK_leq shift_expression .
    (59) shift_expression -> shift_expression . TOK_lshift additive_expression
    (60) shift_expression -> shift_expression . TOK_rshift additive_expression

    TOK_greater     reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_lesser      reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_geq         reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_leq         reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_equal       reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_nequal      reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_and_bitwise reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_xor         reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_or_bitwise  reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_and         reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_or          reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_if           reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_while        reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_for          reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_def          reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_lcurly      reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_semi        reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_return       reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_obj          reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_class        reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_protected    reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_private      reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_identifier  reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_var          reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_val          reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_rcurly      reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_comma       reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_pararight   reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_rsqb        reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_until        reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_to           reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_else         reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    KW_by           reduce using rule 57 (relational_expression -> relational_expression TOK_leq shift_expression .)
    TOK_lshift      shift and go to state 177
    TOK_rshift      shift and go to state 176


state 257

    (54) relational_expression -> relational_expression TOK_greater shift_expression .
    (59) shift_expression -> shift_expression . TOK_lshift additive_expression
    (60) shift_expression -> shift_expression . TOK_rshift additive_expression

    TOK_greater     reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_lesser      reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_geq         reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_leq         reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_equal       reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_nequal      reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_and_bitwise reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_xor         reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_or_bitwise  reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_and         reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_or          reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_if           reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_while        reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_for          reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_def          reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_lcurly      reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_semi        reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_return       reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_obj          reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_class        reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_protected    reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_private      reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_identifier  reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_var          reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_val          reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_rcurly      reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_comma       reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_pararight   reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_rsqb        reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_until        reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_to           reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_else         reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    KW_by           reduce using rule 54 (relational_expression -> relational_expression TOK_greater shift_expression .)
    TOK_lshift      shift and go to state 177
    TOK_rshift      shift and go to state 176


state 258

    (65) multiplicative_expression -> multiplicative_expression TOK_times unary_expression .

    TOK_times       reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_divide      reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_modulus     reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_plus        reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_minus       reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_lshift      reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_rshift      reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_greater     reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_lesser      reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_geq         reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_leq         reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_equal       reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_nequal      reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_and_bitwise reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_xor         reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_or_bitwise  reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_and         reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_or          reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_pararight   reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_comma       reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_if           reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_while        reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_for          reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_def          reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_lcurly      reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_semi        reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_return       reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_obj          reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_class        reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_protected    reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_private      reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_identifier  reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_var          reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_val          reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_rcurly      reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    TOK_rsqb        reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_until        reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_to           reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_else         reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)
    KW_by           reduce using rule 65 (multiplicative_expression -> multiplicative_expression TOK_times unary_expression .)


state 259

    (66) multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .

    TOK_times       reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_divide      reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_modulus     reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_plus        reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_minus       reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_lshift      reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_rshift      reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_greater     reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_lesser      reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_geq         reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_leq         reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_equal       reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_nequal      reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_and_bitwise reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_xor         reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_or_bitwise  reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_and         reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_or          reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_pararight   reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_comma       reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_if           reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_while        reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_for          reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_def          reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_lcurly      reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_semi        reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_return       reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_obj          reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_class        reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_protected    reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_private      reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_identifier  reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_var          reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_val          reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_rcurly      reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    TOK_rsqb        reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_until        reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_to           reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_else         reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)
    KW_by           reduce using rule 66 (multiplicative_expression -> multiplicative_expression TOK_divide unary_expression .)


state 260

    (67) multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .

    TOK_times       reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_divide      reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_modulus     reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_plus        reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_minus       reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_lshift      reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_rshift      reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_greater     reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_lesser      reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_geq         reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_leq         reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_equal       reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_nequal      reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_and_bitwise reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_xor         reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_or_bitwise  reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_and         reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_or          reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_pararight   reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_comma       reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_if           reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_while        reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_for          reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_def          reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_lcurly      reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_semi        reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_return       reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_obj          reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_class        reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_protected    reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_private      reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_identifier  reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_var          reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_val          reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_rcurly      reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    TOK_rsqb        reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_until        reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_to           reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_else         reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)
    KW_by           reduce using rule 67 (multiplicative_expression -> multiplicative_expression TOK_modulus unary_expression .)


state 261

    (51) equality_expression -> equality_expression TOK_equal relational_expression .
    (54) relational_expression -> relational_expression . TOK_greater shift_expression
    (55) relational_expression -> relational_expression . TOK_lesser shift_expression
    (56) relational_expression -> relational_expression . TOK_geq shift_expression
    (57) relational_expression -> relational_expression . TOK_leq shift_expression

    TOK_equal       reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_nequal      reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_and_bitwise reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_xor         reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_or_bitwise  reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_and         reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_or          reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_pararight   reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_if           reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_while        reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_for          reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_def          reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_lcurly      reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_semi        reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_return       reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_obj          reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_class        reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_protected    reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_private      reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_identifier  reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_var          reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_val          reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_rcurly      reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_comma       reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_until        reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_to           reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_rsqb        reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_else         reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    KW_by           reduce using rule 51 (equality_expression -> equality_expression TOK_equal relational_expression .)
    TOK_greater     shift and go to state 185
    TOK_lesser      shift and go to state 183
    TOK_geq         shift and go to state 182
    TOK_leq         shift and go to state 184


state 262

    (52) equality_expression -> equality_expression TOK_nequal relational_expression .
    (54) relational_expression -> relational_expression . TOK_greater shift_expression
    (55) relational_expression -> relational_expression . TOK_lesser shift_expression
    (56) relational_expression -> relational_expression . TOK_geq shift_expression
    (57) relational_expression -> relational_expression . TOK_leq shift_expression

    TOK_equal       reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_nequal      reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_and_bitwise reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_xor         reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_or_bitwise  reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_and         reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_or          reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_pararight   reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_if           reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_while        reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_for          reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_def          reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_lcurly      reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_semi        reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_return       reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_obj          reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_class        reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_protected    reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_private      reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_identifier  reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_var          reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_val          reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_rcurly      reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_comma       reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_until        reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_to           reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_rsqb        reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_else         reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    KW_by           reduce using rule 52 (equality_expression -> equality_expression TOK_nequal relational_expression .)
    TOK_greater     shift and go to state 185
    TOK_lesser      shift and go to state 183
    TOK_geq         shift and go to state 182
    TOK_leq         shift and go to state 184


state 263

    (135) multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim . TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight

    TOK_lsqb        shift and go to state 301


state 264

    (132) array_initializer -> KW_array TOK_paraleft argument_list_question . TOK_pararight

    TOK_pararight   shift and go to state 302


state 265

    (133) array_initializer -> KW_array TOK_lsqb type . TOK_rsqb TOK_paraleft argument_list_question TOK_pararight

    TOK_rsqb        shift and go to state 303


state 266

    (79) cast_expression -> TOK_paraleft primitive_type TOK_pararight . unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    int_float                      shift and go to state 120
    c_literal                      shift and go to state 91
    qualified_id                   shift and go to state 47
    variable_literal               shift and go to state 115
    unary_expression               shift and go to state 304
    base_variable_set              shift and go to state 93
    array_access                   shift and go to state 29
    method_invocation              shift and go to state 110
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    literal                        shift and go to state 99
    left_hand_side                 shift and go to state 172
    cast_expression                shift and go to state 90
    id                             shift and go to state 89
    name                           shift and go to state 46

state 267

    (76) base_variable_set -> TOK_paraleft expression TOK_pararight .

    TOK_times       reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_divide      reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_modulus     reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_plus        reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_minus       reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_lshift      reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_rshift      reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_greater     reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_lesser      reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_geq         reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_leq         reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_equal       reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_nequal      reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_and_bitwise reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_xor         reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_or_bitwise  reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_and         reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_or          reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_if           reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_while        reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_for          reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_def          reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_lcurly      reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_semi        reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_return       reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_obj          reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_class        reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_protected    reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_private      reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_identifier  reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_var          reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_val          reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_rcurly      reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_comma       reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_pararight   reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    TOK_rsqb        reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_until        reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_to           reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_else         reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)
    KW_by           reduce using rule 76 (base_variable_set -> TOK_paraleft expression TOK_pararight .)


state 268

    (43) conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .
    (45) inclusive_or_expression -> inclusive_or_expression . TOK_or_bitwise exclusive_or_expression

    TOK_and         reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    TOK_or          reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    TOK_pararight   reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    TOK_comma       reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_until        reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_to           reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    TOK_semi        reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_if           reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_while        reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_for          reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_def          reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    TOK_lcurly      reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_return       reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_obj          reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_class        reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_protected    reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_private      reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    TOK_identifier  reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_var          reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_val          reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    TOK_rcurly      reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    TOK_rsqb        reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_else         reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    KW_by           reduce using rule 43 (conditional_and_expression -> conditional_and_expression TOK_and inclusive_or_expression .)
    TOK_or_bitwise  shift and go to state 173


state 269

    (154) while_statement -> KW_while TOK_paraleft expression TOK_pararight . statement
    (137) statement -> . normal_statement
    (138) statement -> . if_then_statement
    (139) statement -> . if_then_else_statement
    (140) statement -> . while_statement
    (141) statement -> . for_statement
    (142) normal_statement -> . block
    (143) normal_statement -> . expression_statement
    (144) normal_statement -> . empty_statement
    (145) normal_statement -> . return_statement
    (149) if_then_statement -> . KW_if TOK_paraleft expression TOK_pararight statement
    (150) if_then_else_statement -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (154) while_statement -> . KW_while TOK_paraleft expression TOK_pararight statement
    (155) for_statement -> . KW_for TOK_paraleft for_logic TOK_pararight statement
    (8) block -> . TOK_lcurly block_stats_star TOK_rcurly
    (146) expression_statement -> . statement_expression TOK_semi
    (164) empty_statement -> . TOK_semi
    (165) return_statement -> . KW_return expression_question TOK_semi
    (147) statement_expression -> . assignment
    (148) statement_expression -> . method_invocation
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name

    KW_if           shift and go to state 39
    KW_while        shift and go to state 54
    KW_for          shift and go to state 33
    TOK_lcurly      shift and go to state 14
    TOK_semi        shift and go to state 50
    KW_return       shift and go to state 51
    TOK_identifier  shift and go to state 12

    expression_statement           shift and go to state 23
    normal_statement               shift and go to state 25
    if_then_statement              shift and go to state 27
    left_hand_side                 shift and go to state 28
    array_access                   shift and go to state 29
    id                             shift and go to state 30
    return_statement               shift and go to state 34
    while_statement                shift and go to state 35
    statement                      shift and go to state 305
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 45
    for_statement                  shift and go to state 41
    assignment                     shift and go to state 43
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    empty_statement                shift and go to state 49
    block                          shift and go to state 55
    if_then_else_statement         shift and go to state 56

state 270

    (185) class_template -> KW_extends name TOK_paraleft . variable_list TOK_pararight
    (113) variable_list -> . variable_dec
    (114) variable_list -> . variable_list TOK_comma variable_dec
    (115) variable_dec -> . TOK_identifier type_question

    TOK_identifier  shift and go to state 240

    variable_list                  shift and go to state 306
    variable_dec                   shift and go to state 241

state 271

    (175) class_param -> class_declaration_keyword_question variable_declarator_id expr_question .

    TOK_comma       reduce using rule 175 (class_param -> class_declaration_keyword_question variable_declarator_id expr_question .)
    TOK_pararight   reduce using rule 175 (class_param -> class_declaration_keyword_question variable_declarator_id expr_question .)


state 272

    (116) expr_question -> TOK_assignment . variable_declaration_initializer
    (104) variable_declaration_initializer -> . expression
    (105) variable_declaration_initializer -> . array_initializer
    (106) variable_declaration_initializer -> . class_initializer
    (19) expression -> . assignment_expression
    (131) array_initializer -> . KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight
    (132) array_initializer -> . KW_array TOK_paraleft argument_list_question TOK_pararight
    (133) array_initializer -> . KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight
    (134) array_initializer -> . multidimensional_array_initializer
    (136) class_initializer -> . KW_new name TOK_paraleft argument_list_question TOK_pararight
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (135) multidimensional_array_initializer -> . KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_new          shift and go to state 101
    KW_array        shift and go to state 121
    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    variable_declaration_initializer shift and go to state 307
    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    and_expression                 shift and go to state 83
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    multidimensional_array_initializer shift and go to state 96
    literal                        shift and go to state 99
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    relational_expression          shift and go to state 103
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    additive_expression            shift and go to state 97
    method_invocation              shift and go to state 110
    class_initializer              shift and go to state 114
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    array_initializer              shift and go to state 118
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    expression                     shift and go to state 126

state 273

    (117) expr_question -> empty .

    TOK_comma       reduce using rule 117 (expr_question -> empty .)
    TOK_pararight   reduce using rule 117 (expr_question -> empty .)


state 274

    (118) variable_declarator_id -> TOK_identifier TOK_colon . type
    (119) type -> . primitive_type
    (120) type -> . reference_type
    (121) primitive_type -> . KW_int
    (122) primitive_type -> . KW_double
    (123) primitive_type -> . KW_char
    (124) primitive_type -> . KW_string
    (125) primitive_type -> . KW_boolean
    (126) primitive_type -> . KW_void
    (127) reference_type -> . class_data_type
    (128) reference_type -> . array_data_type
    (129) class_data_type -> . id
    (130) array_data_type -> . KW_array TOK_lsqb type TOK_rsqb
    (27) id -> . name
    (28) id -> . qualified_id
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name

    KW_int          shift and go to state 202
    KW_double       shift and go to state 196
    KW_char         shift and go to state 199
    KW_string       shift and go to state 198
    KW_boolean      shift and go to state 201
    KW_void         shift and go to state 200
    KW_array        shift and go to state 233
    TOK_identifier  shift and go to state 12

    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    reference_type                 shift and go to state 230
    primitive_type                 shift and go to state 231
    class_data_type                shift and go to state 232
    type                           shift and go to state 308
    id                             shift and go to state 235
    array_data_type                shift and go to state 236

state 275

    (174) class_params -> class_params TOK_comma class_param .

    TOK_comma       reduce using rule 174 (class_params -> class_params TOK_comma class_param .)
    TOK_pararight   reduce using rule 174 (class_params -> class_params TOK_comma class_param .)


state 276

    (180) class_declaration_keyword_question -> empty .
    (177) override_question -> empty .

    TOK_identifier  reduce using rule 180 (class_declaration_keyword_question -> empty .)
    KW_protected    reduce using rule 177 (override_question -> empty .)
    KW_private      reduce using rule 177 (override_question -> empty .)
    KW_var          reduce using rule 177 (override_question -> empty .)
    KW_val          reduce using rule 177 (override_question -> empty .)


state 277

    (179) class_declaration_keyword_question -> override_question modifier_question declaration_keyword .

    TOK_identifier  reduce using rule 179 (class_declaration_keyword_question -> override_question modifier_question declaration_keyword .)


state 278

    (93) argument_list -> argument_list TOK_comma expression .

    TOK_comma       reduce using rule 93 (argument_list -> argument_list TOK_comma expression .)
    TOK_pararight   reduce using rule 93 (argument_list -> argument_list TOK_comma expression .)


state 279

    (32) dimension -> dimension TOK_lsqb expression TOK_rsqb .

    TOK_lsqb        reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_assignment  reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_mulassign   reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_divassign   reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_modassign   reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_addassign   reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_subassign   reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_times       reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_divide      reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_modulus     reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_plus        reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_minus       reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_lshift      reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_rshift      reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_greater     reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_lesser      reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_geq         reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_leq         reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_equal       reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_nequal      reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_and_bitwise reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_xor         reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_or_bitwise  reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_and         reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_or          reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    KW_if           reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    KW_while        reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    KW_for          reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    KW_def          reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_lcurly      reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_semi        reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    KW_return       reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    KW_obj          reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    KW_class        reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    KW_protected    reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    KW_private      reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_identifier  reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    KW_var          reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    KW_val          reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_rcurly      reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_comma       reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_pararight   reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    TOK_rsqb        reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    KW_until        reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    KW_to           reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    KW_else         reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)
    KW_by           reduce using rule 32 (dimension -> dimension TOK_lsqb expression TOK_rsqb .)


state 280

    (162) for_step_opts -> KW_by expression .

    TOK_semi        reduce using rule 162 (for_step_opts -> KW_by expression .)
    TOK_pararight   reduce using rule 162 (for_step_opts -> KW_by expression .)


state 281

    (155) for_statement -> KW_for TOK_paraleft for_logic TOK_pararight statement .

    KW_if           reduce using rule 155 (for_statement -> KW_for TOK_paraleft for_logic TOK_pararight statement .)
    KW_while        reduce using rule 155 (for_statement -> KW_for TOK_paraleft for_logic TOK_pararight statement .)
    KW_for          reduce using rule 155 (for_statement -> KW_for TOK_paraleft for_logic TOK_pararight statement .)
    KW_def          reduce using rule 155 (for_statement -> KW_for TOK_paraleft for_logic TOK_pararight statement .)
    TOK_lcurly      reduce using rule 155 (for_statement -> KW_for TOK_paraleft for_logic TOK_pararight statement .)
    TOK_semi        reduce using rule 155 (for_statement -> KW_for TOK_paraleft for_logic TOK_pararight statement .)
    KW_return       reduce using rule 155 (for_statement -> KW_for TOK_paraleft for_logic TOK_pararight statement .)
    KW_obj          reduce using rule 155 (for_statement -> KW_for TOK_paraleft for_logic TOK_pararight statement .)
    KW_class        reduce using rule 155 (for_statement -> KW_for TOK_paraleft for_logic TOK_pararight statement .)
    KW_protected    reduce using rule 155 (for_statement -> KW_for TOK_paraleft for_logic TOK_pararight statement .)
    KW_private      reduce using rule 155 (for_statement -> KW_for TOK_paraleft for_logic TOK_pararight statement .)
    TOK_identifier  reduce using rule 155 (for_statement -> KW_for TOK_paraleft for_logic TOK_pararight statement .)
    KW_var          reduce using rule 155 (for_statement -> KW_for TOK_paraleft for_logic TOK_pararight statement .)
    KW_val          reduce using rule 155 (for_statement -> KW_for TOK_paraleft for_logic TOK_pararight statement .)
    TOK_rcurly      reduce using rule 155 (for_statement -> KW_for TOK_paraleft for_logic TOK_pararight statement .)


state 282

    (157) for_logic -> for_update TOK_semi for_logic .

    TOK_pararight   reduce using rule 157 (for_logic -> for_update TOK_semi for_logic .)


state 283

    (159) for_loop -> TOK_identifier TOK_choose expression . for_untilTo expression
    (160) for_untilTo -> . KW_until
    (161) for_untilTo -> . KW_to

    KW_until        shift and go to state 310
    KW_to           shift and go to state 311

    for_untilTo                    shift and go to state 309

state 284

    (196) fun_params -> fun_params TOK_comma . fun_param
    (197) fun_param -> . variable_declarator_id expr_question
    (118) variable_declarator_id -> . TOK_identifier TOK_colon type

    TOK_identifier  shift and go to state 210

    fun_param                      shift and go to state 312
    variable_declarator_id         shift and go to state 227

state 285

    (192) fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .

    TOK_colon       reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    TOK_assignment  reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    TOK_lcurly      reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    KW_new          reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    KW_array        reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    KW_if           reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    TOK_identifier  reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    TOK_plus        reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    TOK_minus       reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    TOK_tilda       reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    TOK_not         reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    TOK_paraleft    reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    TOK_float       reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    TOK_int         reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    TOK_char        reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    TOK_string      reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    KW_true         reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    KW_false        reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)
    KW_null         reduce using rule 192 (fun_param_clause -> TOK_paraleft fun_params_question TOK_pararight .)


state 286

    (197) fun_param -> variable_declarator_id expr_question .

    TOK_comma       reduce using rule 197 (fun_param -> variable_declarator_id expr_question .)
    TOK_pararight   reduce using rule 197 (fun_param -> variable_declarator_id expr_question .)


state 287

    (130) array_data_type -> KW_array TOK_lsqb . type TOK_rsqb
    (119) type -> . primitive_type
    (120) type -> . reference_type
    (121) primitive_type -> . KW_int
    (122) primitive_type -> . KW_double
    (123) primitive_type -> . KW_char
    (124) primitive_type -> . KW_string
    (125) primitive_type -> . KW_boolean
    (126) primitive_type -> . KW_void
    (127) reference_type -> . class_data_type
    (128) reference_type -> . array_data_type
    (129) class_data_type -> . id
    (130) array_data_type -> . KW_array TOK_lsqb type TOK_rsqb
    (27) id -> . name
    (28) id -> . qualified_id
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name

    KW_int          shift and go to state 202
    KW_double       shift and go to state 196
    KW_char         shift and go to state 199
    KW_string       shift and go to state 198
    KW_boolean      shift and go to state 201
    KW_void         shift and go to state 200
    KW_array        shift and go to state 233
    TOK_identifier  shift and go to state 12

    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    reference_type                 shift and go to state 230
    primitive_type                 shift and go to state 231
    class_data_type                shift and go to state 232
    type                           shift and go to state 313
    id                             shift and go to state 235
    array_data_type                shift and go to state 236

state 288

    (153) if_then_else_intermediate -> if_then_else_statement_precedence .

    KW_else         reduce using rule 153 (if_then_else_intermediate -> if_then_else_statement_precedence .)


state 289

    (137) statement -> normal_statement .
    (152) if_then_else_intermediate -> normal_statement .

    KW_if           reduce using rule 137 (statement -> normal_statement .)
    KW_while        reduce using rule 137 (statement -> normal_statement .)
    KW_for          reduce using rule 137 (statement -> normal_statement .)
    KW_def          reduce using rule 137 (statement -> normal_statement .)
    TOK_lcurly      reduce using rule 137 (statement -> normal_statement .)
    TOK_semi        reduce using rule 137 (statement -> normal_statement .)
    KW_return       reduce using rule 137 (statement -> normal_statement .)
    KW_obj          reduce using rule 137 (statement -> normal_statement .)
    KW_class        reduce using rule 137 (statement -> normal_statement .)
    KW_protected    reduce using rule 137 (statement -> normal_statement .)
    KW_private      reduce using rule 137 (statement -> normal_statement .)
    TOK_identifier  reduce using rule 137 (statement -> normal_statement .)
    KW_var          reduce using rule 137 (statement -> normal_statement .)
    KW_val          reduce using rule 137 (statement -> normal_statement .)
    TOK_rcurly      reduce using rule 137 (statement -> normal_statement .)
    KW_else         reduce using rule 152 (if_then_else_intermediate -> normal_statement .)


state 290

    (150) if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate . KW_else statement

    KW_else         shift and go to state 314


state 291

    (149) if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .

    KW_if           reduce using rule 149 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    KW_while        reduce using rule 149 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    KW_for          reduce using rule 149 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    KW_def          reduce using rule 149 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    TOK_lcurly      reduce using rule 149 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    TOK_semi        reduce using rule 149 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    KW_return       reduce using rule 149 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    KW_obj          reduce using rule 149 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    KW_class        reduce using rule 149 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    KW_protected    reduce using rule 149 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    KW_private      reduce using rule 149 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    TOK_identifier  reduce using rule 149 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    KW_var          reduce using rule 149 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    KW_val          reduce using rule 149 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)
    TOK_rcurly      reduce using rule 149 (if_then_statement -> KW_if TOK_paraleft expression TOK_pararight statement .)


state 292

    (149) if_then_statement -> KW_if . TOK_paraleft expression TOK_pararight statement
    (150) if_then_else_statement -> KW_if . TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (151) if_then_else_statement_precedence -> KW_if . TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate

    TOK_paraleft    shift and go to state 315


state 293

    (111) identifiers -> identifiers TOK_comma TOK_identifier .

    TOK_comma       reduce using rule 111 (identifiers -> identifiers TOK_comma TOK_identifier .)
    TOK_colon       reduce using rule 111 (identifiers -> identifiers TOK_comma TOK_identifier .)
    TOK_assignment  reduce using rule 111 (identifiers -> identifiers TOK_comma TOK_identifier .)


state 294

    (109) variable_declaration_body -> identifiers type_question TOK_assignment . variable_declaration_initializer
    (104) variable_declaration_initializer -> . expression
    (105) variable_declaration_initializer -> . array_initializer
    (106) variable_declaration_initializer -> . class_initializer
    (19) expression -> . assignment_expression
    (131) array_initializer -> . KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight
    (132) array_initializer -> . KW_array TOK_paraleft argument_list_question TOK_pararight
    (133) array_initializer -> . KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight
    (134) array_initializer -> . multidimensional_array_initializer
    (136) class_initializer -> . KW_new name TOK_paraleft argument_list_question TOK_pararight
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (135) multidimensional_array_initializer -> . KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_new          shift and go to state 101
    KW_array        shift and go to state 121
    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    variable_declaration_initializer shift and go to state 316
    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    and_expression                 shift and go to state 83
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    multidimensional_array_initializer shift and go to state 96
    literal                        shift and go to state 99
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    relational_expression          shift and go to state 103
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    additive_expression            shift and go to state 97
    method_invocation              shift and go to state 110
    class_initializer              shift and go to state 114
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    array_initializer              shift and go to state 118
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    expression                     shift and go to state 126
    conditional_and_expression     shift and go to state 127

state 295

    (115) variable_dec -> TOK_identifier type_question .

    TOK_pararight   reduce using rule 115 (variable_dec -> TOK_identifier type_question .)
    TOK_comma       reduce using rule 115 (variable_dec -> TOK_identifier type_question .)


state 296

    (114) variable_list -> variable_list TOK_comma . variable_dec
    (115) variable_dec -> . TOK_identifier type_question

    TOK_identifier  shift and go to state 240

    variable_dec                   shift and go to state 317

state 297

    (110) variable_declaration_body -> TOK_paraleft variable_list TOK_pararight . TOK_assignment TOK_paraleft variable_argument_list TOK_pararight

    TOK_assignment  shift and go to state 318


state 298

    (23) if_else_expression -> KW_if TOK_paraleft expression TOK_pararight . expression KW_else expression
    (19) expression -> . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    and_expression                 shift and go to state 83
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    expression                     shift and go to state 319

state 299

    (131) array_initializer -> KW_new KW_array TOK_lsqb type . TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight

    TOK_rsqb        shift and go to state 320


state 300

    (136) class_initializer -> KW_new name TOK_paraleft argument_list_question . TOK_pararight

    TOK_pararight   shift and go to state 321


state 301

    (135) multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb . type TOK_rsqb TOK_paraleft argument_list TOK_pararight
    (119) type -> . primitive_type
    (120) type -> . reference_type
    (121) primitive_type -> . KW_int
    (122) primitive_type -> . KW_double
    (123) primitive_type -> . KW_char
    (124) primitive_type -> . KW_string
    (125) primitive_type -> . KW_boolean
    (126) primitive_type -> . KW_void
    (127) reference_type -> . class_data_type
    (128) reference_type -> . array_data_type
    (129) class_data_type -> . id
    (130) array_data_type -> . KW_array TOK_lsqb type TOK_rsqb
    (27) id -> . name
    (28) id -> . qualified_id
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name

    KW_int          shift and go to state 202
    KW_double       shift and go to state 196
    KW_char         shift and go to state 199
    KW_string       shift and go to state 198
    KW_boolean      shift and go to state 201
    KW_void         shift and go to state 200
    KW_array        shift and go to state 233
    TOK_identifier  shift and go to state 12

    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    reference_type                 shift and go to state 230
    primitive_type                 shift and go to state 231
    type                           shift and go to state 322
    id                             shift and go to state 235
    array_data_type                shift and go to state 236
    class_data_type                shift and go to state 232

state 302

    (132) array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .

    TOK_pararight   reduce using rule 132 (array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .)
    TOK_comma       reduce using rule 132 (array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .)
    TOK_semi        reduce using rule 132 (array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .)
    KW_if           reduce using rule 132 (array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .)
    KW_while        reduce using rule 132 (array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .)
    KW_for          reduce using rule 132 (array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .)
    KW_def          reduce using rule 132 (array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .)
    TOK_lcurly      reduce using rule 132 (array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .)
    KW_return       reduce using rule 132 (array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .)
    KW_obj          reduce using rule 132 (array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .)
    KW_class        reduce using rule 132 (array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .)
    KW_protected    reduce using rule 132 (array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .)
    KW_private      reduce using rule 132 (array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .)
    TOK_identifier  reduce using rule 132 (array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .)
    KW_var          reduce using rule 132 (array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .)
    KW_val          reduce using rule 132 (array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .)
    TOK_rcurly      reduce using rule 132 (array_initializer -> KW_array TOK_paraleft argument_list_question TOK_pararight .)


state 303

    (133) array_initializer -> KW_array TOK_lsqb type TOK_rsqb . TOK_paraleft argument_list_question TOK_pararight

    TOK_paraleft    shift and go to state 323


state 304

    (79) cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .

    TOK_times       reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_divide      reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_modulus     reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_plus        reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_minus       reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_lshift      reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_rshift      reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_greater     reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_lesser      reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_geq         reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_leq         reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_equal       reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_nequal      reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_and_bitwise reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_xor         reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_or_bitwise  reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_and         reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_or          reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    KW_if           reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    KW_while        reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    KW_for          reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    KW_def          reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_lcurly      reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_semi        reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    KW_return       reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    KW_obj          reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    KW_class        reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    KW_protected    reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    KW_private      reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_identifier  reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    KW_var          reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    KW_val          reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_rcurly      reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_comma       reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_pararight   reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    TOK_rsqb        reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    KW_until        reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    KW_to           reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    KW_else         reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)
    KW_by           reduce using rule 79 (cast_expression -> TOK_paraleft primitive_type TOK_pararight unary_expression .)


state 305

    (154) while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .

    KW_if           reduce using rule 154 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    KW_while        reduce using rule 154 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    KW_for          reduce using rule 154 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    KW_def          reduce using rule 154 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    TOK_lcurly      reduce using rule 154 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    TOK_semi        reduce using rule 154 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    KW_return       reduce using rule 154 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    KW_obj          reduce using rule 154 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    KW_class        reduce using rule 154 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    KW_protected    reduce using rule 154 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    KW_private      reduce using rule 154 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    TOK_identifier  reduce using rule 154 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    KW_var          reduce using rule 154 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    KW_val          reduce using rule 154 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)
    TOK_rcurly      reduce using rule 154 (while_statement -> KW_while TOK_paraleft expression TOK_pararight statement .)


state 306

    (185) class_template -> KW_extends name TOK_paraleft variable_list . TOK_pararight
    (114) variable_list -> variable_list . TOK_comma variable_dec

    TOK_pararight   shift and go to state 324
    TOK_comma       shift and go to state 296


state 307

    (116) expr_question -> TOK_assignment variable_declaration_initializer .

    TOK_comma       reduce using rule 116 (expr_question -> TOK_assignment variable_declaration_initializer .)
    TOK_pararight   reduce using rule 116 (expr_question -> TOK_assignment variable_declaration_initializer .)


state 308

    (118) variable_declarator_id -> TOK_identifier TOK_colon type .

    TOK_assignment  reduce using rule 118 (variable_declarator_id -> TOK_identifier TOK_colon type .)
    TOK_comma       reduce using rule 118 (variable_declarator_id -> TOK_identifier TOK_colon type .)
    TOK_pararight   reduce using rule 118 (variable_declarator_id -> TOK_identifier TOK_colon type .)


state 309

    (159) for_loop -> TOK_identifier TOK_choose expression for_untilTo . expression
    (19) expression -> . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    and_expression                 shift and go to state 83
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    unary_expression               shift and go to state 124
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    expression                     shift and go to state 325

state 310

    (160) for_untilTo -> KW_until .

    KW_if           reduce using rule 160 (for_untilTo -> KW_until .)
    TOK_identifier  reduce using rule 160 (for_untilTo -> KW_until .)
    TOK_plus        reduce using rule 160 (for_untilTo -> KW_until .)
    TOK_minus       reduce using rule 160 (for_untilTo -> KW_until .)
    TOK_tilda       reduce using rule 160 (for_untilTo -> KW_until .)
    TOK_not         reduce using rule 160 (for_untilTo -> KW_until .)
    TOK_paraleft    reduce using rule 160 (for_untilTo -> KW_until .)
    TOK_float       reduce using rule 160 (for_untilTo -> KW_until .)
    TOK_int         reduce using rule 160 (for_untilTo -> KW_until .)
    TOK_char        reduce using rule 160 (for_untilTo -> KW_until .)
    TOK_string      reduce using rule 160 (for_untilTo -> KW_until .)
    KW_true         reduce using rule 160 (for_untilTo -> KW_until .)
    KW_false        reduce using rule 160 (for_untilTo -> KW_until .)
    KW_null         reduce using rule 160 (for_untilTo -> KW_until .)


state 311

    (161) for_untilTo -> KW_to .

    KW_if           reduce using rule 161 (for_untilTo -> KW_to .)
    TOK_identifier  reduce using rule 161 (for_untilTo -> KW_to .)
    TOK_plus        reduce using rule 161 (for_untilTo -> KW_to .)
    TOK_minus       reduce using rule 161 (for_untilTo -> KW_to .)
    TOK_tilda       reduce using rule 161 (for_untilTo -> KW_to .)
    TOK_not         reduce using rule 161 (for_untilTo -> KW_to .)
    TOK_paraleft    reduce using rule 161 (for_untilTo -> KW_to .)
    TOK_float       reduce using rule 161 (for_untilTo -> KW_to .)
    TOK_int         reduce using rule 161 (for_untilTo -> KW_to .)
    TOK_char        reduce using rule 161 (for_untilTo -> KW_to .)
    TOK_string      reduce using rule 161 (for_untilTo -> KW_to .)
    KW_true         reduce using rule 161 (for_untilTo -> KW_to .)
    KW_false        reduce using rule 161 (for_untilTo -> KW_to .)
    KW_null         reduce using rule 161 (for_untilTo -> KW_to .)


state 312

    (196) fun_params -> fun_params TOK_comma fun_param .

    TOK_comma       reduce using rule 196 (fun_params -> fun_params TOK_comma fun_param .)
    TOK_pararight   reduce using rule 196 (fun_params -> fun_params TOK_comma fun_param .)


state 313

    (130) array_data_type -> KW_array TOK_lsqb type . TOK_rsqb

    TOK_rsqb        shift and go to state 326


state 314

    (150) if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else . statement
    (137) statement -> . normal_statement
    (138) statement -> . if_then_statement
    (139) statement -> . if_then_else_statement
    (140) statement -> . while_statement
    (141) statement -> . for_statement
    (142) normal_statement -> . block
    (143) normal_statement -> . expression_statement
    (144) normal_statement -> . empty_statement
    (145) normal_statement -> . return_statement
    (149) if_then_statement -> . KW_if TOK_paraleft expression TOK_pararight statement
    (150) if_then_else_statement -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (154) while_statement -> . KW_while TOK_paraleft expression TOK_pararight statement
    (155) for_statement -> . KW_for TOK_paraleft for_logic TOK_pararight statement
    (8) block -> . TOK_lcurly block_stats_star TOK_rcurly
    (146) expression_statement -> . statement_expression TOK_semi
    (164) empty_statement -> . TOK_semi
    (165) return_statement -> . KW_return expression_question TOK_semi
    (147) statement_expression -> . assignment
    (148) statement_expression -> . method_invocation
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name

    KW_if           shift and go to state 39
    KW_while        shift and go to state 54
    KW_for          shift and go to state 33
    TOK_lcurly      shift and go to state 14
    TOK_semi        shift and go to state 50
    KW_return       shift and go to state 51
    TOK_identifier  shift and go to state 12

    expression_statement           shift and go to state 23
    normal_statement               shift and go to state 25
    if_then_statement              shift and go to state 27
    left_hand_side                 shift and go to state 28
    array_access                   shift and go to state 29
    id                             shift and go to state 30
    return_statement               shift and go to state 34
    while_statement                shift and go to state 35
    statement                      shift and go to state 327
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 45
    for_statement                  shift and go to state 41
    assignment                     shift and go to state 43
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    empty_statement                shift and go to state 49
    block                          shift and go to state 55
    if_then_else_statement         shift and go to state 56

state 315

    (149) if_then_statement -> KW_if TOK_paraleft . expression TOK_pararight statement
    (150) if_then_else_statement -> KW_if TOK_paraleft . expression TOK_pararight if_then_else_intermediate KW_else statement
    (151) if_then_else_statement_precedence -> KW_if TOK_paraleft . expression TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate
    (19) expression -> . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    and_expression                 shift and go to state 83
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    unary_expression               shift and go to state 124
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    expression                     shift and go to state 328

state 316

    (109) variable_declaration_body -> identifiers type_question TOK_assignment variable_declaration_initializer .

    TOK_semi        reduce using rule 109 (variable_declaration_body -> identifiers type_question TOK_assignment variable_declaration_initializer .)


state 317

    (114) variable_list -> variable_list TOK_comma variable_dec .

    TOK_pararight   reduce using rule 114 (variable_list -> variable_list TOK_comma variable_dec .)
    TOK_comma       reduce using rule 114 (variable_list -> variable_list TOK_comma variable_dec .)


state 318

    (110) variable_declaration_body -> TOK_paraleft variable_list TOK_pararight TOK_assignment . TOK_paraleft variable_argument_list TOK_pararight

    TOK_paraleft    shift and go to state 329


state 319

    (23) if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression . KW_else expression

    KW_else         shift and go to state 330


state 320

    (131) array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb . TOK_paraleft conditional_or_expression TOK_pararight

    TOK_paraleft    shift and go to state 331


state 321

    (136) class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .

    TOK_semi        reduce using rule 136 (class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .)
    KW_if           reduce using rule 136 (class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .)
    KW_while        reduce using rule 136 (class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .)
    KW_for          reduce using rule 136 (class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .)
    KW_def          reduce using rule 136 (class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .)
    TOK_lcurly      reduce using rule 136 (class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .)
    KW_return       reduce using rule 136 (class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .)
    KW_obj          reduce using rule 136 (class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .)
    KW_class        reduce using rule 136 (class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .)
    KW_protected    reduce using rule 136 (class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .)
    KW_private      reduce using rule 136 (class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .)
    TOK_identifier  reduce using rule 136 (class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .)
    KW_var          reduce using rule 136 (class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .)
    KW_val          reduce using rule 136 (class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .)
    TOK_rcurly      reduce using rule 136 (class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .)
    TOK_pararight   reduce using rule 136 (class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .)
    TOK_comma       reduce using rule 136 (class_initializer -> KW_new name TOK_paraleft argument_list_question TOK_pararight .)


state 322

    (135) multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type . TOK_rsqb TOK_paraleft argument_list TOK_pararight

    TOK_rsqb        shift and go to state 332


state 323

    (133) array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft . argument_list_question TOK_pararight
    (94) argument_list_question -> . argument_list
    (95) argument_list_question -> . empty
    (92) argument_list -> . expression
    (93) argument_list -> . argument_list TOK_comma expression
    (200) empty -> .
    (19) expression -> . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_pararight   reduce using rule 200 (empty -> .)
    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    and_expression                 shift and go to state 83
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    empty                          shift and go to state 149
    argument_list                  shift and go to state 148
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    additive_expression            shift and go to state 97
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    argument_list_question         shift and go to state 333
    expression                     shift and go to state 151

state 324

    (185) class_template -> KW_extends name TOK_paraleft variable_list TOK_pararight .

    TOK_lcurly      reduce using rule 185 (class_template -> KW_extends name TOK_paraleft variable_list TOK_pararight .)


state 325

    (159) for_loop -> TOK_identifier TOK_choose expression for_untilTo expression .

    KW_by           reduce using rule 159 (for_loop -> TOK_identifier TOK_choose expression for_untilTo expression .)
    TOK_semi        reduce using rule 159 (for_loop -> TOK_identifier TOK_choose expression for_untilTo expression .)
    TOK_pararight   reduce using rule 159 (for_loop -> TOK_identifier TOK_choose expression for_untilTo expression .)


state 326

    (130) array_data_type -> KW_array TOK_lsqb type TOK_rsqb .

    TOK_assignment  reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    TOK_lcurly      reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    KW_new          reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    KW_array        reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    KW_if           reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    TOK_identifier  reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    TOK_plus        reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    TOK_minus       reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    TOK_tilda       reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    TOK_not         reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    TOK_paraleft    reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    TOK_float       reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    TOK_int         reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    TOK_char        reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    TOK_string      reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    KW_true         reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    KW_false        reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    KW_null         reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    TOK_pararight   reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    TOK_comma       reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)
    TOK_rsqb        reduce using rule 130 (array_data_type -> KW_array TOK_lsqb type TOK_rsqb .)


state 327

    (150) if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .

    KW_if           reduce using rule 150 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    KW_while        reduce using rule 150 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    KW_for          reduce using rule 150 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    KW_def          reduce using rule 150 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    TOK_lcurly      reduce using rule 150 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    TOK_semi        reduce using rule 150 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    KW_return       reduce using rule 150 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    KW_obj          reduce using rule 150 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    KW_class        reduce using rule 150 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    KW_protected    reduce using rule 150 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    KW_private      reduce using rule 150 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    TOK_identifier  reduce using rule 150 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    KW_var          reduce using rule 150 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    KW_val          reduce using rule 150 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)
    TOK_rcurly      reduce using rule 150 (if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement .)


state 328

    (149) if_then_statement -> KW_if TOK_paraleft expression . TOK_pararight statement
    (150) if_then_else_statement -> KW_if TOK_paraleft expression . TOK_pararight if_then_else_intermediate KW_else statement
    (151) if_then_else_statement_precedence -> KW_if TOK_paraleft expression . TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate

    TOK_pararight   shift and go to state 334


state 329

    (110) variable_declaration_body -> TOK_paraleft variable_list TOK_pararight TOK_assignment TOK_paraleft . variable_argument_list TOK_pararight
    (107) variable_argument_list -> . variable_declaration_initializer
    (108) variable_argument_list -> . variable_argument_list TOK_comma variable_declaration_initializer
    (104) variable_declaration_initializer -> . expression
    (105) variable_declaration_initializer -> . array_initializer
    (106) variable_declaration_initializer -> . class_initializer
    (19) expression -> . assignment_expression
    (131) array_initializer -> . KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight
    (132) array_initializer -> . KW_array TOK_paraleft argument_list_question TOK_pararight
    (133) array_initializer -> . KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight
    (134) array_initializer -> . multidimensional_array_initializer
    (136) class_initializer -> . KW_new name TOK_paraleft argument_list_question TOK_pararight
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (135) multidimensional_array_initializer -> . KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_new          shift and go to state 101
    KW_array        shift and go to state 121
    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    variable_declaration_initializer shift and go to state 335
    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    relational_expression          shift and go to state 103
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    and_expression                 shift and go to state 83
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    multidimensional_array_initializer shift and go to state 96
    literal                        shift and go to state 99
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    variable_argument_list         shift and go to state 336
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    additive_expression            shift and go to state 97
    method_invocation              shift and go to state 110
    class_initializer              shift and go to state 114
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    array_initializer              shift and go to state 118
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    expression                     shift and go to state 126
    conditional_and_expression     shift and go to state 127

state 330

    (23) if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else . expression
    (19) expression -> . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    and_expression                 shift and go to state 83
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    expression                     shift and go to state 337

state 331

    (131) array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft . conditional_or_expression TOK_pararight
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_identifier  shift and go to state 12
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 172
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    and_expression                 shift and go to state 83
    cast_expression                shift and go to state 90
    relational_expression          shift and go to state 103
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_or_expression      shift and go to state 338
    conditional_and_expression     shift and go to state 127

state 332

    (135) multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb . TOK_paraleft argument_list TOK_pararight

    TOK_paraleft    shift and go to state 339


state 333

    (133) array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question . TOK_pararight

    TOK_pararight   shift and go to state 340


state 334

    (149) if_then_statement -> KW_if TOK_paraleft expression TOK_pararight . statement
    (150) if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight . if_then_else_intermediate KW_else statement
    (151) if_then_else_statement_precedence -> KW_if TOK_paraleft expression TOK_pararight . if_then_else_intermediate KW_else if_then_else_intermediate
    (137) statement -> . normal_statement
    (138) statement -> . if_then_statement
    (139) statement -> . if_then_else_statement
    (140) statement -> . while_statement
    (141) statement -> . for_statement
    (152) if_then_else_intermediate -> . normal_statement
    (153) if_then_else_intermediate -> . if_then_else_statement_precedence
    (142) normal_statement -> . block
    (143) normal_statement -> . expression_statement
    (144) normal_statement -> . empty_statement
    (145) normal_statement -> . return_statement
    (149) if_then_statement -> . KW_if TOK_paraleft expression TOK_pararight statement
    (150) if_then_else_statement -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (154) while_statement -> . KW_while TOK_paraleft expression TOK_pararight statement
    (155) for_statement -> . KW_for TOK_paraleft for_logic TOK_pararight statement
    (151) if_then_else_statement_precedence -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate
    (8) block -> . TOK_lcurly block_stats_star TOK_rcurly
    (146) expression_statement -> . statement_expression TOK_semi
    (164) empty_statement -> . TOK_semi
    (165) return_statement -> . KW_return expression_question TOK_semi
    (147) statement_expression -> . assignment
    (148) statement_expression -> . method_invocation
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name

    KW_if           shift and go to state 292
    KW_while        shift and go to state 54
    KW_for          shift and go to state 33
    TOK_lcurly      shift and go to state 14
    TOK_semi        shift and go to state 50
    KW_return       shift and go to state 51
    TOK_identifier  shift and go to state 12

    expression_statement           shift and go to state 23
    if_then_else_statement_precedence shift and go to state 288
    normal_statement               shift and go to state 289
    if_then_else_intermediate      shift and go to state 341
    if_then_statement              shift and go to state 27
    left_hand_side                 shift and go to state 28
    array_access                   shift and go to state 29
    id                             shift and go to state 30
    return_statement               shift and go to state 34
    while_statement                shift and go to state 35
    statement                      shift and go to state 291
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 45
    for_statement                  shift and go to state 41
    assignment                     shift and go to state 43
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    empty_statement                shift and go to state 49
    block                          shift and go to state 55
    if_then_else_statement         shift and go to state 56

state 335

    (107) variable_argument_list -> variable_declaration_initializer .

    TOK_pararight   reduce using rule 107 (variable_argument_list -> variable_declaration_initializer .)
    TOK_comma       reduce using rule 107 (variable_argument_list -> variable_declaration_initializer .)


state 336

    (110) variable_declaration_body -> TOK_paraleft variable_list TOK_pararight TOK_assignment TOK_paraleft variable_argument_list . TOK_pararight
    (108) variable_argument_list -> variable_argument_list . TOK_comma variable_declaration_initializer

    TOK_pararight   shift and go to state 343
    TOK_comma       shift and go to state 342


state 337

    (23) if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .

    TOK_rsqb        reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    KW_else         reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    TOK_pararight   reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    TOK_comma       reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    TOK_semi        reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    KW_if           reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    KW_while        reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    KW_for          reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    KW_def          reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    TOK_lcurly      reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    KW_return       reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    KW_obj          reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    KW_class        reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    KW_protected    reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    KW_private      reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    TOK_identifier  reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    KW_var          reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    KW_val          reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    TOK_rcurly      reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    KW_until        reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    KW_to           reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)
    KW_by           reduce using rule 23 (if_else_expression -> KW_if TOK_paraleft expression TOK_pararight expression KW_else expression .)


state 338

    (131) array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression . TOK_pararight
    (41) conditional_or_expression -> conditional_or_expression . TOK_or conditional_and_expression

    TOK_pararight   shift and go to state 344
    TOK_or          shift and go to state 181


state 339

    (135) multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft . argument_list TOK_pararight
    (92) argument_list -> . expression
    (93) argument_list -> . argument_list TOK_comma expression
    (19) expression -> . assignment_expression
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    and_expression                 shift and go to state 83
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    additive_expression            shift and go to state 97
    c_literal                      shift and go to state 91
    unary_expression               shift and go to state 124
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    literal                        shift and go to state 99
    relational_expression          shift and go to state 103
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    argument_list                  shift and go to state 345
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    method_invocation              shift and go to state 110
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    expression                     shift and go to state 151

state 340

    (133) array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .

    TOK_pararight   reduce using rule 133 (array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .)
    TOK_comma       reduce using rule 133 (array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .)
    TOK_semi        reduce using rule 133 (array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .)
    KW_if           reduce using rule 133 (array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .)
    KW_while        reduce using rule 133 (array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .)
    KW_for          reduce using rule 133 (array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .)
    KW_def          reduce using rule 133 (array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .)
    TOK_lcurly      reduce using rule 133 (array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .)
    KW_return       reduce using rule 133 (array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .)
    KW_obj          reduce using rule 133 (array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .)
    KW_class        reduce using rule 133 (array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .)
    KW_protected    reduce using rule 133 (array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .)
    KW_private      reduce using rule 133 (array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .)
    TOK_identifier  reduce using rule 133 (array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .)
    KW_var          reduce using rule 133 (array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .)
    KW_val          reduce using rule 133 (array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .)
    TOK_rcurly      reduce using rule 133 (array_initializer -> KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight .)


state 341

    (150) if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate . KW_else statement
    (151) if_then_else_statement_precedence -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate . KW_else if_then_else_intermediate

    KW_else         shift and go to state 346


state 342

    (108) variable_argument_list -> variable_argument_list TOK_comma . variable_declaration_initializer
    (104) variable_declaration_initializer -> . expression
    (105) variable_declaration_initializer -> . array_initializer
    (106) variable_declaration_initializer -> . class_initializer
    (19) expression -> . assignment_expression
    (131) array_initializer -> . KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight
    (132) array_initializer -> . KW_array TOK_paraleft argument_list_question TOK_pararight
    (133) array_initializer -> . KW_array TOK_lsqb type TOK_rsqb TOK_paraleft argument_list_question TOK_pararight
    (134) array_initializer -> . multidimensional_array_initializer
    (136) class_initializer -> . KW_new name TOK_paraleft argument_list_question TOK_pararight
    (20) assignment_expression -> . assignment
    (21) assignment_expression -> . conditional_or_expression
    (22) assignment_expression -> . if_else_expression
    (135) multidimensional_array_initializer -> . KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (40) conditional_or_expression -> . conditional_and_expression
    (41) conditional_or_expression -> . conditional_or_expression TOK_or conditional_and_expression
    (23) if_else_expression -> . KW_if TOK_paraleft expression TOK_pararight expression KW_else expression
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (42) conditional_and_expression -> . inclusive_or_expression
    (43) conditional_and_expression -> . conditional_and_expression TOK_and inclusive_or_expression
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (44) inclusive_or_expression -> . exclusive_or_expression
    (45) inclusive_or_expression -> . inclusive_or_expression TOK_or_bitwise exclusive_or_expression
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name
    (46) exclusive_or_expression -> . and_expression
    (47) exclusive_or_expression -> . exclusive_or_expression TOK_xor and_expression
    (48) and_expression -> . equality_expression
    (49) and_expression -> . and_expression TOK_and_bitwise equality_expression
    (50) equality_expression -> . relational_expression
    (51) equality_expression -> . equality_expression TOK_equal relational_expression
    (52) equality_expression -> . equality_expression TOK_nequal relational_expression
    (53) relational_expression -> . shift_expression
    (54) relational_expression -> . relational_expression TOK_greater shift_expression
    (55) relational_expression -> . relational_expression TOK_lesser shift_expression
    (56) relational_expression -> . relational_expression TOK_geq shift_expression
    (57) relational_expression -> . relational_expression TOK_leq shift_expression
    (58) shift_expression -> . additive_expression
    (59) shift_expression -> . shift_expression TOK_lshift additive_expression
    (60) shift_expression -> . shift_expression TOK_rshift additive_expression
    (61) additive_expression -> . multiplicative_expression
    (62) additive_expression -> . additive_expression TOK_plus multiplicative_expression
    (63) additive_expression -> . additive_expression TOK_minus multiplicative_expression
    (64) multiplicative_expression -> . unary_expression
    (65) multiplicative_expression -> . multiplicative_expression TOK_times unary_expression
    (66) multiplicative_expression -> . multiplicative_expression TOK_divide unary_expression
    (67) multiplicative_expression -> . multiplicative_expression TOK_modulus unary_expression
    (68) unary_expression -> . TOK_plus unary_expression
    (69) unary_expression -> . TOK_minus unary_expression
    (70) unary_expression -> . unary_expression_not_plus_minus
    (71) unary_expression_not_plus_minus -> . base_variable_set
    (72) unary_expression_not_plus_minus -> . TOK_tilda unary_expression
    (73) unary_expression_not_plus_minus -> . TOK_not unary_expression
    (74) unary_expression_not_plus_minus -> . cast_expression
    (75) base_variable_set -> . variable_literal
    (76) base_variable_set -> . TOK_paraleft expression TOK_pararight
    (79) cast_expression -> . TOK_paraleft primitive_type TOK_pararight unary_expression
    (77) variable_literal -> . left_hand_side
    (78) variable_literal -> . primary
    (80) primary -> . literal
    (81) primary -> . method_invocation
    (82) literal -> . int_float
    (83) literal -> . c_literal
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (89) int_float -> . TOK_float
    (90) int_float -> . TOK_int
    (84) c_literal -> . TOK_char
    (85) c_literal -> . TOK_string
    (86) c_literal -> . KW_true
    (87) c_literal -> . KW_false
    (88) c_literal -> . KW_null

    KW_new          shift and go to state 101
    KW_array        shift and go to state 121
    KW_if           shift and go to state 100
    TOK_identifier  shift and go to state 12
    TOK_plus        shift and go to state 112
    TOK_minus       shift and go to state 123
    TOK_tilda       shift and go to state 92
    TOK_not         shift and go to state 106
    TOK_paraleft    shift and go to state 122
    TOK_float       shift and go to state 119
    TOK_int         shift and go to state 125
    TOK_char        shift and go to state 111
    TOK_string      shift and go to state 104
    KW_true         shift and go to state 87
    KW_false        shift and go to state 116
    KW_null         shift and go to state 95

    variable_declaration_initializer shift and go to state 347
    unary_expression               shift and go to state 124
    exclusive_or_expression        shift and go to state 84
    primary                        shift and go to state 85
    unary_expression_not_plus_minus shift and go to state 86
    relational_expression          shift and go to state 103
    left_hand_side                 shift and go to state 88
    array_access                   shift and go to state 29
    id                             shift and go to state 89
    and_expression                 shift and go to state 83
    c_literal                      shift and go to state 91
    base_variable_set              shift and go to state 93
    inclusive_or_expression        shift and go to state 94
    multidimensional_array_initializer shift and go to state 96
    literal                        shift and go to state 99
    cast_expression                shift and go to state 90
    conditional_or_expression      shift and go to state 102
    if_else_expression             shift and go to state 105
    assignment_expression          shift and go to state 107
    assignment                     shift and go to state 108
    multiplicative_expression      shift and go to state 109
    additive_expression            shift and go to state 97
    method_invocation              shift and go to state 110
    class_initializer              shift and go to state 114
    shift_expression               shift and go to state 98
    equality_expression            shift and go to state 117
    array_initializer              shift and go to state 118
    int_float                      shift and go to state 120
    variable_literal               shift and go to state 115
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    conditional_and_expression     shift and go to state 127
    expression                     shift and go to state 126

state 343

    (110) variable_declaration_body -> TOK_paraleft variable_list TOK_pararight TOK_assignment TOK_paraleft variable_argument_list TOK_pararight .

    TOK_semi        reduce using rule 110 (variable_declaration_body -> TOK_paraleft variable_list TOK_pararight TOK_assignment TOK_paraleft variable_argument_list TOK_pararight .)


state 344

    (131) array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .

    TOK_pararight   reduce using rule 131 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .)
    TOK_comma       reduce using rule 131 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .)
    TOK_semi        reduce using rule 131 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .)
    KW_if           reduce using rule 131 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .)
    KW_while        reduce using rule 131 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .)
    KW_for          reduce using rule 131 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .)
    KW_def          reduce using rule 131 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .)
    TOK_lcurly      reduce using rule 131 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .)
    KW_return       reduce using rule 131 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .)
    KW_obj          reduce using rule 131 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .)
    KW_class        reduce using rule 131 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .)
    KW_protected    reduce using rule 131 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .)
    KW_private      reduce using rule 131 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .)
    TOK_identifier  reduce using rule 131 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .)
    KW_var          reduce using rule 131 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .)
    KW_val          reduce using rule 131 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .)
    TOK_rcurly      reduce using rule 131 (array_initializer -> KW_new KW_array TOK_lsqb type TOK_rsqb TOK_paraleft conditional_or_expression TOK_pararight .)


state 345

    (135) multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list . TOK_pararight
    (93) argument_list -> argument_list . TOK_comma expression

    TOK_pararight   shift and go to state 348
    TOK_comma       shift and go to state 214


state 346

    (150) if_then_else_statement -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else . statement
    (151) if_then_else_statement_precedence -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else . if_then_else_intermediate
    (137) statement -> . normal_statement
    (138) statement -> . if_then_statement
    (139) statement -> . if_then_else_statement
    (140) statement -> . while_statement
    (141) statement -> . for_statement
    (152) if_then_else_intermediate -> . normal_statement
    (153) if_then_else_intermediate -> . if_then_else_statement_precedence
    (142) normal_statement -> . block
    (143) normal_statement -> . expression_statement
    (144) normal_statement -> . empty_statement
    (145) normal_statement -> . return_statement
    (149) if_then_statement -> . KW_if TOK_paraleft expression TOK_pararight statement
    (150) if_then_else_statement -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else statement
    (154) while_statement -> . KW_while TOK_paraleft expression TOK_pararight statement
    (155) for_statement -> . KW_for TOK_paraleft for_logic TOK_pararight statement
    (151) if_then_else_statement_precedence -> . KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate
    (8) block -> . TOK_lcurly block_stats_star TOK_rcurly
    (146) expression_statement -> . statement_expression TOK_semi
    (164) empty_statement -> . TOK_semi
    (165) return_statement -> . KW_return expression_question TOK_semi
    (147) statement_expression -> . assignment
    (148) statement_expression -> . method_invocation
    (24) assignment -> . left_hand_side assignment_operator assignment_expression
    (91) method_invocation -> . id TOK_paraleft argument_list_question TOK_pararight
    (25) left_hand_side -> . id
    (26) left_hand_side -> . array_access
    (27) id -> . name
    (28) id -> . qualified_id
    (31) array_access -> . id dimension
    (30) name -> . TOK_identifier
    (29) qualified_id -> . name TOK_dot name

    KW_if           shift and go to state 292
    KW_while        shift and go to state 54
    KW_for          shift and go to state 33
    TOK_lcurly      shift and go to state 14
    TOK_semi        shift and go to state 50
    KW_return       shift and go to state 51
    TOK_identifier  shift and go to state 12

    expression_statement           shift and go to state 23
    if_then_else_statement_precedence shift and go to state 288
    normal_statement               shift and go to state 289
    if_then_else_intermediate      shift and go to state 349
    if_then_statement              shift and go to state 27
    left_hand_side                 shift and go to state 28
    array_access                   shift and go to state 29
    id                             shift and go to state 30
    return_statement               shift and go to state 34
    while_statement                shift and go to state 35
    statement                      shift and go to state 327
    statement_expression           shift and go to state 38
    method_invocation              shift and go to state 45
    for_statement                  shift and go to state 41
    assignment                     shift and go to state 43
    name                           shift and go to state 46
    qualified_id                   shift and go to state 47
    empty_statement                shift and go to state 49
    block                          shift and go to state 55
    if_then_else_statement         shift and go to state 56

state 347

    (108) variable_argument_list -> variable_argument_list TOK_comma variable_declaration_initializer .

    TOK_pararight   reduce using rule 108 (variable_argument_list -> variable_argument_list TOK_comma variable_declaration_initializer .)
    TOK_comma       reduce using rule 108 (variable_argument_list -> variable_argument_list TOK_comma variable_declaration_initializer .)


state 348

    (135) multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .

    TOK_pararight   reduce using rule 135 (multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .)
    TOK_comma       reduce using rule 135 (multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .)
    TOK_semi        reduce using rule 135 (multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .)
    KW_if           reduce using rule 135 (multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .)
    KW_while        reduce using rule 135 (multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .)
    KW_for          reduce using rule 135 (multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .)
    KW_def          reduce using rule 135 (multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .)
    TOK_lcurly      reduce using rule 135 (multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .)
    KW_return       reduce using rule 135 (multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .)
    KW_obj          reduce using rule 135 (multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .)
    KW_class        reduce using rule 135 (multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .)
    KW_protected    reduce using rule 135 (multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .)
    KW_private      reduce using rule 135 (multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .)
    TOK_identifier  reduce using rule 135 (multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .)
    KW_var          reduce using rule 135 (multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .)
    KW_val          reduce using rule 135 (multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .)
    TOK_rcurly      reduce using rule 135 (multidimensional_array_initializer -> KW_array TOK_dot KW_ofdim TOK_lsqb type TOK_rsqb TOK_paraleft argument_list TOK_pararight .)


state 349

    (151) if_then_else_statement_precedence -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate .

    KW_else         reduce using rule 151 (if_then_else_statement_precedence -> KW_if TOK_paraleft expression TOK_pararight if_then_else_intermediate KW_else if_then_else_intermediate .)

